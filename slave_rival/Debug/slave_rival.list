
slave_rival.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  0800b570  0800b570  0001b570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd94  0800bd94  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd94  0800bd94  0001bd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd9c  0800bd9c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd9c  0800bd9c  0001bd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800bda4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020214  2**0
                  CONTENTS
 10 .bss          00000628  20000214  20000214  00020214  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000083c  2000083c  00020214  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110f5  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002846  00000000  00000000  00031339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00033b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d68  00000000  00000000  00034a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023125  00000000  00000000  00035778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000126f3  00000000  00000000  0005889d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd97d  00000000  00000000  0006af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013890d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ec8  00000000  00000000  00138960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b554 	.word	0x0800b554

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	0800b554 	.word	0x0800b554

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_DMA_Init+0x4c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <MX_DMA_Init+0x4c>)
 8000f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <MX_DMA_Init+0x4c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	2010      	movs	r0, #16
 8000f74:	f003 f8fb 	bl	800416e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f78:	2010      	movs	r0, #16
 8000f7a:	f003 f914 	bl	80041a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2011      	movs	r0, #17
 8000f84:	f003 f8f3 	bl	800416e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f88:	2011      	movs	r0, #17
 8000f8a:	f003 f90c 	bl	80041a6 <HAL_NVIC_EnableIRQ>

}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800

08000f9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	4b55      	ldr	r3, [pc, #340]	; (800110c <MX_GPIO_Init+0x170>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a54      	ldr	r2, [pc, #336]	; (800110c <MX_GPIO_Init+0x170>)
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b52      	ldr	r3, [pc, #328]	; (800110c <MX_GPIO_Init+0x170>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <MX_GPIO_Init+0x170>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a4d      	ldr	r2, [pc, #308]	; (800110c <MX_GPIO_Init+0x170>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b4b      	ldr	r3, [pc, #300]	; (800110c <MX_GPIO_Init+0x170>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b47      	ldr	r3, [pc, #284]	; (800110c <MX_GPIO_Init+0x170>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a46      	ldr	r2, [pc, #280]	; (800110c <MX_GPIO_Init+0x170>)
 8000ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b44      	ldr	r3, [pc, #272]	; (800110c <MX_GPIO_Init+0x170>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b40      	ldr	r3, [pc, #256]	; (800110c <MX_GPIO_Init+0x170>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a3f      	ldr	r2, [pc, #252]	; (800110c <MX_GPIO_Init+0x170>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b3d      	ldr	r3, [pc, #244]	; (800110c <MX_GPIO_Init+0x170>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b39      	ldr	r3, [pc, #228]	; (800110c <MX_GPIO_Init+0x170>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a38      	ldr	r2, [pc, #224]	; (800110c <MX_GPIO_Init+0x170>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b36      	ldr	r3, [pc, #216]	; (800110c <MX_GPIO_Init+0x170>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b32      	ldr	r3, [pc, #200]	; (800110c <MX_GPIO_Init+0x170>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a31      	ldr	r2, [pc, #196]	; (800110c <MX_GPIO_Init+0x170>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b2f      	ldr	r3, [pc, #188]	; (800110c <MX_GPIO_Init+0x170>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, lcd_anode_Pin|lcd_db5_Pin|lcd_db4_Pin|M3_D2_Pin
 800105a:	2200      	movs	r2, #0
 800105c:	f24f 411f 	movw	r1, #62495	; 0xf41f
 8001060:	482b      	ldr	r0, [pc, #172]	; (8001110 <MX_GPIO_Init+0x174>)
 8001062:	f003 fe59 	bl	8004d18 <HAL_GPIO_WritePin>
                          |M2_D1_Pin|M3_D1_Pin|M1_D2_Pin|M2_D2_Pin
                          |lcd_db7_Pin|lcd_db6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, lcd_rs_Pin|lcd_out_Pin|lcd_e_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800106c:	4829      	ldr	r0, [pc, #164]	; (8001114 <MX_GPIO_Init+0x178>)
 800106e:	f003 fe53 	bl	8004d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_D1_Pin|M0_D1_Pin|M0_D2_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001078:	4827      	ldr	r0, [pc, #156]	; (8001118 <MX_GPIO_Init+0x17c>)
 800107a:	f003 fe4d 	bl	8004d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_SET);
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001084:	4825      	ldr	r0, [pc, #148]	; (800111c <MX_GPIO_Init+0x180>)
 8001086:	f003 fe47 	bl	8004d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = lcd_anode_Pin|lcd_db5_Pin|lcd_db4_Pin|M3_D2_Pin
 800108a:	f24f 431f 	movw	r3, #62495	; 0xf41f
 800108e:	61fb      	str	r3, [r7, #28]
                          |M2_D1_Pin|M3_D1_Pin|M1_D2_Pin|M2_D2_Pin
                          |lcd_db7_Pin|lcd_db6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	481b      	ldr	r0, [pc, #108]	; (8001110 <MX_GPIO_Init+0x174>)
 80010a4:	f003 fc9c 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = lcd_rs_Pin|lcd_out_Pin|lcd_e_Pin;
 80010a8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <MX_GPIO_Init+0x178>)
 80010c2:	f003 fc8d 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = M1_D1_Pin|M0_D1_Pin|M0_D2_Pin;
 80010c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	480e      	ldr	r0, [pc, #56]	; (8001118 <MX_GPIO_Init+0x17c>)
 80010e0:	f003 fc7e 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzz_Pin;
 80010e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010ea:	2311      	movs	r3, #17
 80010ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Buzz_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <MX_GPIO_Init+0x180>)
 80010fe:	f003 fc6f 	bl	80049e0 <HAL_GPIO_Init>

}
 8001102:	bf00      	nop
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800
 8001110:	40021000 	.word	0x40021000
 8001114:	40020800 	.word	0x40020800
 8001118:	40020400 	.word	0x40020400
 800111c:	40020c00 	.word	0x40020c00

08001120 <init_gyro>:

uint32_t tick_gyro;


void init_gyro(UART_HandleTypeDef *pUART)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_DMA(pUART,&buffRX_t,1);
 8001128:	2201      	movs	r2, #1
 800112a:	4907      	ldr	r1, [pc, #28]	; (8001148 <init_gyro+0x28>)
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f005 fbfd 	bl	800692c <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(pUART, gyroKirim, 6,1000);
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	2206      	movs	r2, #6
 8001138:	4904      	ldr	r1, [pc, #16]	; (800114c <init_gyro+0x2c>)
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f005 faef 	bl	800671e <HAL_UART_Transmit>


//	HAL_UART_Transmit_DMA(pUART, gyroKirim, 5);
//	HAL_UART_Receive_DMA(pUART,gyroTerima , 12);

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000240 	.word	0x20000240
 800114c:	20000000 	.word	0x20000000

08001150 <gyroUART_handler>:

void gyroUART_handler(UART_HandleTypeDef *pUART)
{
 8001150:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]



	if(statRX_t==0 && buffRX_t==0x68)
 800115a:	4b89      	ldr	r3, [pc, #548]	; (8001380 <gyroUART_handler+0x230>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d116      	bne.n	8001190 <gyroUART_handler+0x40>
 8001162:	4b88      	ldr	r3, [pc, #544]	; (8001384 <gyroUART_handler+0x234>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b68      	cmp	r3, #104	; 0x68
 8001168:	d112      	bne.n	8001190 <gyroUART_handler+0x40>
	{
		gyroTerima[0]=0x68;
 800116a:	4b87      	ldr	r3, [pc, #540]	; (8001388 <gyroUART_handler+0x238>)
 800116c:	2268      	movs	r2, #104	; 0x68
 800116e:	701a      	strb	r2, [r3, #0]
		gyroTerima[it_data+1]=buffRX_t;
 8001170:	4b86      	ldr	r3, [pc, #536]	; (800138c <gyroUART_handler+0x23c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	4a83      	ldr	r2, [pc, #524]	; (8001384 <gyroUART_handler+0x234>)
 8001178:	7811      	ldrb	r1, [r2, #0]
 800117a:	4a83      	ldr	r2, [pc, #524]	; (8001388 <gyroUART_handler+0x238>)
 800117c:	54d1      	strb	r1, [r2, r3]
		statRX_t=1;
 800117e:	4b80      	ldr	r3, [pc, #512]	; (8001380 <gyroUART_handler+0x230>)
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
		it_data++;
 8001184:	4b81      	ldr	r3, [pc, #516]	; (800138c <gyroUART_handler+0x23c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	4a80      	ldr	r2, [pc, #512]	; (800138c <gyroUART_handler+0x23c>)
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	e0e4      	b.n	800135a <gyroUART_handler+0x20a>
	}
	else if(statRX_t==1)
 8001190:	4b7b      	ldr	r3, [pc, #492]	; (8001380 <gyroUART_handler+0x230>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	f040 80e0 	bne.w	800135a <gyroUART_handler+0x20a>
	{
		gyroTerima[it_data]=buffRX_t;
 800119a:	4b7c      	ldr	r3, [pc, #496]	; (800138c <gyroUART_handler+0x23c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a79      	ldr	r2, [pc, #484]	; (8001384 <gyroUART_handler+0x234>)
 80011a0:	7811      	ldrb	r1, [r2, #0]
 80011a2:	4a79      	ldr	r2, [pc, #484]	; (8001388 <gyroUART_handler+0x238>)
 80011a4:	54d1      	strb	r1, [r2, r3]
		if(++it_data>15)
 80011a6:	4b79      	ldr	r3, [pc, #484]	; (800138c <gyroUART_handler+0x23c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	4a77      	ldr	r2, [pc, #476]	; (800138c <gyroUART_handler+0x23c>)
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b76      	ldr	r3, [pc, #472]	; (800138c <gyroUART_handler+0x23c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	f340 80d0 	ble.w	800135a <gyroUART_handler+0x20a>
		{
			it_data=0;
 80011ba:	4b74      	ldr	r3, [pc, #464]	; (800138c <gyroUART_handler+0x23c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
			statRX_t=0;
 80011c0:	4b6f      	ldr	r3, [pc, #444]	; (8001380 <gyroUART_handler+0x230>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]

//			if(gyroTerima[0]==0x68 && gyroTerima[1]==0x1f && gyroTerima[2]==0x00 && gyroTerima[3]==0x84)		//punya AR
			if(gyroTerima[0]==0x68 && gyroTerima[1]==0x0d && gyroTerima[2]==0x00 && gyroTerima[3]==0x84)		//punya TR
 80011c6:	4b70      	ldr	r3, [pc, #448]	; (8001388 <gyroUART_handler+0x238>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b68      	cmp	r3, #104	; 0x68
 80011cc:	f040 80c5 	bne.w	800135a <gyroUART_handler+0x20a>
 80011d0:	4b6d      	ldr	r3, [pc, #436]	; (8001388 <gyroUART_handler+0x238>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	2b0d      	cmp	r3, #13
 80011d6:	f040 80c0 	bne.w	800135a <gyroUART_handler+0x20a>
 80011da:	4b6b      	ldr	r3, [pc, #428]	; (8001388 <gyroUART_handler+0x238>)
 80011dc:	789b      	ldrb	r3, [r3, #2]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f040 80bb 	bne.w	800135a <gyroUART_handler+0x20a>
 80011e4:	4b68      	ldr	r3, [pc, #416]	; (8001388 <gyroUART_handler+0x238>)
 80011e6:	78db      	ldrb	r3, [r3, #3]
 80011e8:	2b84      	cmp	r3, #132	; 0x84
 80011ea:	f040 80b6 	bne.w	800135a <gyroUART_handler+0x20a>

			{
				sign = gyroTerima[10]/16;
 80011ee:	4b66      	ldr	r3, [pc, #408]	; (8001388 <gyroUART_handler+0x238>)
 80011f0:	7a9b      	ldrb	r3, [r3, #10]
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b65      	ldr	r3, [pc, #404]	; (8001390 <gyroUART_handler+0x240>)
 80011fa:	601a      	str	r2, [r3, #0]
				if(sign == 1)
 80011fc:	4b64      	ldr	r3, [pc, #400]	; (8001390 <gyroUART_handler+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d104      	bne.n	800120e <gyroUART_handler+0xbe>
					sign = -1;
 8001204:	4b62      	ldr	r3, [pc, #392]	; (8001390 <gyroUART_handler+0x240>)
 8001206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e002      	b.n	8001214 <gyroUART_handler+0xc4>
				else
					sign = 1;
 800120e:	4b60      	ldr	r3, [pc, #384]	; (8001390 <gyroUART_handler+0x240>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]

				a = gyroTerima[10]%16;
 8001214:	4b5c      	ldr	r3, [pc, #368]	; (8001388 <gyroUART_handler+0x238>)
 8001216:	7a9b      	ldrb	r3, [r3, #10]
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001224:	4b5b      	ldr	r3, [pc, #364]	; (8001394 <gyroUART_handler+0x244>)
 8001226:	edc3 7a00 	vstr	s15, [r3]
				b = gyroTerima[11]/16%16;
 800122a:	4b57      	ldr	r3, [pc, #348]	; (8001388 <gyroUART_handler+0x238>)
 800122c:	7adb      	ldrb	r3, [r3, #11]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123e:	4b56      	ldr	r3, [pc, #344]	; (8001398 <gyroUART_handler+0x248>)
 8001240:	edc3 7a00 	vstr	s15, [r3]
				c = gyroTerima[11]%16;
 8001244:	4b50      	ldr	r3, [pc, #320]	; (8001388 <gyroUART_handler+0x238>)
 8001246:	7adb      	ldrb	r3, [r3, #11]
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001254:	4b51      	ldr	r3, [pc, #324]	; (800139c <gyroUART_handler+0x24c>)
 8001256:	edc3 7a00 	vstr	s15, [r3]
				d = gyroTerima[12]/16%16;
 800125a:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <gyroUART_handler+0x238>)
 800125c:	7b1b      	ldrb	r3, [r3, #12]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126e:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <gyroUART_handler+0x250>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
				e = gyroTerima[12]%16;
 8001274:	4b44      	ldr	r3, [pc, #272]	; (8001388 <gyroUART_handler+0x238>)
 8001276:	7b1b      	ldrb	r3, [r3, #12]
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001284:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <gyroUART_handler+0x254>)
 8001286:	edc3 7a00 	vstr	s15, [r3]

				gyroRaw = (float)sign*(a*100 + b*10 + c*1 + d *0.1 + e*0.01) ;
 800128a:	4b41      	ldr	r3, [pc, #260]	; (8001390 <gyroUART_handler+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	ee17 0a90 	vmov	r0, s15
 800129a:	f7ff f955 	bl	8000548 <__aeabi_f2d>
 800129e:	4604      	mov	r4, r0
 80012a0:	460d      	mov	r5, r1
 80012a2:	4b3c      	ldr	r3, [pc, #240]	; (8001394 <gyroUART_handler+0x244>)
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80013a8 <gyroUART_handler+0x258>
 80012ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012b0:	4b39      	ldr	r3, [pc, #228]	; (8001398 <gyroUART_handler+0x248>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80012ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <gyroUART_handler+0x24c>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012cc:	ee17 0a90 	vmov	r0, s15
 80012d0:	f7ff f93a 	bl	8000548 <__aeabi_f2d>
 80012d4:	4680      	mov	r8, r0
 80012d6:	4689      	mov	r9, r1
 80012d8:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <gyroUART_handler+0x250>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f933 	bl	8000548 <__aeabi_f2d>
 80012e2:	a323      	add	r3, pc, #140	; (adr r3, 8001370 <gyroUART_handler+0x220>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff f986 	bl	80005f8 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4640      	mov	r0, r8
 80012f2:	4649      	mov	r1, r9
 80012f4:	f7fe ffca 	bl	800028c <__adddf3>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4690      	mov	r8, r2
 80012fe:	4699      	mov	r9, r3
 8001300:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <gyroUART_handler+0x254>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f91f 	bl	8000548 <__aeabi_f2d>
 800130a:	a31b      	add	r3, pc, #108	; (adr r3, 8001378 <gyroUART_handler+0x228>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f972 	bl	80005f8 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4640      	mov	r0, r8
 800131a:	4649      	mov	r1, r9
 800131c:	f7fe ffb6 	bl	800028c <__adddf3>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4620      	mov	r0, r4
 8001326:	4629      	mov	r1, r5
 8001328:	f7ff f966 	bl	80005f8 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc38 	bl	8000ba8 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <gyroUART_handler+0x25c>)
 800133c:	6013      	str	r3, [r2, #0]

				tick_gyro = HAL_GetTick();
 800133e:	f002 fe0b 	bl	8003f58 <HAL_GetTick>
 8001342:	4603      	mov	r3, r0
 8001344:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <gyroUART_handler+0x260>)
 8001346:	6013      	str	r3, [r2, #0]

				if(statusGyroo<4)
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <gyroUART_handler+0x264>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b03      	cmp	r3, #3
 800134e:	dc04      	bgt.n	800135a <gyroUART_handler+0x20a>
				{
//					offsetSudutt = gyroRaw;
					statusGyroo+=1;
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <gyroUART_handler+0x264>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <gyroUART_handler+0x264>)
 8001358:	6013      	str	r3, [r2, #0]
			}
		}
	}


	HAL_UART_Receive_DMA(pUART,&buffRX_t,1);
 800135a:	2201      	movs	r2, #1
 800135c:	4909      	ldr	r1, [pc, #36]	; (8001384 <gyroUART_handler+0x234>)
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f005 fae4 	bl	800692c <HAL_UART_Receive_DMA>

}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800136e:	bf00      	nop
 8001370:	9999999a 	.word	0x9999999a
 8001374:	3fb99999 	.word	0x3fb99999
 8001378:	47ae147b 	.word	0x47ae147b
 800137c:	3f847ae1 	.word	0x3f847ae1
 8001380:	20000241 	.word	0x20000241
 8001384:	20000240 	.word	0x20000240
 8001388:	20000230 	.word	0x20000230
 800138c:	20000244 	.word	0x20000244
 8001390:	20000248 	.word	0x20000248
 8001394:	2000024c 	.word	0x2000024c
 8001398:	20000250 	.word	0x20000250
 800139c:	20000254 	.word	0x20000254
 80013a0:	20000258 	.word	0x20000258
 80013a4:	2000025c 	.word	0x2000025c
 80013a8:	42c80000 	.word	0x42c80000
 80013ac:	20000260 	.word	0x20000260
 80013b0:	20000268 	.word	0x20000268
 80013b4:	20000264 	.word	0x20000264

080013b8 <lcd_init>:
uint8_t lcd2_max_row;

int i,wait=650;

void lcd_init(uint8_t column, uint8_t row)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
#ifdef USE_RW

	HAL_GPIO_WritePin(lcd_rw_GPIO_Port, lcd_rw_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ce:	48c7      	ldr	r0, [pc, #796]	; (80016ec <lcd_init+0x334>)
 80013d0:	f003 fca2 	bl	8004d18 <HAL_GPIO_WritePin>

#endif

	lcd_address[0] = 0x00;
 80013d4:	4bc6      	ldr	r3, [pc, #792]	; (80016f0 <lcd_init+0x338>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
	lcd_address[1] = 0x40;
 80013da:	4bc5      	ldr	r3, [pc, #788]	; (80016f0 <lcd_init+0x338>)
 80013dc:	2240      	movs	r2, #64	; 0x40
 80013de:	705a      	strb	r2, [r3, #1]
	lcd_address[2] = 0x00 + column;
 80013e0:	4ac3      	ldr	r2, [pc, #780]	; (80016f0 <lcd_init+0x338>)
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	7093      	strb	r3, [r2, #2]
	lcd_address[3] = 0x40 + column;
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	3340      	adds	r3, #64	; 0x40
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4bc0      	ldr	r3, [pc, #768]	; (80016f0 <lcd_init+0x338>)
 80013ee:	70da      	strb	r2, [r3, #3]

	lcd_max_column = column;
 80013f0:	4ac0      	ldr	r2, [pc, #768]	; (80016f4 <lcd_init+0x33c>)
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	7013      	strb	r3, [r2, #0]
	lcd_max_row = row;
 80013f6:	4ac0      	ldr	r2, [pc, #768]	; (80016f8 <lcd_init+0x340>)
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	7013      	strb	r3, [r2, #0]

	lcd_rs_reset;
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001402:	48ba      	ldr	r0, [pc, #744]	; (80016ec <lcd_init+0x334>)
 8001404:	f003 fc88 	bl	8004d18 <HAL_GPIO_WritePin>


	HAL_Delay(50);
 8001408:	2032      	movs	r0, #50	; 0x32
 800140a:	f002 fdb1 	bl	8003f70 <HAL_Delay>
	lcd_4bit(0b0011);
 800140e:	2003      	movs	r0, #3
 8001410:	f000 fa4a 	bl	80018a8 <lcd_4bit>
	HAL_Delay(5);
 8001414:	2005      	movs	r0, #5
 8001416:	f002 fdab 	bl	8003f70 <HAL_Delay>
	lcd_4bit(0b0011);
 800141a:	2003      	movs	r0, #3
 800141c:	f000 fa44 	bl	80018a8 <lcd_4bit>
	HAL_Delay(1);
 8001420:	2001      	movs	r0, #1
 8001422:	f002 fda5 	bl	8003f70 <HAL_Delay>
	lcd_4bit(0b0011);
 8001426:	2003      	movs	r0, #3
 8001428:	f000 fa3e 	bl	80018a8 <lcd_4bit>
	HAL_Delay(1);
 800142c:	2001      	movs	r0, #1
 800142e:	f002 fd9f 	bl	8003f70 <HAL_Delay>
	lcd_4bit(0b0010);
 8001432:	2002      	movs	r0, #2
 8001434:	f000 fa38 	bl	80018a8 <lcd_4bit>
	HAL_Delay(1);
 8001438:	2001      	movs	r0, #1
 800143a:	f002 fd99 	bl	8003f70 <HAL_Delay>
	lcd_8bit(0b00101000);
 800143e:	2028      	movs	r0, #40	; 0x28
 8001440:	f000 faac 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00001000);
 8001444:	2008      	movs	r0, #8
 8001446:	f000 faa9 	bl	800199c <lcd_8bit>
	HAL_Delay(1);
 800144a:	2001      	movs	r0, #1
 800144c:	f002 fd90 	bl	8003f70 <HAL_Delay>
	lcd_8bit(0b00000001);
 8001450:	2001      	movs	r0, #1
 8001452:	f000 faa3 	bl	800199c <lcd_8bit>
	HAL_Delay(3);
 8001456:	2003      	movs	r0, #3
 8001458:	f002 fd8a 	bl	8003f70 <HAL_Delay>
	lcd_8bit(0b00000110);
 800145c:	2006      	movs	r0, #6
 800145e:	f000 fa9d 	bl	800199c <lcd_8bit>
	HAL_Delay(1);
 8001462:	2001      	movs	r0, #1
 8001464:	f002 fd84 	bl	8003f70 <HAL_Delay>
	lcd_8bit(0b00001100);
 8001468:	200c      	movs	r0, #12
 800146a:	f000 fa97 	bl	800199c <lcd_8bit>
	HAL_Delay(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f002 fd7e 	bl	8003f70 <HAL_Delay>
	//Segmen-segmennya dibuat sebanyak 8 buah
	//Semoga bermanfaat
	//---------------------------------------

	//Tepi kiri atas
	lcd_rs_reset;
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147a:	489c      	ldr	r0, [pc, #624]	; (80016ec <lcd_init+0x334>)
 800147c:	f003 fc4c 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0x40);
 8001480:	2040      	movs	r0, #64	; 0x40
 8001482:	f000 fa8b 	bl	800199c <lcd_8bit>
	lcd_rs_set;
 8001486:	2201      	movs	r2, #1
 8001488:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800148c:	4897      	ldr	r0, [pc, #604]	; (80016ec <lcd_init+0x334>)
 800148e:	f003 fc43 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0b00111);
 8001492:	2007      	movs	r0, #7
 8001494:	f000 fa82 	bl	800199c <lcd_8bit>
	lcd_8bit(0b01111);
 8001498:	200f      	movs	r0, #15
 800149a:	f000 fa7f 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 800149e:	201f      	movs	r0, #31
 80014a0:	f000 fa7c 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80014a4:	201f      	movs	r0, #31
 80014a6:	f000 fa79 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80014aa:	201f      	movs	r0, #31
 80014ac:	f000 fa76 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80014b0:	201f      	movs	r0, #31
 80014b2:	f000 fa73 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80014b6:	201f      	movs	r0, #31
 80014b8:	f000 fa70 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80014bc:	201f      	movs	r0, #31
 80014be:	f000 fa6d 	bl	800199c <lcd_8bit>

	//Tepi kiri bawah
	lcd_rs_reset;
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c8:	4888      	ldr	r0, [pc, #544]	; (80016ec <lcd_init+0x334>)
 80014ca:	f003 fc25 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0x48);
 80014ce:	2048      	movs	r0, #72	; 0x48
 80014d0:	f000 fa64 	bl	800199c <lcd_8bit>
	lcd_rs_set;
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014da:	4884      	ldr	r0, [pc, #528]	; (80016ec <lcd_init+0x334>)
 80014dc:	f003 fc1c 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 80014e0:	201f      	movs	r0, #31
 80014e2:	f000 fa5b 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80014e6:	201f      	movs	r0, #31
 80014e8:	f000 fa58 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80014ec:	201f      	movs	r0, #31
 80014ee:	f000 fa55 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80014f2:	201f      	movs	r0, #31
 80014f4:	f000 fa52 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80014f8:	201f      	movs	r0, #31
 80014fa:	f000 fa4f 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80014fe:	201f      	movs	r0, #31
 8001500:	f000 fa4c 	bl	800199c <lcd_8bit>
	lcd_8bit(0b01111);
 8001504:	200f      	movs	r0, #15
 8001506:	f000 fa49 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00111);
 800150a:	2007      	movs	r0, #7
 800150c:	f000 fa46 	bl	800199c <lcd_8bit>

	//Tepi kanan atas
	lcd_rs_reset;
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001516:	4875      	ldr	r0, [pc, #468]	; (80016ec <lcd_init+0x334>)
 8001518:	f003 fbfe 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0x50);
 800151c:	2050      	movs	r0, #80	; 0x50
 800151e:	f000 fa3d 	bl	800199c <lcd_8bit>
	lcd_rs_set;
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001528:	4870      	ldr	r0, [pc, #448]	; (80016ec <lcd_init+0x334>)
 800152a:	f003 fbf5 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0b11100);
 800152e:	201c      	movs	r0, #28
 8001530:	f000 fa34 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11110);
 8001534:	201e      	movs	r0, #30
 8001536:	f000 fa31 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 800153a:	201f      	movs	r0, #31
 800153c:	f000 fa2e 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 8001540:	201f      	movs	r0, #31
 8001542:	f000 fa2b 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 8001546:	201f      	movs	r0, #31
 8001548:	f000 fa28 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 800154c:	201f      	movs	r0, #31
 800154e:	f000 fa25 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 8001552:	201f      	movs	r0, #31
 8001554:	f000 fa22 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 8001558:	201f      	movs	r0, #31
 800155a:	f000 fa1f 	bl	800199c <lcd_8bit>

	//Tepi kanan bawah
	lcd_rs_reset;
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001564:	4861      	ldr	r0, [pc, #388]	; (80016ec <lcd_init+0x334>)
 8001566:	f003 fbd7 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0x58);
 800156a:	2058      	movs	r0, #88	; 0x58
 800156c:	f000 fa16 	bl	800199c <lcd_8bit>
	lcd_rs_set;
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001576:	485d      	ldr	r0, [pc, #372]	; (80016ec <lcd_init+0x334>)
 8001578:	f003 fbce 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 800157c:	201f      	movs	r0, #31
 800157e:	f000 fa0d 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 8001582:	201f      	movs	r0, #31
 8001584:	f000 fa0a 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 8001588:	201f      	movs	r0, #31
 800158a:	f000 fa07 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 800158e:	201f      	movs	r0, #31
 8001590:	f000 fa04 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 8001594:	201f      	movs	r0, #31
 8001596:	f000 fa01 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 800159a:	201f      	movs	r0, #31
 800159c:	f000 f9fe 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11110);
 80015a0:	201e      	movs	r0, #30
 80015a2:	f000 f9fb 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11100);
 80015a6:	201c      	movs	r0, #28
 80015a8:	f000 f9f8 	bl	800199c <lcd_8bit>

	//Tengah-Atas
	lcd_rs_reset;
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b2:	484e      	ldr	r0, [pc, #312]	; (80016ec <lcd_init+0x334>)
 80015b4:	f003 fbb0 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0x60);
 80015b8:	2060      	movs	r0, #96	; 0x60
 80015ba:	f000 f9ef 	bl	800199c <lcd_8bit>
	lcd_rs_set;
 80015be:	2201      	movs	r2, #1
 80015c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c4:	4849      	ldr	r0, [pc, #292]	; (80016ec <lcd_init+0x334>)
 80015c6:	f003 fba7 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 80015ca:	201f      	movs	r0, #31
 80015cc:	f000 f9e6 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80015d0:	201f      	movs	r0, #31
 80015d2:	f000 f9e3 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80015d6:	201f      	movs	r0, #31
 80015d8:	f000 f9e0 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00000);
 80015dc:	2000      	movs	r0, #0
 80015de:	f000 f9dd 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00000);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f9da 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00000);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f000 f9d7 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00000);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 f9d4 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00000);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f000 f9d1 	bl	800199c <lcd_8bit>

	//Tengah-Tengah
	lcd_rs_reset;
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001600:	483a      	ldr	r0, [pc, #232]	; (80016ec <lcd_init+0x334>)
 8001602:	f003 fb89 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0x68);
 8001606:	2068      	movs	r0, #104	; 0x68
 8001608:	f000 f9c8 	bl	800199c <lcd_8bit>
	lcd_rs_set;
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001612:	4836      	ldr	r0, [pc, #216]	; (80016ec <lcd_init+0x334>)
 8001614:	f003 fb80 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 8001618:	201f      	movs	r0, #31
 800161a:	f000 f9bf 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 800161e:	201f      	movs	r0, #31
 8001620:	f000 f9bc 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 8001624:	201f      	movs	r0, #31
 8001626:	f000 f9b9 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00000);
 800162a:	2000      	movs	r0, #0
 800162c:	f000 f9b6 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00000);
 8001630:	2000      	movs	r0, #0
 8001632:	f000 f9b3 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00000);
 8001636:	2000      	movs	r0, #0
 8001638:	f000 f9b0 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 800163c:	201f      	movs	r0, #31
 800163e:	f000 f9ad 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 8001642:	201f      	movs	r0, #31
 8001644:	f000 f9aa 	bl	800199c <lcd_8bit>

	//Tengah-Bawah
	lcd_rs_reset;
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800164e:	4827      	ldr	r0, [pc, #156]	; (80016ec <lcd_init+0x334>)
 8001650:	f003 fb62 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0x70);
 8001654:	2070      	movs	r0, #112	; 0x70
 8001656:	f000 f9a1 	bl	800199c <lcd_8bit>
	lcd_rs_set;
 800165a:	2201      	movs	r2, #1
 800165c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001660:	4822      	ldr	r0, [pc, #136]	; (80016ec <lcd_init+0x334>)
 8001662:	f003 fb59 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0b00000);
 8001666:	2000      	movs	r0, #0
 8001668:	f000 f998 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00000);
 800166c:	2000      	movs	r0, #0
 800166e:	f000 f995 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00000);
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f992 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00000);
 8001678:	2000      	movs	r0, #0
 800167a:	f000 f98f 	bl	800199c <lcd_8bit>
	lcd_8bit(0b00000);
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f98c 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 8001684:	201f      	movs	r0, #31
 8001686:	f000 f989 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 800168a:	201f      	movs	r0, #31
 800168c:	f000 f986 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 8001690:	201f      	movs	r0, #31
 8001692:	f000 f983 	bl	800199c <lcd_8bit>

	//Penuh
	lcd_rs_reset;
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169c:	4813      	ldr	r0, [pc, #76]	; (80016ec <lcd_init+0x334>)
 800169e:	f003 fb3b 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0x78);
 80016a2:	2078      	movs	r0, #120	; 0x78
 80016a4:	f000 f97a 	bl	800199c <lcd_8bit>
	lcd_rs_set;
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ae:	480f      	ldr	r0, [pc, #60]	; (80016ec <lcd_init+0x334>)
 80016b0:	f003 fb32 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 80016b4:	201f      	movs	r0, #31
 80016b6:	f000 f971 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80016ba:	201f      	movs	r0, #31
 80016bc:	f000 f96e 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80016c0:	201f      	movs	r0, #31
 80016c2:	f000 f96b 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80016c6:	201f      	movs	r0, #31
 80016c8:	f000 f968 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80016cc:	201f      	movs	r0, #31
 80016ce:	f000 f965 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80016d2:	201f      	movs	r0, #31
 80016d4:	f000 f962 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80016d8:	201f      	movs	r0, #31
 80016da:	f000 f95f 	bl	800199c <lcd_8bit>
	lcd_8bit(0b11111);
 80016de:	201f      	movs	r0, #31
 80016e0:	f000 f95c 	bl	800199c <lcd_8bit>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40020800 	.word	0x40020800
 80016f0:	2000026c 	.word	0x2000026c
 80016f4:	20000270 	.word	0x20000270
 80016f8:	20000271 	.word	0x20000271

080016fc <lcd_gotoxy>:

void lcd_gotoxy(uint8_t column, uint8_t row)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	460a      	mov	r2, r1
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	4613      	mov	r3, r2
 800170a:	71bb      	strb	r3, [r7, #6]
	if(column >= lcd_max_column) column = 0;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <lcd_gotoxy+0x7c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	429a      	cmp	r2, r3
 8001714:	d301      	bcc.n	800171a <lcd_gotoxy+0x1e>
 8001716:	2300      	movs	r3, #0
 8001718:	71fb      	strb	r3, [r7, #7]
	if(row >= lcd_max_row) row = 0;
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <lcd_gotoxy+0x80>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	79ba      	ldrb	r2, [r7, #6]
 8001720:	429a      	cmp	r2, r3
 8001722:	d301      	bcc.n	8001728 <lcd_gotoxy+0x2c>
 8001724:	2300      	movs	r3, #0
 8001726:	71bb      	strb	r3, [r7, #6]

	lcd_rs_reset;
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172e:	4814      	ldr	r0, [pc, #80]	; (8001780 <lcd_gotoxy+0x84>)
 8001730:	f003 faf2 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(0x80 | (lcd_address[row] + column));
 8001734:	79bb      	ldrb	r3, [r7, #6]
 8001736:	4a13      	ldr	r2, [pc, #76]	; (8001784 <lcd_gotoxy+0x88>)
 8001738:	5cd2      	ldrb	r2, [r2, r3]
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	4413      	add	r3, r2
 800173e:	b2db      	uxtb	r3, r3
 8001740:	b25b      	sxtb	r3, r3
 8001742:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001746:	b25b      	sxtb	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f926 	bl	800199c <lcd_8bit>

	while(++i<wait){}
 8001750:	bf00      	nop
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <lcd_gotoxy+0x8c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <lcd_gotoxy+0x8c>)
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <lcd_gotoxy+0x8c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <lcd_gotoxy+0x90>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf4      	blt.n	8001752 <lcd_gotoxy+0x56>
	i=0;
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <lcd_gotoxy+0x8c>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]

}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000270 	.word	0x20000270
 800177c:	20000271 	.word	0x20000271
 8001780:	40020800 	.word	0x40020800
 8001784:	2000026c 	.word	0x2000026c
 8001788:	20000274 	.word	0x20000274
 800178c:	20000008 	.word	0x20000008

08001790 <lcd_putc>:
	lcd_8bit(0x01);
	HAL_Delay(3);
}

void lcd_putc(uint8_t data)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
	lcd_rs_set;
 800179a:	2201      	movs	r2, #1
 800179c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <lcd_putc+0x44>)
 80017a2:	f003 fab9 	bl	8004d18 <HAL_GPIO_WritePin>
	lcd_8bit(data);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 f8f7 	bl	800199c <lcd_8bit>

	while(++i<wait){}
 80017ae:	bf00      	nop
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <lcd_putc+0x48>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <lcd_putc+0x48>)
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <lcd_putc+0x48>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <lcd_putc+0x4c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dbf4      	blt.n	80017b0 <lcd_putc+0x20>
	i=0;
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <lcd_putc+0x48>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40020800 	.word	0x40020800
 80017d8:	20000274 	.word	0x20000274
 80017dc:	20000008 	.word	0x20000008

080017e0 <lcd_print>:

void lcd_print(uint8_t column, uint8_t row, char* data)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	603a      	str	r2, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	460b      	mov	r3, r1
 80017ee:	71bb      	strb	r3, [r7, #6]
	uint8_t current_column = column;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	73fb      	strb	r3, [r7, #15]
	uint8_t current_row = row;
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	73bb      	strb	r3, [r7, #14]

	while(*data)
 80017f8:	e049      	b.n	800188e <lcd_print+0xae>
	{
		if(current_column >= lcd_max_column && current_row >= lcd_max_row)
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <lcd_print+0xc0>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	429a      	cmp	r2, r3
 8001802:	d319      	bcc.n	8001838 <lcd_print+0x58>
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <lcd_print+0xc4>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	7bba      	ldrb	r2, [r7, #14]
 800180a:	429a      	cmp	r2, r3
 800180c:	d314      	bcc.n	8001838 <lcd_print+0x58>
		{
			current_column = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
			current_row = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	73bb      	strb	r3, [r7, #14]

			lcd_gotoxy(current_column,current_row);
 8001816:	7bba      	ldrb	r2, [r7, #14]
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff6d 	bl	80016fc <lcd_gotoxy>
			lcd_putc(*data++);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	603a      	str	r2, [r7, #0]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ffb0 	bl	8001790 <lcd_putc>
			current_column++;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	3301      	adds	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	e02a      	b.n	800188e <lcd_print+0xae>
		}
		else if(current_column >= lcd_max_column)
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <lcd_print+0xc0>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	429a      	cmp	r2, r3
 8001840:	d315      	bcc.n	800186e <lcd_print+0x8e>
		{
			current_column = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
			current_row++;
 8001846:	7bbb      	ldrb	r3, [r7, #14]
 8001848:	3301      	adds	r3, #1
 800184a:	73bb      	strb	r3, [r7, #14]

			lcd_gotoxy(current_column,current_row);
 800184c:	7bba      	ldrb	r2, [r7, #14]
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff52 	bl	80016fc <lcd_gotoxy>
			lcd_putc(*data++);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	603a      	str	r2, [r7, #0]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff95 	bl	8001790 <lcd_putc>
			current_column++;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	3301      	adds	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	e00f      	b.n	800188e <lcd_print+0xae>
		}
		else
		{
			lcd_gotoxy(current_column,current_row);
 800186e:	7bba      	ldrb	r2, [r7, #14]
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff41 	bl	80016fc <lcd_gotoxy>
			lcd_putc(*data++);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	603a      	str	r2, [r7, #0]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ff84 	bl	8001790 <lcd_putc>
			current_column++;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	3301      	adds	r3, #1
 800188c:	73fb      	strb	r3, [r7, #15]
	while(*data)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1b1      	bne.n	80017fa <lcd_print+0x1a>
		}
	}
}
 8001896:	bf00      	nop
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000270 	.word	0x20000270
 80018a4:	20000271 	.word	0x20000271

080018a8 <lcd_4bit>:

void lcd_4bit(uint8_t data)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x08)>>3);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	10db      	asrs	r3, r3, #3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	2101      	movs	r1, #1
 80018c2:	4832      	ldr	r0, [pc, #200]	; (800198c <lcd_4bit+0xe4>)
 80018c4:	f003 fa28 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db6_GPIO_Port,lcd_db6_Pin,(data & 0x04)>>2);
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	109b      	asrs	r3, r3, #2
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	2102      	movs	r1, #2
 80018d8:	482c      	ldr	r0, [pc, #176]	; (800198c <lcd_4bit+0xe4>)
 80018da:	f003 fa1d 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x02)>>1);
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	105b      	asrs	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	2108      	movs	r1, #8
 80018ee:	4827      	ldr	r0, [pc, #156]	; (800198c <lcd_4bit+0xe4>)
 80018f0:	f003 fa12 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x01)>>0);
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	2110      	movs	r1, #16
 8001900:	4822      	ldr	r0, [pc, #136]	; (800198c <lcd_4bit+0xe4>)
 8001902:	f003 fa09 	bl	8004d18 <HAL_GPIO_WritePin>




	while(++i<wait){}
 8001906:	bf00      	nop
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <lcd_4bit+0xe8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	4a20      	ldr	r2, [pc, #128]	; (8001990 <lcd_4bit+0xe8>)
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <lcd_4bit+0xe8>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <lcd_4bit+0xec>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	dbf4      	blt.n	8001908 <lcd_4bit+0x60>
	i=0;
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <lcd_4bit+0xe8>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
	lcd_e_set;
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800192a:	481b      	ldr	r0, [pc, #108]	; (8001998 <lcd_4bit+0xf0>)
 800192c:	f003 f9f4 	bl	8004d18 <HAL_GPIO_WritePin>
	while(++i<wait){}
 8001930:	bf00      	nop
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <lcd_4bit+0xe8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	4a15      	ldr	r2, [pc, #84]	; (8001990 <lcd_4bit+0xe8>)
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <lcd_4bit+0xe8>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <lcd_4bit+0xec>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	dbf4      	blt.n	8001932 <lcd_4bit+0x8a>
	i=0;
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <lcd_4bit+0xe8>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]

	lcd_e_reset;
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001954:	4810      	ldr	r0, [pc, #64]	; (8001998 <lcd_4bit+0xf0>)
 8001956:	f003 f9df 	bl	8004d18 <HAL_GPIO_WritePin>
	while(++i<wait){}
 800195a:	bf00      	nop
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <lcd_4bit+0xe8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <lcd_4bit+0xe8>)
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <lcd_4bit+0xe8>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <lcd_4bit+0xec>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	dbf4      	blt.n	800195c <lcd_4bit+0xb4>
	i=0;
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <lcd_4bit+0xe8>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
	lcd_e_set;
 8001978:	2201      	movs	r2, #1
 800197a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800197e:	4806      	ldr	r0, [pc, #24]	; (8001998 <lcd_4bit+0xf0>)
 8001980:	f003 f9ca 	bl	8004d18 <HAL_GPIO_WritePin>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000
 8001990:	20000274 	.word	0x20000274
 8001994:	20000008 	.word	0x20000008
 8001998:	40020800 	.word	0x40020800

0800199c <lcd_8bit>:

void lcd_8bit(uint8_t data)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x80)>>7);
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	09db      	lsrs	r3, r3, #7
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	2101      	movs	r1, #1
 80019b0:	4867      	ldr	r0, [pc, #412]	; (8001b50 <lcd_8bit+0x1b4>)
 80019b2:	f003 f9b1 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db6_GPIO_Port,lcd_db6_Pin,(data & 0x40)>>6);
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	119b      	asrs	r3, r3, #6
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	2102      	movs	r1, #2
 80019c6:	4862      	ldr	r0, [pc, #392]	; (8001b50 <lcd_8bit+0x1b4>)
 80019c8:	f003 f9a6 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x20)>>5);
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	115b      	asrs	r3, r3, #5
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	2108      	movs	r1, #8
 80019dc:	485c      	ldr	r0, [pc, #368]	; (8001b50 <lcd_8bit+0x1b4>)
 80019de:	f003 f99b 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x10)>>4);
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	111b      	asrs	r3, r3, #4
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	2110      	movs	r1, #16
 80019f2:	4857      	ldr	r0, [pc, #348]	; (8001b50 <lcd_8bit+0x1b4>)
 80019f4:	f003 f990 	bl	8004d18 <HAL_GPIO_WritePin>


  	while(++i<wait){}
 80019f8:	bf00      	nop
 80019fa:	4b56      	ldr	r3, [pc, #344]	; (8001b54 <lcd_8bit+0x1b8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	4a54      	ldr	r2, [pc, #336]	; (8001b54 <lcd_8bit+0x1b8>)
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <lcd_8bit+0x1b8>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <lcd_8bit+0x1bc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	dbf4      	blt.n	80019fa <lcd_8bit+0x5e>
	i=0;
 8001a10:	4b50      	ldr	r3, [pc, #320]	; (8001b54 <lcd_8bit+0x1b8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
	lcd_e_set;
 8001a16:	2201      	movs	r2, #1
 8001a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1c:	484f      	ldr	r0, [pc, #316]	; (8001b5c <lcd_8bit+0x1c0>)
 8001a1e:	f003 f97b 	bl	8004d18 <HAL_GPIO_WritePin>
	while(++i<wait){}
 8001a22:	bf00      	nop
 8001a24:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <lcd_8bit+0x1b8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	4a4a      	ldr	r2, [pc, #296]	; (8001b54 <lcd_8bit+0x1b8>)
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b49      	ldr	r3, [pc, #292]	; (8001b54 <lcd_8bit+0x1b8>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b49      	ldr	r3, [pc, #292]	; (8001b58 <lcd_8bit+0x1bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	dbf4      	blt.n	8001a24 <lcd_8bit+0x88>
	i=0;
 8001a3a:	4b46      	ldr	r3, [pc, #280]	; (8001b54 <lcd_8bit+0x1b8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
	lcd_e_reset;
 8001a40:	2200      	movs	r2, #0
 8001a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a46:	4845      	ldr	r0, [pc, #276]	; (8001b5c <lcd_8bit+0x1c0>)
 8001a48:	f003 f966 	bl	8004d18 <HAL_GPIO_WritePin>
	while(++i<wait){}
 8001a4c:	bf00      	nop
 8001a4e:	4b41      	ldr	r3, [pc, #260]	; (8001b54 <lcd_8bit+0x1b8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3301      	adds	r3, #1
 8001a54:	4a3f      	ldr	r2, [pc, #252]	; (8001b54 <lcd_8bit+0x1b8>)
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b3e      	ldr	r3, [pc, #248]	; (8001b54 <lcd_8bit+0x1b8>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b3e      	ldr	r3, [pc, #248]	; (8001b58 <lcd_8bit+0x1bc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dbf4      	blt.n	8001a4e <lcd_8bit+0xb2>
	i=0;
 8001a64:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <lcd_8bit+0x1b8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
	lcd_e_set;
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a70:	483a      	ldr	r0, [pc, #232]	; (8001b5c <lcd_8bit+0x1c0>)
 8001a72:	f003 f951 	bl	8004d18 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x08)>>3);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	10db      	asrs	r3, r3, #3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	2101      	movs	r1, #1
 8001a86:	4832      	ldr	r0, [pc, #200]	; (8001b50 <lcd_8bit+0x1b4>)
 8001a88:	f003 f946 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db6_GPIO_Port,lcd_db6_Pin,(data & 0x04)>>2);
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	109b      	asrs	r3, r3, #2
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	482c      	ldr	r0, [pc, #176]	; (8001b50 <lcd_8bit+0x1b4>)
 8001a9e:	f003 f93b 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x02)>>1);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	105b      	asrs	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2108      	movs	r1, #8
 8001ab2:	4827      	ldr	r0, [pc, #156]	; (8001b50 <lcd_8bit+0x1b4>)
 8001ab4:	f003 f930 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x01)>>0);
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2110      	movs	r1, #16
 8001ac4:	4822      	ldr	r0, [pc, #136]	; (8001b50 <lcd_8bit+0x1b4>)
 8001ac6:	f003 f927 	bl	8004d18 <HAL_GPIO_WritePin>

	while(++i<wait){}
 8001aca:	bf00      	nop
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <lcd_8bit+0x1b8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	4a20      	ldr	r2, [pc, #128]	; (8001b54 <lcd_8bit+0x1b8>)
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <lcd_8bit+0x1b8>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <lcd_8bit+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	dbf4      	blt.n	8001acc <lcd_8bit+0x130>
	i=0;
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <lcd_8bit+0x1b8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
	lcd_e_set;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aee:	481b      	ldr	r0, [pc, #108]	; (8001b5c <lcd_8bit+0x1c0>)
 8001af0:	f003 f912 	bl	8004d18 <HAL_GPIO_WritePin>
	while(++i<wait){}
 8001af4:	bf00      	nop
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <lcd_8bit+0x1b8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a15      	ldr	r2, [pc, #84]	; (8001b54 <lcd_8bit+0x1b8>)
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <lcd_8bit+0x1b8>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <lcd_8bit+0x1bc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dbf4      	blt.n	8001af6 <lcd_8bit+0x15a>
	i=0;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <lcd_8bit+0x1b8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
	lcd_e_reset;
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b18:	4810      	ldr	r0, [pc, #64]	; (8001b5c <lcd_8bit+0x1c0>)
 8001b1a:	f003 f8fd 	bl	8004d18 <HAL_GPIO_WritePin>
	while(++i<wait){}
 8001b1e:	bf00      	nop
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <lcd_8bit+0x1b8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <lcd_8bit+0x1b8>)
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <lcd_8bit+0x1b8>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <lcd_8bit+0x1bc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	dbf4      	blt.n	8001b20 <lcd_8bit+0x184>
	i=0;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <lcd_8bit+0x1b8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
	lcd_e_set;
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <lcd_8bit+0x1c0>)
 8001b44:	f003 f8e8 	bl	8004d18 <HAL_GPIO_WritePin>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	20000274 	.word	0x20000274
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	40020800 	.word	0x40020800

08001b60 <Slave_Kirim>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void Slave_Kirim(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
	  //Send To Master
	  time_stamp_tx = HAL_GetTick();
 8001b66:	f002 f9f7 	bl	8003f58 <HAL_GetTick>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a1e      	ldr	r2, [pc, #120]	; (8001be8 <Slave_Kirim+0x88>)
 8001b6e:	6013      	str	r3, [r2, #0]
	  memcpy(tx_buff+3,&RoboPose_Global[0],4);
 8001b70:	4a1e      	ldr	r2, [pc, #120]	; (8001bec <Slave_Kirim+0x8c>)
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <Slave_Kirim+0x90>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6013      	str	r3, [r2, #0]
	  memcpy(tx_buff+7,&RoboPose_Global[1],4);
 8001b78:	4a1e      	ldr	r2, [pc, #120]	; (8001bf4 <Slave_Kirim+0x94>)
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <Slave_Kirim+0x90>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	6013      	str	r3, [r2, #0]
	  memcpy(tx_buff+11,&RoboPose_Global[2],4);
 8001b80:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <Slave_Kirim+0x98>)
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <Slave_Kirim+0x90>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	6013      	str	r3, [r2, #0]
	  memcpy(tx_buff+15,&RoboPose[0],4);
 8001b88:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <Slave_Kirim+0x9c>)
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <Slave_Kirim+0xa0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6013      	str	r3, [r2, #0]
	  memcpy(tx_buff+19,&RoboPose[1],4);
 8001b90:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <Slave_Kirim+0xa4>)
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <Slave_Kirim+0xa0>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	6013      	str	r3, [r2, #0]
	  memcpy(tx_buff+23, &time_stamp_tx, 4);
 8001b98:	4a1b      	ldr	r2, [pc, #108]	; (8001c08 <Slave_Kirim+0xa8>)
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <Slave_Kirim+0x88>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6013      	str	r3, [r2, #0]

	  uint16_t check_s=0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	807b      	strh	r3, [r7, #2]

	  for(int i = 3; i<30; i++){
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	e00b      	b.n	8001bc2 <Slave_Kirim+0x62>
		  check_s += tx_buff[i];
 8001baa:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <Slave_Kirim+0xac>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	807b      	strh	r3, [r7, #2]
	  for(int i = 3; i<30; i++){
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b1d      	cmp	r3, #29
 8001bc6:	ddf0      	ble.n	8001baa <Slave_Kirim+0x4a>
	  }
	  check_s = ~check_s;
 8001bc8:	887b      	ldrh	r3, [r7, #2]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	807b      	strh	r3, [r7, #2]

	  memcpy(tx_buff+30, &check_s, 2);
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <Slave_Kirim+0xb0>)
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	8013      	strh	r3, [r2, #0]

	  HAL_UART_Transmit_IT(&huart1, tx_buff, 32);
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	490c      	ldr	r1, [pc, #48]	; (8001c0c <Slave_Kirim+0xac>)
 8001bda:	480e      	ldr	r0, [pc, #56]	; (8001c14 <Slave_Kirim+0xb4>)
 8001bdc:	f004 fe31 	bl	8006842 <HAL_UART_Transmit_IT>

}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000300 	.word	0x20000300
 8001bec:	2000000f 	.word	0x2000000f
 8001bf0:	200002c4 	.word	0x200002c4
 8001bf4:	20000013 	.word	0x20000013
 8001bf8:	20000017 	.word	0x20000017
 8001bfc:	2000001b 	.word	0x2000001b
 8001c00:	200002d0 	.word	0x200002d0
 8001c04:	2000001f 	.word	0x2000001f
 8001c08:	20000023 	.word	0x20000023
 8001c0c:	2000000c 	.word	0x2000000c
 8001c10:	2000002a 	.word	0x2000002a
 8001c14:	200006e0 	.word	0x200006e0

08001c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c1e:	f002 f935 	bl	8003e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c22:	f000 f951 	bl	8001ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c26:	f7ff f9b9 	bl	8000f9c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c2a:	f7ff f98f 	bl	8000f4c <MX_DMA_Init>
  MX_TIM12_Init();
 8001c2e:	f001 fcbd 	bl	80035ac <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001c32:	f001 ff9b 	bl	8003b6c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001c36:	f001 f9b9 	bl	8002fac <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c3a:	f001 fa0f 	bl	800305c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c3e:	f001 fa61 	bl	8003104 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c42:	f001 fab3 	bl	80031ac <MX_TIM4_Init>
  MX_TIM5_Init();
 8001c46:	f001 fb05 	bl	8003254 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001c4a:	f001 fb57 	bl	80032fc <MX_TIM6_Init>
  MX_TIM7_Init();
 8001c4e:	f001 fb8b 	bl	8003368 <MX_TIM7_Init>
  MX_TIM8_Init();
 8001c52:	f001 fbbf 	bl	80033d4 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001c56:	f001 fc15 	bl	8003484 <MX_TIM9_Init>
  MX_TIM10_Init();
 8001c5a:	f001 fc59 	bl	8003510 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8001c5e:	f001 ffaf 	bl	8003bc0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

//  HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_SET);

  //Init Encoder
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001c62:	213c      	movs	r1, #60	; 0x3c
 8001c64:	4878      	ldr	r0, [pc, #480]	; (8001e48 <main+0x230>)
 8001c66:	f003 ff87 	bl	8005b78 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001c6a:	213c      	movs	r1, #60	; 0x3c
 8001c6c:	4877      	ldr	r0, [pc, #476]	; (8001e4c <main+0x234>)
 8001c6e:	f003 ff83 	bl	8005b78 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001c72:	213c      	movs	r1, #60	; 0x3c
 8001c74:	4876      	ldr	r0, [pc, #472]	; (8001e50 <main+0x238>)
 8001c76:	f003 ff7f 	bl	8005b78 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001c7a:	213c      	movs	r1, #60	; 0x3c
 8001c7c:	4875      	ldr	r0, [pc, #468]	; (8001e54 <main+0x23c>)
 8001c7e:	f003 ff7b 	bl	8005b78 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001c82:	213c      	movs	r1, #60	; 0x3c
 8001c84:	4874      	ldr	r0, [pc, #464]	; (8001e58 <main+0x240>)
 8001c86:	f003 ff77 	bl	8005b78 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001c8a:	213c      	movs	r1, #60	; 0x3c
 8001c8c:	4873      	ldr	r0, [pc, #460]	; (8001e5c <main+0x244>)
 8001c8e:	f003 ff73 	bl	8005b78 <HAL_TIM_Encoder_Start>

  //Init Motor
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001c92:	2100      	movs	r1, #0
 8001c94:	4872      	ldr	r0, [pc, #456]	; (8001e60 <main+0x248>)
 8001c96:	f003 fe01 	bl	800589c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4871      	ldr	r0, [pc, #452]	; (8001e64 <main+0x24c>)
 8001c9e:	f003 fdfd 	bl	800589c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4870      	ldr	r0, [pc, #448]	; (8001e68 <main+0x250>)
 8001ca6:	f003 fdf9 	bl	800589c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8001caa:	2104      	movs	r1, #4
 8001cac:	486e      	ldr	r0, [pc, #440]	; (8001e68 <main+0x250>)
 8001cae:	f003 fdf5 	bl	800589c <HAL_TIM_PWM_Start>



  //Init Master slave
  HAL_UART_Receive_IT(&huart1, &rx_temp, 1);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	496d      	ldr	r1, [pc, #436]	; (8001e6c <main+0x254>)
 8001cb6:	486e      	ldr	r0, [pc, #440]	; (8001e70 <main+0x258>)
 8001cb8:	f004 fe08 	bl	80068cc <HAL_UART_Receive_IT>


  // Inint Gyro
//  HAL_UART_Receive_IT(&huart2, &uart2_rxData, 1);
  init_gyro(&huart2);
 8001cbc:	486d      	ldr	r0, [pc, #436]	; (8001e74 <main+0x25c>)
 8001cbe:	f7ff fa2f 	bl	8001120 <init_gyro>

  //Start Interrupt
  HAL_TIM_Base_Start_IT(&htim6);
 8001cc2:	486d      	ldr	r0, [pc, #436]	; (8001e78 <main+0x260>)
 8001cc4:	f003 fd2a 	bl	800571c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001cc8:	486c      	ldr	r0, [pc, #432]	; (8001e7c <main+0x264>)
 8001cca:	f003 fd27 	bl	800571c <HAL_TIM_Base_Start_IT>

  lcd_init(16, 4);
 8001cce:	2104      	movs	r1, #4
 8001cd0:	2010      	movs	r0, #16
 8001cd2:	f7ff fb71 	bl	80013b8 <lcd_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  lcd_print(0, 0, "hai");
	  sprintf(lcd, "X=%.2f", RoboPose_Global[0]);
 8001cd6:	4b6a      	ldr	r3, [pc, #424]	; (8001e80 <main+0x268>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc34 	bl	8000548 <__aeabi_f2d>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4967      	ldr	r1, [pc, #412]	; (8001e84 <main+0x26c>)
 8001ce6:	4868      	ldr	r0, [pc, #416]	; (8001e88 <main+0x270>)
 8001ce8:	f006 fc2a 	bl	8008540 <siprintf>
	  lcd_print(0, 0, lcd);
 8001cec:	4a66      	ldr	r2, [pc, #408]	; (8001e88 <main+0x270>)
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7ff fd75 	bl	80017e0 <lcd_print>
	  sprintf(lcd, "Y=%.2f", RoboPose_Global[1]);
 8001cf6:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <main+0x268>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fc24 	bl	8000548 <__aeabi_f2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4961      	ldr	r1, [pc, #388]	; (8001e8c <main+0x274>)
 8001d06:	4860      	ldr	r0, [pc, #384]	; (8001e88 <main+0x270>)
 8001d08:	f006 fc1a 	bl	8008540 <siprintf>
	  lcd_print(8, 0, lcd);
 8001d0c:	4a5e      	ldr	r2, [pc, #376]	; (8001e88 <main+0x270>)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	2008      	movs	r0, #8
 8001d12:	f7ff fd65 	bl	80017e0 <lcd_print>
//	  sprintf(lcd, "G=%.2f", RoboPose_Global[2]);
	  sprintf(lcd, "G=%.2f || %d", RoboPose_Global[2],GyroReady);
 8001d16:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <main+0x268>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc14 	bl	8000548 <__aeabi_f2d>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	495a      	ldr	r1, [pc, #360]	; (8001e90 <main+0x278>)
 8001d26:	7809      	ldrb	r1, [r1, #0]
 8001d28:	9100      	str	r1, [sp, #0]
 8001d2a:	495a      	ldr	r1, [pc, #360]	; (8001e94 <main+0x27c>)
 8001d2c:	4856      	ldr	r0, [pc, #344]	; (8001e88 <main+0x270>)
 8001d2e:	f006 fc07 	bl	8008540 <siprintf>
	  lcd_print(0, 1, lcd);
 8001d32:	4a55      	ldr	r2, [pc, #340]	; (8001e88 <main+0x270>)
 8001d34:	2101      	movs	r1, #1
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff fd52 	bl	80017e0 <lcd_print>
	  sprintf(lcd, "x=%.2f", RobotSpeed[0]);
 8001d3c:	4b56      	ldr	r3, [pc, #344]	; (8001e98 <main+0x280>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fc01 	bl	8000548 <__aeabi_f2d>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4954      	ldr	r1, [pc, #336]	; (8001e9c <main+0x284>)
 8001d4c:	484e      	ldr	r0, [pc, #312]	; (8001e88 <main+0x270>)
 8001d4e:	f006 fbf7 	bl	8008540 <siprintf>
	  lcd_print(0, 2, lcd);
 8001d52:	4a4d      	ldr	r2, [pc, #308]	; (8001e88 <main+0x270>)
 8001d54:	2102      	movs	r1, #2
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff fd42 	bl	80017e0 <lcd_print>
	  sprintf(lcd, "y=%.2f", RobotSpeed[1]);
 8001d5c:	4b4e      	ldr	r3, [pc, #312]	; (8001e98 <main+0x280>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fbf1 	bl	8000548 <__aeabi_f2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	494d      	ldr	r1, [pc, #308]	; (8001ea0 <main+0x288>)
 8001d6c:	4846      	ldr	r0, [pc, #280]	; (8001e88 <main+0x270>)
 8001d6e:	f006 fbe7 	bl	8008540 <siprintf>
	  lcd_print(8, 2, lcd);
 8001d72:	4a45      	ldr	r2, [pc, #276]	; (8001e88 <main+0x270>)
 8001d74:	2102      	movs	r1, #2
 8001d76:	2008      	movs	r0, #8
 8001d78:	f7ff fd32 	bl	80017e0 <lcd_print>
	  sprintf(lcd, "w=%.2f", RobotSpeed[2]);
 8001d7c:	4b46      	ldr	r3, [pc, #280]	; (8001e98 <main+0x280>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fbe1 	bl	8000548 <__aeabi_f2d>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4946      	ldr	r1, [pc, #280]	; (8001ea4 <main+0x28c>)
 8001d8c:	483e      	ldr	r0, [pc, #248]	; (8001e88 <main+0x270>)
 8001d8e:	f006 fbd7 	bl	8008540 <siprintf>
	  lcd_print(0, 3, lcd);
 8001d92:	4a3d      	ldr	r2, [pc, #244]	; (8001e88 <main+0x270>)
 8001d94:	2103      	movs	r1, #3
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7ff fd22 	bl	80017e0 <lcd_print>
	  sprintf(lcd, "%c", rx_buff[0]);
 8001d9c:	4b42      	ldr	r3, [pc, #264]	; (8001ea8 <main+0x290>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4942      	ldr	r1, [pc, #264]	; (8001eac <main+0x294>)
 8001da4:	4838      	ldr	r0, [pc, #224]	; (8001e88 <main+0x270>)
 8001da6:	f006 fbcb 	bl	8008540 <siprintf>
	  lcd_print(8, 3, lcd);
 8001daa:	4a37      	ldr	r2, [pc, #220]	; (8001e88 <main+0x270>)
 8001dac:	2103      	movs	r1, #3
 8001dae:	2008      	movs	r0, #8
 8001db0:	f7ff fd16 	bl	80017e0 <lcd_print>
	  sprintf(lcd, "%c", rx_buff[1]);
 8001db4:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <main+0x290>)
 8001db6:	785b      	ldrb	r3, [r3, #1]
 8001db8:	461a      	mov	r2, r3
 8001dba:	493c      	ldr	r1, [pc, #240]	; (8001eac <main+0x294>)
 8001dbc:	4832      	ldr	r0, [pc, #200]	; (8001e88 <main+0x270>)
 8001dbe:	f006 fbbf 	bl	8008540 <siprintf>
	  lcd_print(9, 3, lcd);
 8001dc2:	4a31      	ldr	r2, [pc, #196]	; (8001e88 <main+0x270>)
 8001dc4:	2103      	movs	r1, #3
 8001dc6:	2009      	movs	r0, #9
 8001dc8:	f7ff fd0a 	bl	80017e0 <lcd_print>
	  sprintf(lcd, "%c", rx_buff[2]);
 8001dcc:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <main+0x290>)
 8001dce:	789b      	ldrb	r3, [r3, #2]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4936      	ldr	r1, [pc, #216]	; (8001eac <main+0x294>)
 8001dd4:	482c      	ldr	r0, [pc, #176]	; (8001e88 <main+0x270>)
 8001dd6:	f006 fbb3 	bl	8008540 <siprintf>
	  lcd_print(10, 3, lcd);
 8001dda:	4a2b      	ldr	r2, [pc, #172]	; (8001e88 <main+0x270>)
 8001ddc:	2103      	movs	r1, #3
 8001dde:	200a      	movs	r0, #10
 8001de0:	f7ff fcfe 	bl	80017e0 <lcd_print>
//	  sprintf(lcd, "%.3d", (HAL_GetTick() - time_stamp)/1000);
//	  lcd_print(11, 3, lcd);
	  diff_stamp = HAL_GetTick() - time_stamp;
 8001de4:	f002 f8b8 	bl	8003f58 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <main+0x298>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	4a30      	ldr	r2, [pc, #192]	; (8001eb4 <main+0x29c>)
 8001df2:	6013      	str	r3, [r2, #0]


	  if(HAL_GetTick() - time_stamp >= 100){
 8001df4:	f002 f8b0 	bl	8003f58 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <main+0x298>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b63      	cmp	r3, #99	; 0x63
 8001e02:	d90d      	bls.n	8001e20 <main+0x208>
		lcd_print(11, 3, " pts");
 8001e04:	4a2c      	ldr	r2, [pc, #176]	; (8001eb8 <main+0x2a0>)
 8001e06:	2103      	movs	r1, #3
 8001e08:	200b      	movs	r0, #11
 8001e0a:	f7ff fce9 	bl	80017e0 <lcd_print>
//		lcd_clear();
		rx_state = 0;
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <main+0x2a4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rx_temp, 1);
 8001e14:	2201      	movs	r2, #1
 8001e16:	4915      	ldr	r1, [pc, #84]	; (8001e6c <main+0x254>)
 8001e18:	4815      	ldr	r0, [pc, #84]	; (8001e70 <main+0x258>)
 8001e1a:	f004 fd57 	bl	80068cc <HAL_UART_Receive_IT>
 8001e1e:	e004      	b.n	8001e2a <main+0x212>
	  }
	  else{
		  lcd_print(11, 3, "     ");
 8001e20:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <main+0x2a8>)
 8001e22:	2103      	movs	r1, #3
 8001e24:	200b      	movs	r0, #11
 8001e26:	f7ff fcdb 	bl	80017e0 <lcd_print>
	  }


	  if(HAL_GetTick() - tick_gyro > 100)
 8001e2a:	f002 f895 	bl	8003f58 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <main+0x2ac>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d902      	bls.n	8001e40 <main+0x228>
	  {
		  init_gyro(&huart2);
 8001e3a:	480e      	ldr	r0, [pc, #56]	; (8001e74 <main+0x25c>)
 8001e3c:	f7ff f970 	bl	8001120 <init_gyro>
//			  HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, GPIO_PIN_SET);
//			  HAL_Delay(50);
//		  }
//	  }

	  HAL_Delay(1);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f002 f895 	bl	8003f70 <HAL_Delay>
	  sprintf(lcd, "X=%.2f", RoboPose_Global[0]);
 8001e46:	e746      	b.n	8001cd6 <main+0xbe>
 8001e48:	200003c8 	.word	0x200003c8
 8001e4c:	20000410 	.word	0x20000410
 8001e50:	20000458 	.word	0x20000458
 8001e54:	200004a0 	.word	0x200004a0
 8001e58:	200004e8 	.word	0x200004e8
 8001e5c:	200005c0 	.word	0x200005c0
 8001e60:	20000608 	.word	0x20000608
 8001e64:	20000650 	.word	0x20000650
 8001e68:	20000698 	.word	0x20000698
 8001e6c:	20000279 	.word	0x20000279
 8001e70:	200006e0 	.word	0x200006e0
 8001e74:	20000724 	.word	0x20000724
 8001e78:	20000530 	.word	0x20000530
 8001e7c:	20000578 	.word	0x20000578
 8001e80:	200002c4 	.word	0x200002c4
 8001e84:	0800b570 	.word	0x0800b570
 8001e88:	20000304 	.word	0x20000304
 8001e8c:	0800b578 	.word	0x0800b578
 8001e90:	200002b8 	.word	0x200002b8
 8001e94:	0800b580 	.word	0x0800b580
 8001e98:	200003b8 	.word	0x200003b8
 8001e9c:	0800b590 	.word	0x0800b590
 8001ea0:	0800b598 	.word	0x0800b598
 8001ea4:	0800b5a0 	.word	0x0800b5a0
 8001ea8:	2000027c 	.word	0x2000027c
 8001eac:	0800b5a8 	.word	0x0800b5a8
 8001eb0:	200002f8 	.word	0x200002f8
 8001eb4:	200002fc 	.word	0x200002fc
 8001eb8:	0800b5ac 	.word	0x0800b5ac
 8001ebc:	20000278 	.word	0x20000278
 8001ec0:	0800b5b4 	.word	0x0800b5b4
 8001ec4:	20000268 	.word	0x20000268

08001ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b094      	sub	sp, #80	; 0x50
 8001ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ece:	f107 0320 	add.w	r3, r7, #32
 8001ed2:	2230      	movs	r2, #48	; 0x30
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f005 fec0 	bl	8007c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <SystemClock_Config+0xcc>)
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <SystemClock_Config+0xcc>)
 8001ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6413      	str	r3, [r2, #64]	; 0x40
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <SystemClock_Config+0xcc>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <SystemClock_Config+0xd0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a21      	ldr	r2, [pc, #132]	; (8001f98 <SystemClock_Config+0xd0>)
 8001f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <SystemClock_Config+0xd0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f24:	2301      	movs	r3, #1
 8001f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f38:	2304      	movs	r3, #4
 8001f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f3c:	23a8      	movs	r3, #168	; 0xa8
 8001f3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f40:	2302      	movs	r3, #2
 8001f42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f44:	2304      	movs	r3, #4
 8001f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f48:	f107 0320 	add.w	r3, r7, #32
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 fefd 	bl	8004d4c <HAL_RCC_OscConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f58:	f000 fb98 	bl	800268c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f5c:	230f      	movs	r3, #15
 8001f5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f60:	2302      	movs	r3, #2
 8001f62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f74:	f107 030c 	add.w	r3, r7, #12
 8001f78:	2105      	movs	r1, #5
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 f95e 	bl	800523c <HAL_RCC_ClockConfig>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f86:	f000 fb81 	bl	800268c <Error_Handler>
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	3750      	adds	r7, #80	; 0x50
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000

08001f9c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	// Master-slave
	if(huart->Instance == USART1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a72      	ldr	r2, [pc, #456]	; (8002174 <HAL_UART_RxCpltCallback+0x1d8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	f040 8085 	bne.w	80020ba <HAL_UART_RxCpltCallback+0x11e>
	{
		if(rx_temp == 'i' && rx_state == 0)
 8001fb0:	4b71      	ldr	r3, [pc, #452]	; (8002178 <HAL_UART_RxCpltCallback+0x1dc>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b69      	cmp	r3, #105	; 0x69
 8001fb6:	d110      	bne.n	8001fda <HAL_UART_RxCpltCallback+0x3e>
 8001fb8:	4b70      	ldr	r3, [pc, #448]	; (800217c <HAL_UART_RxCpltCallback+0x1e0>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10c      	bne.n	8001fda <HAL_UART_RxCpltCallback+0x3e>
		{
			rx_state = 1;
 8001fc0:	4b6e      	ldr	r3, [pc, #440]	; (800217c <HAL_UART_RxCpltCallback+0x1e0>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
			rx_buff[0] = rx_temp;
 8001fc6:	4b6c      	ldr	r3, [pc, #432]	; (8002178 <HAL_UART_RxCpltCallback+0x1dc>)
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	4b6d      	ldr	r3, [pc, #436]	; (8002180 <HAL_UART_RxCpltCallback+0x1e4>)
 8001fcc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, &rx_temp, 1);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4969      	ldr	r1, [pc, #420]	; (8002178 <HAL_UART_RxCpltCallback+0x1dc>)
 8001fd2:	486c      	ldr	r0, [pc, #432]	; (8002184 <HAL_UART_RxCpltCallback+0x1e8>)
 8001fd4:	f004 fc7a 	bl	80068cc <HAL_UART_Receive_IT>
 8001fd8:	e0c7      	b.n	800216a <HAL_UART_RxCpltCallback+0x1ce>
		}
		else if(rx_temp == 't' && rx_state == 1)
 8001fda:	4b67      	ldr	r3, [pc, #412]	; (8002178 <HAL_UART_RxCpltCallback+0x1dc>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b74      	cmp	r3, #116	; 0x74
 8001fe0:	d110      	bne.n	8002004 <HAL_UART_RxCpltCallback+0x68>
 8001fe2:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_UART_RxCpltCallback+0x1e0>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10c      	bne.n	8002004 <HAL_UART_RxCpltCallback+0x68>
		{
			rx_state = 2;
 8001fea:	4b64      	ldr	r3, [pc, #400]	; (800217c <HAL_UART_RxCpltCallback+0x1e0>)
 8001fec:	2202      	movs	r2, #2
 8001fee:	701a      	strb	r2, [r3, #0]
			rx_buff[1] = rx_temp;
 8001ff0:	4b61      	ldr	r3, [pc, #388]	; (8002178 <HAL_UART_RxCpltCallback+0x1dc>)
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	4b62      	ldr	r3, [pc, #392]	; (8002180 <HAL_UART_RxCpltCallback+0x1e4>)
 8001ff6:	705a      	strb	r2, [r3, #1]
			HAL_UART_Receive_IT(&huart1, &rx_temp, 1);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	495f      	ldr	r1, [pc, #380]	; (8002178 <HAL_UART_RxCpltCallback+0x1dc>)
 8001ffc:	4861      	ldr	r0, [pc, #388]	; (8002184 <HAL_UART_RxCpltCallback+0x1e8>)
 8001ffe:	f004 fc65 	bl	80068cc <HAL_UART_Receive_IT>
 8002002:	e0b2      	b.n	800216a <HAL_UART_RxCpltCallback+0x1ce>
		}
		else if(rx_temp == 's' && rx_state == 2)
 8002004:	4b5c      	ldr	r3, [pc, #368]	; (8002178 <HAL_UART_RxCpltCallback+0x1dc>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b73      	cmp	r3, #115	; 0x73
 800200a:	d111      	bne.n	8002030 <HAL_UART_RxCpltCallback+0x94>
 800200c:	4b5b      	ldr	r3, [pc, #364]	; (800217c <HAL_UART_RxCpltCallback+0x1e0>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d10d      	bne.n	8002030 <HAL_UART_RxCpltCallback+0x94>
		{
			rx_state = 3;
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <HAL_UART_RxCpltCallback+0x1e0>)
 8002016:	2203      	movs	r2, #3
 8002018:	701a      	strb	r2, [r3, #0]
			rx_buff[2] = rx_temp;
 800201a:	4b57      	ldr	r3, [pc, #348]	; (8002178 <HAL_UART_RxCpltCallback+0x1dc>)
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	4b58      	ldr	r3, [pc, #352]	; (8002180 <HAL_UART_RxCpltCallback+0x1e4>)
 8002020:	709a      	strb	r2, [r3, #2]
			HAL_UART_Receive_IT(&huart1, rx_buff+3, 29);
 8002022:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_UART_RxCpltCallback+0x1ec>)
 8002024:	221d      	movs	r2, #29
 8002026:	4619      	mov	r1, r3
 8002028:	4856      	ldr	r0, [pc, #344]	; (8002184 <HAL_UART_RxCpltCallback+0x1e8>)
 800202a:	f004 fc4f 	bl	80068cc <HAL_UART_Receive_IT>
 800202e:	e09c      	b.n	800216a <HAL_UART_RxCpltCallback+0x1ce>
		}
		else if(rx_state == 3)
 8002030:	4b52      	ldr	r3, [pc, #328]	; (800217c <HAL_UART_RxCpltCallback+0x1e0>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d137      	bne.n	80020a8 <HAL_UART_RxCpltCallback+0x10c>
		{
			uint16_t check_s=0;
 8002038:	2300      	movs	r3, #0
 800203a:	82fb      	strh	r3, [r7, #22]
			for(int i=3;i<30;i++)
 800203c:	2303      	movs	r3, #3
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	e00a      	b.n	8002058 <HAL_UART_RxCpltCallback+0xbc>
			{
				check_s += rx_buff[i];
 8002042:	4a4f      	ldr	r2, [pc, #316]	; (8002180 <HAL_UART_RxCpltCallback+0x1e4>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b29a      	uxth	r2, r3
 800204c:	8afb      	ldrh	r3, [r7, #22]
 800204e:	4413      	add	r3, r2
 8002050:	82fb      	strh	r3, [r7, #22]
			for(int i=3;i<30;i++)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	3301      	adds	r3, #1
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b1d      	cmp	r3, #29
 800205c:	ddf1      	ble.n	8002042 <HAL_UART_RxCpltCallback+0xa6>
			}
			check_s = ~check_s;
 800205e:	8afb      	ldrh	r3, [r7, #22]
 8002060:	43db      	mvns	r3, r3
 8002062:	82fb      	strh	r3, [r7, #22]

			uint16_t check_recv;
			memcpy(&check_recv,rx_buff+30,2);
 8002064:	4b49      	ldr	r3, [pc, #292]	; (800218c <HAL_UART_RxCpltCallback+0x1f0>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	81fb      	strh	r3, [r7, #14]

			if(check_recv == check_s)
 800206c:	89fb      	ldrh	r3, [r7, #14]
 800206e:	8afa      	ldrh	r2, [r7, #22]
 8002070:	429a      	cmp	r2, r3
 8002072:	d110      	bne.n	8002096 <HAL_UART_RxCpltCallback+0xfa>
			{
				time_stamp = HAL_GetTick();
 8002074:	f001 ff70 	bl	8003f58 <HAL_GetTick>
 8002078:	4603      	mov	r3, r0
 800207a:	4a45      	ldr	r2, [pc, #276]	; (8002190 <HAL_UART_RxCpltCallback+0x1f4>)
 800207c:	6013      	str	r3, [r2, #0]
//				memcpy(&count, rx_buff+15, sizeof(count));
				MasterState =1;
 800207e:	4b45      	ldr	r3, [pc, #276]	; (8002194 <HAL_UART_RxCpltCallback+0x1f8>)
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
				MasterTimeout=0;
 8002084:	4b44      	ldr	r3, [pc, #272]	; (8002198 <HAL_UART_RxCpltCallback+0x1fc>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
				memcpy(RobotSpeed,rx_buff+3,12);
 800208a:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <HAL_UART_RxCpltCallback+0x1ec>)
 800208c:	220c      	movs	r2, #12
 800208e:	4619      	mov	r1, r3
 8002090:	4842      	ldr	r0, [pc, #264]	; (800219c <HAL_UART_RxCpltCallback+0x200>)
 8002092:	f005 fdd5 	bl	8007c40 <memcpy>

			}

			rx_state = 0;
 8002096:	4b39      	ldr	r3, [pc, #228]	; (800217c <HAL_UART_RxCpltCallback+0x1e0>)
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, &rx_temp, 1);
 800209c:	2201      	movs	r2, #1
 800209e:	4936      	ldr	r1, [pc, #216]	; (8002178 <HAL_UART_RxCpltCallback+0x1dc>)
 80020a0:	4838      	ldr	r0, [pc, #224]	; (8002184 <HAL_UART_RxCpltCallback+0x1e8>)
 80020a2:	f004 fc13 	bl	80068cc <HAL_UART_Receive_IT>
//		}
//	}



}
 80020a6:	e060      	b.n	800216a <HAL_UART_RxCpltCallback+0x1ce>
			rx_state = 0;
 80020a8:	4b34      	ldr	r3, [pc, #208]	; (800217c <HAL_UART_RxCpltCallback+0x1e0>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, &rx_temp, 1);
 80020ae:	2201      	movs	r2, #1
 80020b0:	4931      	ldr	r1, [pc, #196]	; (8002178 <HAL_UART_RxCpltCallback+0x1dc>)
 80020b2:	4834      	ldr	r0, [pc, #208]	; (8002184 <HAL_UART_RxCpltCallback+0x1e8>)
 80020b4:	f004 fc0a 	bl	80068cc <HAL_UART_Receive_IT>
}
 80020b8:	e057      	b.n	800216a <HAL_UART_RxCpltCallback+0x1ce>
	else if(huart->Instance ==  USART2)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a38      	ldr	r2, [pc, #224]	; (80021a0 <HAL_UART_RxCpltCallback+0x204>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d152      	bne.n	800216a <HAL_UART_RxCpltCallback+0x1ce>
		gyroUART_handler(&huart2);
 80020c4:	4837      	ldr	r0, [pc, #220]	; (80021a4 <HAL_UART_RxCpltCallback+0x208>)
 80020c6:	f7ff f843 	bl	8001150 <gyroUART_handler>
		GyroYaw = gyroRaw - offest_gyro;
 80020ca:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <HAL_UART_RxCpltCallback+0x20c>)
 80020cc:	ed93 7a00 	vldr	s14, [r3]
 80020d0:	4b36      	ldr	r3, [pc, #216]	; (80021ac <HAL_UART_RxCpltCallback+0x210>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020da:	4b35      	ldr	r3, [pc, #212]	; (80021b0 <HAL_UART_RxCpltCallback+0x214>)
 80020dc:	edc3 7a00 	vstr	s15, [r3]
		if(GyroYaw > 0 || GyroYaw <0){
 80020e0:	4b33      	ldr	r3, [pc, #204]	; (80021b0 <HAL_UART_RxCpltCallback+0x214>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	dc07      	bgt.n	8002100 <HAL_UART_RxCpltCallback+0x164>
 80020f0:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <HAL_UART_RxCpltCallback+0x214>)
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fe:	d502      	bpl.n	8002106 <HAL_UART_RxCpltCallback+0x16a>
			GyroReady = 1;
 8002100:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <HAL_UART_RxCpltCallback+0x218>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
		if(GyroYaw > 180)
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <HAL_UART_RxCpltCallback+0x214>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80021b8 <HAL_UART_RxCpltCallback+0x21c>
 8002110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002118:	dd0a      	ble.n	8002130 <HAL_UART_RxCpltCallback+0x194>
			GyroYaw -= 360;
 800211a:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <HAL_UART_RxCpltCallback+0x214>)
 800211c:	edd3 7a00 	vldr	s15, [r3]
 8002120:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80021bc <HAL_UART_RxCpltCallback+0x220>
 8002124:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_UART_RxCpltCallback+0x214>)
 800212a:	edc3 7a00 	vstr	s15, [r3]
 800212e:	e013      	b.n	8002158 <HAL_UART_RxCpltCallback+0x1bc>
		else if(GyroYaw < -180)
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <HAL_UART_RxCpltCallback+0x214>)
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80021c0 <HAL_UART_RxCpltCallback+0x224>
 800213a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002142:	d509      	bpl.n	8002158 <HAL_UART_RxCpltCallback+0x1bc>
			GyroYaw += 360;
 8002144:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <HAL_UART_RxCpltCallback+0x214>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80021bc <HAL_UART_RxCpltCallback+0x220>
 800214e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002152:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_UART_RxCpltCallback+0x214>)
 8002154:	edc3 7a00 	vstr	s15, [r3]
		if(statusGyroo < 4)
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_UART_RxCpltCallback+0x228>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b03      	cmp	r3, #3
 800215e:	dc04      	bgt.n	800216a <HAL_UART_RxCpltCallback+0x1ce>
			offest_gyro = gyroRaw;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_UART_RxCpltCallback+0x20c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a11      	ldr	r2, [pc, #68]	; (80021ac <HAL_UART_RxCpltCallback+0x210>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	e7ff      	b.n	800216a <HAL_UART_RxCpltCallback+0x1ce>
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40011000 	.word	0x40011000
 8002178:	20000279 	.word	0x20000279
 800217c:	20000278 	.word	0x20000278
 8002180:	2000027c 	.word	0x2000027c
 8002184:	200006e0 	.word	0x200006e0
 8002188:	2000027f 	.word	0x2000027f
 800218c:	2000029a 	.word	0x2000029a
 8002190:	200002f8 	.word	0x200002f8
 8002194:	2000029c 	.word	0x2000029c
 8002198:	200002a0 	.word	0x200002a0
 800219c:	200003b8 	.word	0x200003b8
 80021a0:	40004400 	.word	0x40004400
 80021a4:	20000724 	.word	0x20000724
 80021a8:	20000260 	.word	0x20000260
 80021ac:	200002b4 	.word	0x200002b4
 80021b0:	200002b0 	.word	0x200002b0
 80021b4:	200002b8 	.word	0x200002b8
 80021b8:	43340000 	.word	0x43340000
 80021bc:	43b40000 	.word	0x43b40000
 80021c0:	c3340000 	.word	0xc3340000
 80021c4:	20000264 	.word	0x20000264

080021c8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	ed2d 8b02 	vpush	{d8}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

	// Timer 50 hz
	if(htim->Instance == TIM6)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a55      	ldr	r2, [pc, #340]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	f040 80c2 	bne.w	8002364 <HAL_TIM_PeriodElapsedCallback+0x19c>
	{

		  WheelSpeed_ENC[0] = __HAL_TIM_GET_COUNTER(&htim1);
 80021e0:	4b54      	ldr	r3, [pc, #336]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	4b53      	ldr	r3, [pc, #332]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80021ea:	801a      	strh	r2, [r3, #0]
		  WheelSpeed_ENC[1] = __HAL_TIM_GET_COUNTER(&htim2);
 80021ec:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	4b50      	ldr	r3, [pc, #320]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80021f6:	805a      	strh	r2, [r3, #2]
		  WheelSpeed_ENC[2] = __HAL_TIM_GET_COUNTER(&htim3);
 80021f8:	4b51      	ldr	r3, [pc, #324]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	b21a      	sxth	r2, r3
 8002200:	4b4d      	ldr	r3, [pc, #308]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002202:	809a      	strh	r2, [r3, #4]
		  WheelSpeed_ENC[3] = __HAL_TIM_GET_COUNTER(&htim4);
 8002204:	4b4f      	ldr	r3, [pc, #316]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	b21a      	sxth	r2, r3
 800220c:	4b4a      	ldr	r3, [pc, #296]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800220e:	80da      	strh	r2, [r3, #6]

		  for( int i = 0; i<4; i++)
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	e039      	b.n	800228a <HAL_TIM_PeriodElapsedCallback+0xc2>
		  {
			  WheelSpeed_SI[i] = ((float)WheelSpeed_ENC[i] / 532.0) * M_PI * 2.0 * 50.0;
 8002216:	4a48      	ldr	r2, [pc, #288]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002226:	ee17 0a90 	vmov	r0, s15
 800222a:	f7fe f98d 	bl	8000548 <__aeabi_f2d>
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	4b45      	ldr	r3, [pc, #276]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002234:	f7fe fb0a 	bl	800084c <__aeabi_ddiv>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	a339      	add	r3, pc, #228	; (adr r3, 8002328 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	f7fe f9d7 	bl	80005f8 <__aeabi_dmul>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4610      	mov	r0, r2
 8002250:	4619      	mov	r1, r3
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	f7fe f819 	bl	800028c <__adddf3>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002268:	f7fe f9c6 	bl	80005f8 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fc98 	bl	8000ba8 <__aeabi_d2f>
 8002278:	4602      	mov	r2, r0
 800227a:	4935      	ldr	r1, [pc, #212]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	601a      	str	r2, [r3, #0]
		  for( int i = 0; i<4; i++)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3301      	adds	r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b03      	cmp	r3, #3
 800228e:	ddc2      	ble.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x4e>
		  }
		   __HAL_TIM_GET_COUNTER(&htim1) = 0;
 8002290:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2200      	movs	r2, #0
 8002296:	625a      	str	r2, [r3, #36]	; 0x24
		   __HAL_TIM_GET_COUNTER(&htim2) = 0;
 8002298:	4b28      	ldr	r3, [pc, #160]	; (800233c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2200      	movs	r2, #0
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
		   __HAL_TIM_GET_COUNTER(&htim3) = 0;
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2200      	movs	r2, #0
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24
		   __HAL_TIM_GET_COUNTER(&htim4) = 0;
 80022a8:	4b26      	ldr	r3, [pc, #152]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2200      	movs	r2, #0
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

		omniKine(RobotSpeed[0], RobotSpeed[1], RobotSpeed[2]);
 80022b0:	4b28      	ldr	r3, [pc, #160]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	4b27      	ldr	r3, [pc, #156]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80022b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80022be:	edd3 6a02 	vldr	s13, [r3, #8]
 80022c2:	eeb0 1a66 	vmov.f32	s2, s13
 80022c6:	eef0 0a47 	vmov.f32	s1, s14
 80022ca:	eeb0 0a67 	vmov.f32	s0, s15
 80022ce:	f000 fb23 	bl	8002918 <omniKine>

		if(MasterState == 1)
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d110      	bne.n	80022fc <HAL_TIM_PeriodElapsedCallback+0x134>
		{
			MotorSetSpeed(WheelSpeed_SP);
 80022da:	4820      	ldr	r0, [pc, #128]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80022dc:	f000 f9dc 	bl	8002698 <MotorSetSpeed>

			if(++MasterTimeout > 50)
 80022e0:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	4a1e      	ldr	r2, [pc, #120]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b32      	cmp	r3, #50	; 0x32
 80022f0:	f240 81a0 	bls.w	8002634 <HAL_TIM_PeriodElapsedCallback+0x46c>
				MasterState = 0;
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]


	}


}
 80022fa:	e19b      	b.n	8002634 <HAL_TIM_PeriodElapsedCallback+0x46c>
			WheelSpeed_SP[0] = 0;
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
			WheelSpeed_SP[1] = 0;
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
			WheelSpeed_SP[2] = 0;
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
			WheelSpeed_SP[3] = 0;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	60da      	str	r2, [r3, #12]
			MotorSetSpeed(WheelSpeed_SP);
 800231c:	480f      	ldr	r0, [pc, #60]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800231e:	f000 f9bb 	bl	8002698 <MotorSetSpeed>
}
 8002322:	e187      	b.n	8002634 <HAL_TIM_PeriodElapsedCallback+0x46c>
 8002324:	f3af 8000 	nop.w
 8002328:	54442d18 	.word	0x54442d18
 800232c:	400921fb 	.word	0x400921fb
 8002330:	40001000 	.word	0x40001000
 8002334:	200003c8 	.word	0x200003c8
 8002338:	200002a8 	.word	0x200002a8
 800233c:	20000410 	.word	0x20000410
 8002340:	20000458 	.word	0x20000458
 8002344:	200004a0 	.word	0x200004a0
 8002348:	4080a000 	.word	0x4080a000
 800234c:	40490000 	.word	0x40490000
 8002350:	20000348 	.word	0x20000348
 8002354:	200003b8 	.word	0x200003b8
 8002358:	2000029c 	.word	0x2000029c
 800235c:	20000358 	.word	0x20000358
 8002360:	200002a0 	.word	0x200002a0
	else if(htim->Instance == TIM7)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4abb      	ldr	r2, [pc, #748]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x490>)
 800236a:	4293      	cmp	r3, r2
 800236c:	f040 8162 	bne.w	8002634 <HAL_TIM_PeriodElapsedCallback+0x46c>
		if(++time_send>10)
 8002370:	4bba      	ldr	r3, [pc, #744]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x494>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3301      	adds	r3, #1
 8002376:	4ab9      	ldr	r2, [pc, #740]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x494>)
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4bb8      	ldr	r3, [pc, #736]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x494>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b0a      	cmp	r3, #10
 8002380:	d904      	bls.n	800238c <HAL_TIM_PeriodElapsedCallback+0x1c4>
			Slave_Kirim();
 8002382:	f7ff fbed 	bl	8001b60 <Slave_Kirim>
			time_send = 0;
 8002386:	4bb5      	ldr	r3, [pc, #724]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x494>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
		RotEnc[0] = __HAL_TIM_GET_COUNTER(&htim5);
 800238c:	4bb4      	ldr	r3, [pc, #720]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	b21a      	sxth	r2, r3
 8002394:	4bb3      	ldr	r3, [pc, #716]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8002396:	801a      	strh	r2, [r3, #0]
		RotEnc[1] = __HAL_TIM_GET_COUNTER(&htim8);
 8002398:	4bb3      	ldr	r3, [pc, #716]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	b21a      	sxth	r2, r3
 80023a0:	4bb0      	ldr	r3, [pc, #704]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80023a2:	805a      	strh	r2, [r3, #2]
		enc_sum[0] += RotEnc[0];
 80023a4:	4bb1      	ldr	r3, [pc, #708]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80023a6:	881a      	ldrh	r2, [r3, #0]
 80023a8:	4bae      	ldr	r3, [pc, #696]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80023aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	4bad      	ldr	r3, [pc, #692]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80023b6:	801a      	strh	r2, [r3, #0]
		enc_sum[1] += RotEnc[1];
 80023b8:	4bac      	ldr	r3, [pc, #688]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80023ba:	885a      	ldrh	r2, [r3, #2]
 80023bc:	4ba9      	ldr	r3, [pc, #676]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80023be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4ba8      	ldr	r3, [pc, #672]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80023ca:	805a      	strh	r2, [r3, #2]
		EncRoll[0] = RotEnc[0] / 1440.0;
 80023cc:	4ba5      	ldr	r3, [pc, #660]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80023ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f8a6 	bl	8000524 <__aeabi_i2d>
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	4ba4      	ldr	r3, [pc, #656]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80023de:	f7fe fa35 	bl	800084c <__aeabi_ddiv>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	f7fe fbdd 	bl	8000ba8 <__aeabi_d2f>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4aa0      	ldr	r2, [pc, #640]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 80023f2:	6013      	str	r3, [r2, #0]
		EncRoll[1] = RotEnc[1] / 1440.0;
 80023f4:	4b9b      	ldr	r3, [pc, #620]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80023f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f892 	bl	8000524 <__aeabi_i2d>
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	4b9a      	ldr	r3, [pc, #616]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8002406:	f7fe fa21 	bl	800084c <__aeabi_ddiv>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	f7fe fbc9 	bl	8000ba8 <__aeabi_d2f>
 8002416:	4603      	mov	r3, r0
 8002418:	4a96      	ldr	r2, [pc, #600]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 800241a:	6053      	str	r3, [r2, #4]
		RoboTwist[0] = EncRoll[0] * 0.06 * M_PI;
 800241c:	4b95      	ldr	r3, [pc, #596]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f891 	bl	8000548 <__aeabi_f2d>
 8002426:	a386      	add	r3, pc, #536	; (adr r3, 8002640 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	f7fe f8e4 	bl	80005f8 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	a383      	add	r3, pc, #524	; (adr r3, 8002648 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	f7fe f8db 	bl	80005f8 <__aeabi_dmul>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	f7fe fbad 	bl	8000ba8 <__aeabi_d2f>
 800244e:	4603      	mov	r3, r0
 8002450:	4a89      	ldr	r2, [pc, #548]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8002452:	6013      	str	r3, [r2, #0]
		RoboTwist[1] = EncRoll[1] * 0.06 * M_PI;
 8002454:	4b87      	ldr	r3, [pc, #540]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f875 	bl	8000548 <__aeabi_f2d>
 800245e:	a378      	add	r3, pc, #480	; (adr r3, 8002640 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f7fe f8c8 	bl	80005f8 <__aeabi_dmul>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	a375      	add	r3, pc, #468	; (adr r3, 8002648 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	f7fe f8bf 	bl	80005f8 <__aeabi_dmul>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	f7fe fb91 	bl	8000ba8 <__aeabi_d2f>
 8002486:	4603      	mov	r3, r0
 8002488:	4a7b      	ldr	r2, [pc, #492]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 800248a:	6053      	str	r3, [r2, #4]
		RoboTwist_Global[0] = cosf(GyroYaw * 0.0174533) * RoboTwist[0]
 800248c:	4b7b      	ldr	r3, [pc, #492]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f859 	bl	8000548 <__aeabi_f2d>
 8002496:	a36e      	add	r3, pc, #440	; (adr r3, 8002650 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fe f8ac 	bl	80005f8 <__aeabi_dmul>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	f7fe fb7e 	bl	8000ba8 <__aeabi_d2f>
 80024ac:	4603      	mov	r3, r0
 80024ae:	ee00 3a10 	vmov	s0, r3
 80024b2:	f008 faaf 	bl	800aa14 <cosf>
 80024b6:	eeb0 7a40 	vmov.f32	s14, s0
 80024ba:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	ee27 8a27 	vmul.f32	s16, s14, s15
				- sinf(GyroYaw * 0.0174533) * RoboTwist[1];
 80024c4:	4b6d      	ldr	r3, [pc, #436]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe f83d 	bl	8000548 <__aeabi_f2d>
 80024ce:	a360      	add	r3, pc, #384	; (adr r3, 8002650 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	f7fe f890 	bl	80005f8 <__aeabi_dmul>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe fb62 	bl	8000ba8 <__aeabi_d2f>
 80024e4:	4603      	mov	r3, r0
 80024e6:	ee00 3a10 	vmov	s0, r3
 80024ea:	f008 fad7 	bl	800aa9c <sinf>
 80024ee:	eeb0 7a40 	vmov.f32	s14, s0
 80024f2:	4b61      	ldr	r3, [pc, #388]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 80024f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80024f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fc:	ee78 7a67 	vsub.f32	s15, s16, s15
		RoboTwist_Global[0] = cosf(GyroYaw * 0.0174533) * RoboTwist[0]
 8002500:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8002502:	edc3 7a00 	vstr	s15, [r3]
		RoboTwist_Global[1] = sinf(GyroYaw * 0.0174533) * RoboTwist[0]
 8002506:	4b5d      	ldr	r3, [pc, #372]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f81c 	bl	8000548 <__aeabi_f2d>
 8002510:	a34f      	add	r3, pc, #316	; (adr r3, 8002650 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	f7fe f86f 	bl	80005f8 <__aeabi_dmul>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f7fe fb41 	bl	8000ba8 <__aeabi_d2f>
 8002526:	4603      	mov	r3, r0
 8002528:	ee00 3a10 	vmov	s0, r3
 800252c:	f008 fab6 	bl	800aa9c <sinf>
 8002530:	eeb0 7a40 	vmov.f32	s14, s0
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	ee27 8a27 	vmul.f32	s16, s14, s15
				+ cosf(GyroYaw * 0.0174533) * RoboTwist[1];
 800253e:	4b4f      	ldr	r3, [pc, #316]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe f800 	bl	8000548 <__aeabi_f2d>
 8002548:	a341      	add	r3, pc, #260	; (adr r3, 8002650 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f7fe f853 	bl	80005f8 <__aeabi_dmul>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f7fe fb25 	bl	8000ba8 <__aeabi_d2f>
 800255e:	4603      	mov	r3, r0
 8002560:	ee00 3a10 	vmov	s0, r3
 8002564:	f008 fa56 	bl	800aa14 <cosf>
 8002568:	eeb0 7a40 	vmov.f32	s14, s0
 800256c:	4b42      	ldr	r3, [pc, #264]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 800256e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002576:	ee78 7a27 	vadd.f32	s15, s16, s15
		RoboTwist_Global[1] = sinf(GyroYaw * 0.0174533) * RoboTwist[0]
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 800257c:	edc3 7a01 	vstr	s15, [r3, #4]
		RoboPose[0] += RoboTwist[0];
 8002580:	4b40      	ldr	r3, [pc, #256]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8002582:	ed93 7a00 	vldr	s14, [r3]
 8002586:	4b3c      	ldr	r3, [pc, #240]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002590:	4b3c      	ldr	r3, [pc, #240]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8002592:	edc3 7a00 	vstr	s15, [r3]
		RoboPose[1] += RoboTwist[1];
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8002598:	ed93 7a01 	vldr	s14, [r3, #4]
 800259c:	4b36      	ldr	r3, [pc, #216]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 800259e:	edd3 7a01 	vldr	s15, [r3, #4]
 80025a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a6:	4b37      	ldr	r3, [pc, #220]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80025a8:	edc3 7a01 	vstr	s15, [r3, #4]
		RoboPose[2] = GyroYaw * 0.0174533;
 80025ac:	4b33      	ldr	r3, [pc, #204]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd ffc9 	bl	8000548 <__aeabi_f2d>
 80025b6:	a326      	add	r3, pc, #152	; (adr r3, 8002650 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f7fe f81c 	bl	80005f8 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f7fe faee 	bl	8000ba8 <__aeabi_d2f>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4a2d      	ldr	r2, [pc, #180]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80025d0:	6093      	str	r3, [r2, #8]
		RoboPose_Global[0] += RoboTwist_Global[0]; //dalam meter
 80025d2:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80025d4:	ed93 7a00 	vldr	s14, [r3]
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80025e4:	edc3 7a00 	vstr	s15, [r3]
		RoboPose_Global[1] += RoboTwist_Global[1]; //jdi kebacanya 0.05m berrti 50 cm
 80025e8:	4b27      	ldr	r3, [pc, #156]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80025ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 80025f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80025f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f8:	4b23      	ldr	r3, [pc, #140]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80025fa:	edc3 7a01 	vstr	s15, [r3, #4]
		RoboPose_Global[2] = GyroYaw * 0.0174533;
 80025fe:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd ffa0 	bl	8000548 <__aeabi_f2d>
 8002608:	a311      	add	r3, pc, #68	; (adr r3, 8002650 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fd fff3 	bl	80005f8 <__aeabi_dmul>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4610      	mov	r0, r2
 8002618:	4619      	mov	r1, r3
 800261a:	f7fe fac5 	bl	8000ba8 <__aeabi_d2f>
 800261e:	4603      	mov	r3, r0
 8002620:	4a19      	ldr	r2, [pc, #100]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8002622:	6093      	str	r3, [r2, #8]
		   __HAL_TIM_GET_COUNTER(&htim5) = 0;
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2200      	movs	r2, #0
 800262a:	625a      	str	r2, [r3, #36]	; 0x24
		   __HAL_TIM_GET_COUNTER(&htim8) = 0;
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2200      	movs	r2, #0
 8002632:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	ecbd 8b02 	vpop	{d8}
 800263e:	bd80      	pop	{r7, pc}
 8002640:	eb851eb8 	.word	0xeb851eb8
 8002644:	3faeb851 	.word	0x3faeb851
 8002648:	54442d18 	.word	0x54442d18
 800264c:	400921fb 	.word	0x400921fb
 8002650:	22d4405f 	.word	0x22d4405f
 8002654:	3f91df47 	.word	0x3f91df47
 8002658:	40001400 	.word	0x40001400
 800265c:	20000344 	.word	0x20000344
 8002660:	200004e8 	.word	0x200004e8
 8002664:	200002a4 	.word	0x200002a4
 8002668:	200005c0 	.word	0x200005c0
 800266c:	200002f4 	.word	0x200002f4
 8002670:	40968000 	.word	0x40968000
 8002674:	200002bc 	.word	0x200002bc
 8002678:	200002dc 	.word	0x200002dc
 800267c:	200002b0 	.word	0x200002b0
 8002680:	200002e8 	.word	0x200002e8
 8002684:	200002d0 	.word	0x200002d0
 8002688:	200002c4 	.word	0x200002c4

0800268c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002690:	b672      	cpsid	i
}
 8002692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002694:	e7fe      	b.n	8002694 <Error_Handler+0x8>
	...

08002698 <MotorSetSpeed>:

float RobotSpeed[3];


void MotorSetSpeed(float speedSP[4])
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	int16_t pwm_[4];

	for(int i=0; i<4; i++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	e111      	b.n	80028ca <MotorSetSpeed+0x232>
	{

		if(speedSP[i] == 0)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	d106      	bne.n	80026ca <MotorSetSpeed+0x32>
		{
			sum_error[i] = 0;
 80026bc:	4a89      	ldr	r2, [pc, #548]	; (80028e4 <MotorSetSpeed+0x24c>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
		}

		error_motor[i] = speedSP[i] - WheelSpeed_SI[i];
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	ed93 7a00 	vldr	s14, [r3]
 80026d6:	4a84      	ldr	r2, [pc, #528]	; (80028e8 <MotorSetSpeed+0x250>)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	edd3 7a00 	vldr	s15, [r3]
 80026e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e6:	4a81      	ldr	r2, [pc, #516]	; (80028ec <MotorSetSpeed+0x254>)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	edc3 7a00 	vstr	s15, [r3]
		sum_error[i] += error_motor[i];
 80026f2:	4a7c      	ldr	r2, [pc, #496]	; (80028e4 <MotorSetSpeed+0x24c>)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	ed93 7a00 	vldr	s14, [r3]
 80026fe:	4a7b      	ldr	r2, [pc, #492]	; (80028ec <MotorSetSpeed+0x254>)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800270e:	4a75      	ldr	r2, [pc, #468]	; (80028e4 <MotorSetSpeed+0x24c>)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	edc3 7a00 	vstr	s15, [r3]

		if(sum_error[i] > 499)
 800271a:	4a72      	ldr	r2, [pc, #456]	; (80028e4 <MotorSetSpeed+0x24c>)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80028f0 <MotorSetSpeed+0x258>
 800272a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800272e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002732:	dd06      	ble.n	8002742 <MotorSetSpeed+0xaa>
			sum_error[i] = 499;
 8002734:	4a6b      	ldr	r2, [pc, #428]	; (80028e4 <MotorSetSpeed+0x24c>)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	4a6d      	ldr	r2, [pc, #436]	; (80028f4 <MotorSetSpeed+0x25c>)
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e012      	b.n	8002768 <MotorSetSpeed+0xd0>
		else if(sum_error[i] < -499)
 8002742:	4a68      	ldr	r2, [pc, #416]	; (80028e4 <MotorSetSpeed+0x24c>)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80028f8 <MotorSetSpeed+0x260>
 8002752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	d505      	bpl.n	8002768 <MotorSetSpeed+0xd0>
			sum_error[i] = -499;
 800275c:	4a61      	ldr	r2, [pc, #388]	; (80028e4 <MotorSetSpeed+0x24c>)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	4a65      	ldr	r2, [pc, #404]	; (80028fc <MotorSetSpeed+0x264>)
 8002766:	601a      	str	r2, [r3, #0]

		if(speedSP[i]==0)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277c:	d10d      	bne.n	800279a <MotorSetSpeed+0x102>
		{
			sum_error[i] = 0;
 800277e:	4a59      	ldr	r2, [pc, #356]	; (80028e4 <MotorSetSpeed+0x24c>)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
			integral[i] =0;
 800278c:	4a5c      	ldr	r2, [pc, #368]	; (8002900 <MotorSetSpeed+0x268>)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
		}

		propo[i] = kp * error_motor[i];
 800279a:	4a54      	ldr	r2, [pc, #336]	; (80028ec <MotorSetSpeed+0x254>)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	ed93 7a00 	vldr	s14, [r3]
 80027a6:	4b57      	ldr	r3, [pc, #348]	; (8002904 <MotorSetSpeed+0x26c>)
 80027a8:	edd3 7a00 	vldr	s15, [r3]
 80027ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b0:	4a55      	ldr	r2, [pc, #340]	; (8002908 <MotorSetSpeed+0x270>)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	edc3 7a00 	vstr	s15, [r3]
		integral[i] = ki * sum_error[i];
 80027bc:	4a49      	ldr	r2, [pc, #292]	; (80028e4 <MotorSetSpeed+0x24c>)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	ed93 7a00 	vldr	s14, [r3]
 80027c8:	4b50      	ldr	r3, [pc, #320]	; (800290c <MotorSetSpeed+0x274>)
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d2:	4a4b      	ldr	r2, [pc, #300]	; (8002900 <MotorSetSpeed+0x268>)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	edc3 7a00 	vstr	s15, [r3]
//		derivative[i] = kd*(WheelSpeed_SI[i] - previous_error_motor [i]);

//		previous_error_motor[i] = WheelSpeed_SI[i];
		if(integral[i] > 499)
 80027de:	4a48      	ldr	r2, [pc, #288]	; (8002900 <MotorSetSpeed+0x268>)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	edd3 7a00 	vldr	s15, [r3]
 80027ea:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80028f0 <MotorSetSpeed+0x258>
 80027ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f6:	dd06      	ble.n	8002806 <MotorSetSpeed+0x16e>
			integral[i] = 499;
 80027f8:	4a41      	ldr	r2, [pc, #260]	; (8002900 <MotorSetSpeed+0x268>)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	4a3c      	ldr	r2, [pc, #240]	; (80028f4 <MotorSetSpeed+0x25c>)
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	e012      	b.n	800282c <MotorSetSpeed+0x194>
		else if(integral[i] < -499)
 8002806:	4a3e      	ldr	r2, [pc, #248]	; (8002900 <MotorSetSpeed+0x268>)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	edd3 7a00 	vldr	s15, [r3]
 8002812:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80028f8 <MotorSetSpeed+0x260>
 8002816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800281a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281e:	d505      	bpl.n	800282c <MotorSetSpeed+0x194>
			integral[i] = -499;
 8002820:	4a37      	ldr	r2, [pc, #220]	; (8002900 <MotorSetSpeed+0x268>)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	4a34      	ldr	r2, [pc, #208]	; (80028fc <MotorSetSpeed+0x264>)
 800282a:	601a      	str	r2, [r3, #0]

//		PID_out[i] = propo[i] + integral[i] + derivative[i];
		PID_out[i] = propo[i] + integral[i];
 800282c:	4a36      	ldr	r2, [pc, #216]	; (8002908 <MotorSetSpeed+0x270>)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	ed93 7a00 	vldr	s14, [r3]
 8002838:	4a31      	ldr	r2, [pc, #196]	; (8002900 <MotorSetSpeed+0x268>)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	edd3 7a00 	vldr	s15, [r3]
 8002844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002848:	4a31      	ldr	r2, [pc, #196]	; (8002910 <MotorSetSpeed+0x278>)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	edc3 7a00 	vstr	s15, [r3]

		if(PID_out[i] > 499)
 8002854:	4a2e      	ldr	r2, [pc, #184]	; (8002910 <MotorSetSpeed+0x278>)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	edd3 7a00 	vldr	s15, [r3]
 8002860:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80028f0 <MotorSetSpeed+0x258>
 8002864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286c:	dd06      	ble.n	800287c <MotorSetSpeed+0x1e4>
			PID_out[i] = 499;
 800286e:	4a28      	ldr	r2, [pc, #160]	; (8002910 <MotorSetSpeed+0x278>)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	4a1f      	ldr	r2, [pc, #124]	; (80028f4 <MotorSetSpeed+0x25c>)
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e012      	b.n	80028a2 <MotorSetSpeed+0x20a>
		else if(PID_out[i] < -499)
 800287c:	4a24      	ldr	r2, [pc, #144]	; (8002910 <MotorSetSpeed+0x278>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	edd3 7a00 	vldr	s15, [r3]
 8002888:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80028f8 <MotorSetSpeed+0x260>
 800288c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002894:	d505      	bpl.n	80028a2 <MotorSetSpeed+0x20a>
			PID_out[i] = -499;
 8002896:	4a1e      	ldr	r2, [pc, #120]	; (8002910 <MotorSetSpeed+0x278>)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	4a17      	ldr	r2, [pc, #92]	; (80028fc <MotorSetSpeed+0x264>)
 80028a0:	601a      	str	r2, [r3, #0]

		pwm_[i] = (int16_t)PID_out[i];
 80028a2:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <MotorSetSpeed+0x278>)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028b2:	ee17 3a90 	vmov	r3, s15
 80028b6:	b21a      	sxth	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	3318      	adds	r3, #24
 80028be:	443b      	add	r3, r7
 80028c0:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for(int i=0; i<4; i++)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3301      	adds	r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	f77f aeea 	ble.w	80026a6 <MotorSetSpeed+0xe>

	}
	MotorSetPWM(pwm_);
 80028d2:	f107 030c 	add.w	r3, r7, #12
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f924 	bl	8002b24 <MotorSetPWM>
}
 80028dc:	bf00      	nop
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000398 	.word	0x20000398
 80028e8:	20000348 	.word	0x20000348
 80028ec:	20000388 	.word	0x20000388
 80028f0:	43f98000 	.word	0x43f98000
 80028f4:	43f98000 	.word	0x43f98000
 80028f8:	c3f98000 	.word	0xc3f98000
 80028fc:	c3f98000 	.word	0xc3f98000
 8002900:	20000378 	.word	0x20000378
 8002904:	20000030 	.word	0x20000030
 8002908:	20000368 	.word	0x20000368
 800290c:	20000034 	.word	0x20000034
 8002910:	200003a8 	.word	0x200003a8
 8002914:	00000000 	.word	0x00000000

08002918 <omniKine>:


void omniKine(float vx, float vy, float vz){
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b093      	sub	sp, #76	; 0x4c
 800291c:	af00      	add	r7, sp, #0
 800291e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002922:	edc7 0a02 	vstr	s1, [r7, #8]
 8002926:	ed87 1a01 	vstr	s2, [r7, #4]

	float wheel_deg[4] = {135,225,315,405};
 800292a:	4b7b      	ldr	r3, [pc, #492]	; (8002b18 <omniKine+0x200>)
 800292c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002932:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	float wheel_cos[4];
	float wheel_sin[4];

	for(int i=0;i<4;i++)
 8002936:	2300      	movs	r3, #0
 8002938:	647b      	str	r3, [r7, #68]	; 0x44
 800293a:	e046      	b.n	80029ca <omniKine+0xb2>
	{
		wheel_cos[i] = cosf(wheel_deg[i] * 0.0174533);
 800293c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	3348      	adds	r3, #72	; 0x48
 8002942:	443b      	add	r3, r7
 8002944:	3b14      	subs	r3, #20
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fdfd 	bl	8000548 <__aeabi_f2d>
 800294e:	a370      	add	r3, pc, #448	; (adr r3, 8002b10 <omniKine+0x1f8>)
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	f7fd fe50 	bl	80005f8 <__aeabi_dmul>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	f7fe f922 	bl	8000ba8 <__aeabi_d2f>
 8002964:	4603      	mov	r3, r0
 8002966:	ee00 3a10 	vmov	s0, r3
 800296a:	f008 f853 	bl	800aa14 <cosf>
 800296e:	eef0 7a40 	vmov.f32	s15, s0
 8002972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	3348      	adds	r3, #72	; 0x48
 8002978:	443b      	add	r3, r7
 800297a:	3b24      	subs	r3, #36	; 0x24
 800297c:	edc3 7a00 	vstr	s15, [r3]
		wheel_sin[i] = sinf(wheel_deg[i] * 0.0174533);
 8002980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	3348      	adds	r3, #72	; 0x48
 8002986:	443b      	add	r3, r7
 8002988:	3b14      	subs	r3, #20
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fddb 	bl	8000548 <__aeabi_f2d>
 8002992:	a35f      	add	r3, pc, #380	; (adr r3, 8002b10 <omniKine+0x1f8>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fd fe2e 	bl	80005f8 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	f7fe f900 	bl	8000ba8 <__aeabi_d2f>
 80029a8:	4603      	mov	r3, r0
 80029aa:	ee00 3a10 	vmov	s0, r3
 80029ae:	f008 f875 	bl	800aa9c <sinf>
 80029b2:	eef0 7a40 	vmov.f32	s15, s0
 80029b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	3348      	adds	r3, #72	; 0x48
 80029bc:	443b      	add	r3, r7
 80029be:	3b34      	subs	r3, #52	; 0x34
 80029c0:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<4;i++)
 80029c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c6:	3301      	adds	r3, #1
 80029c8:	647b      	str	r3, [r7, #68]	; 0x44
 80029ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	ddb5      	ble.n	800293c <omniKine+0x24>
	}


	WheelSpeed_SP[0] = (1/omni_R) * (wheel_sin[0]*-vx + wheel_cos[0]*-vy + omni_R*vz);
 80029d0:	4b52      	ldr	r3, [pc, #328]	; (8002b1c <omniKine+0x204>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029de:	edd7 6a05 	vldr	s13, [r7, #20]
 80029e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80029e6:	eef1 7a67 	vneg.f32	s15, s15
 80029ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029ee:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80029f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80029f6:	eef1 7a67 	vneg.f32	s15, s15
 80029fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80029fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002a02:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <omniKine+0x204>)
 8002a04:	ed93 6a00 	vldr	s12, [r3]
 8002a08:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a0c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <omniKine+0x208>)
 8002a1a:	edc3 7a00 	vstr	s15, [r3]
	WheelSpeed_SP[1] = (1/omni_R) * (wheel_sin[1]*-vx + wheel_cos[1]*-vy + omni_R*vz);
 8002a1e:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <omniKine+0x204>)
 8002a20:	edd3 7a00 	vldr	s15, [r3]
 8002a24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a2c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002a30:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a34:	eef1 7a67 	vneg.f32	s15, s15
 8002a38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a3c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8002a40:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a44:	eef1 7a67 	vneg.f32	s15, s15
 8002a48:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002a50:	4b32      	ldr	r3, [pc, #200]	; (8002b1c <omniKine+0x204>)
 8002a52:	ed93 6a00 	vldr	s12, [r3]
 8002a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a66:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <omniKine+0x208>)
 8002a68:	edc3 7a01 	vstr	s15, [r3, #4]
	WheelSpeed_SP[2] = (1/omni_R) * (wheel_sin[2]*-vx + wheel_cos[2]*-vy + omni_R*vz);
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <omniKine+0x204>)
 8002a6e:	edd3 7a00 	vldr	s15, [r3]
 8002a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a82:	eef1 7a67 	vneg.f32	s15, s15
 8002a86:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a8a:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8002a8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a92:	eef1 7a67 	vneg.f32	s15, s15
 8002a96:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a9a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <omniKine+0x204>)
 8002aa0:	ed93 6a00 	vldr	s12, [r3]
 8002aa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aa8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <omniKine+0x208>)
 8002ab6:	edc3 7a02 	vstr	s15, [r3, #8]
	WheelSpeed_SP[3] = (1/omni_R) * (wheel_sin[3]*-vx + wheel_cos[3]*-vy + omni_R*vz);
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <omniKine+0x204>)
 8002abc:	edd3 7a00 	vldr	s15, [r3]
 8002ac0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ac8:	edd7 6a08 	vldr	s13, [r7, #32]
 8002acc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ad0:	eef1 7a67 	vneg.f32	s15, s15
 8002ad4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ad8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8002adc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ae0:	eef1 7a67 	vneg.f32	s15, s15
 8002ae4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ae8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <omniKine+0x204>)
 8002aee:	ed93 6a00 	vldr	s12, [r3]
 8002af2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002af6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <omniKine+0x208>)
 8002b04:	edc3 7a03 	vstr	s15, [r3, #12]

}
 8002b08:	bf00      	nop
 8002b0a:	374c      	adds	r7, #76	; 0x4c
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd90      	pop	{r4, r7, pc}
 8002b10:	22d4405f 	.word	0x22d4405f
 8002b14:	3f91df47 	.word	0x3f91df47
 8002b18:	0800b5bc 	.word	0x0800b5bc
 8002b1c:	2000002c 	.word	0x2000002c
 8002b20:	20000358 	.word	0x20000358

08002b24 <MotorSetPWM>:


//set PWM motor
void MotorSetPWM(int16_t pwm[4])
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

	// Motor 0
	if(pwm[0] > 0)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	dd0c      	ble.n	8002b50 <MotorSetPWM+0x2c>
	{
		  HAL_GPIO_WritePin(M0_D1_GPIO_Port, M0_D1_Pin, GPIO_PIN_SET);
 8002b36:	2201      	movs	r2, #1
 8002b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b3c:	4863      	ldr	r0, [pc, #396]	; (8002ccc <MotorSetPWM+0x1a8>)
 8002b3e:	f002 f8eb 	bl	8004d18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(M0_D2_GPIO_Port, M0_D2_Pin, GPIO_PIN_RESET);
 8002b42:	2200      	movs	r2, #0
 8002b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b48:	4860      	ldr	r0, [pc, #384]	; (8002ccc <MotorSetPWM+0x1a8>)
 8002b4a:	f002 f8e5 	bl	8004d18 <HAL_GPIO_WritePin>
 8002b4e:	e00b      	b.n	8002b68 <MotorSetPWM+0x44>
	}
	else
	{
		  HAL_GPIO_WritePin(M0_D1_GPIO_Port, M0_D1_Pin, GPIO_PIN_RESET);
 8002b50:	2200      	movs	r2, #0
 8002b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b56:	485d      	ldr	r0, [pc, #372]	; (8002ccc <MotorSetPWM+0x1a8>)
 8002b58:	f002 f8de 	bl	8004d18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(M0_D2_GPIO_Port, M0_D2_Pin, GPIO_PIN_SET);
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b62:	485a      	ldr	r0, [pc, #360]	; (8002ccc <MotorSetPWM+0x1a8>)
 8002b64:	f002 f8d8 	bl	8004d18 <HAL_GPIO_WritePin>
	}


	// Motor 1
	if(pwm[1] > 0)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	dd0c      	ble.n	8002b8e <MotorSetPWM+0x6a>
	{
		  HAL_GPIO_WritePin(M1_D1_GPIO_Port, M1_D1_Pin, GPIO_PIN_SET);
 8002b74:	2201      	movs	r2, #1
 8002b76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b7a:	4854      	ldr	r0, [pc, #336]	; (8002ccc <MotorSetPWM+0x1a8>)
 8002b7c:	f002 f8cc 	bl	8004d18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(M1_D2_GPIO_Port, M1_D2_Pin, GPIO_PIN_RESET);
 8002b80:	2200      	movs	r2, #0
 8002b82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b86:	4852      	ldr	r0, [pc, #328]	; (8002cd0 <MotorSetPWM+0x1ac>)
 8002b88:	f002 f8c6 	bl	8004d18 <HAL_GPIO_WritePin>
 8002b8c:	e00b      	b.n	8002ba6 <MotorSetPWM+0x82>
	}
	else
	{
		  HAL_GPIO_WritePin(M1_D1_GPIO_Port, M1_D1_Pin, GPIO_PIN_RESET);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b94:	484d      	ldr	r0, [pc, #308]	; (8002ccc <MotorSetPWM+0x1a8>)
 8002b96:	f002 f8bf 	bl	8004d18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(M1_D2_GPIO_Port, M1_D2_Pin, GPIO_PIN_SET);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ba0:	484b      	ldr	r0, [pc, #300]	; (8002cd0 <MotorSetPWM+0x1ac>)
 8002ba2:	f002 f8b9 	bl	8004d18 <HAL_GPIO_WritePin>
	}


	// Motor 2
	if(pwm[2] > 0)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	dd0c      	ble.n	8002bcc <MotorSetPWM+0xa8>
	{
		  HAL_GPIO_WritePin(M2_D1_GPIO_Port, M2_D1_Pin, GPIO_PIN_SET);
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bb8:	4845      	ldr	r0, [pc, #276]	; (8002cd0 <MotorSetPWM+0x1ac>)
 8002bba:	f002 f8ad 	bl	8004d18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(M2_D2_GPIO_Port, M2_D2_Pin, GPIO_PIN_RESET);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bc4:	4842      	ldr	r0, [pc, #264]	; (8002cd0 <MotorSetPWM+0x1ac>)
 8002bc6:	f002 f8a7 	bl	8004d18 <HAL_GPIO_WritePin>
 8002bca:	e00b      	b.n	8002be4 <MotorSetPWM+0xc0>
	}
	else
	{
		  HAL_GPIO_WritePin(M2_D1_GPIO_Port, M2_D1_Pin, GPIO_PIN_RESET);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bd2:	483f      	ldr	r0, [pc, #252]	; (8002cd0 <MotorSetPWM+0x1ac>)
 8002bd4:	f002 f8a0 	bl	8004d18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(M2_D2_GPIO_Port, M2_D2_Pin, GPIO_PIN_SET);
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bde:	483c      	ldr	r0, [pc, #240]	; (8002cd0 <MotorSetPWM+0x1ac>)
 8002be0:	f002 f89a 	bl	8004d18 <HAL_GPIO_WritePin>
	}

	// Motor 3
	if(pwm[3] < 0)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3306      	adds	r3, #6
 8002be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	da0c      	bge.n	8002c0a <MotorSetPWM+0xe6>
	{
		  HAL_GPIO_WritePin(M3_D1_GPIO_Port, M3_D1_Pin, GPIO_PIN_SET);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bf6:	4836      	ldr	r0, [pc, #216]	; (8002cd0 <MotorSetPWM+0x1ac>)
 8002bf8:	f002 f88e 	bl	8004d18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(M3_D2_GPIO_Port, M3_D2_Pin, GPIO_PIN_RESET);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c02:	4833      	ldr	r0, [pc, #204]	; (8002cd0 <MotorSetPWM+0x1ac>)
 8002c04:	f002 f888 	bl	8004d18 <HAL_GPIO_WritePin>
 8002c08:	e00b      	b.n	8002c22 <MotorSetPWM+0xfe>
	}
	else
	{
		  HAL_GPIO_WritePin(M3_D1_GPIO_Port, M3_D1_Pin, GPIO_PIN_RESET);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c10:	482f      	ldr	r0, [pc, #188]	; (8002cd0 <MotorSetPWM+0x1ac>)
 8002c12:	f002 f881 	bl	8004d18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(M3_D2_GPIO_Port, M3_D2_Pin, GPIO_PIN_SET);
 8002c16:	2201      	movs	r2, #1
 8002c18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c1c:	482c      	ldr	r0, [pc, #176]	; (8002cd0 <MotorSetPWM+0x1ac>)
 8002c1e:	f002 f87b 	bl	8004d18 <HAL_GPIO_WritePin>
	}



	for(int i=0;i<4;i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e023      	b.n	8002c70 <MotorSetPWM+0x14c>
	{
	 if(pwm[i] > 499)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c38:	db07      	blt.n	8002c4a <MotorSetPWM+0x126>
		 pwm[i] = 499;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002c46:	801a      	strh	r2, [r3, #0]
 8002c48:	e00f      	b.n	8002c6a <MotorSetPWM+0x146>
	 else if(pwm[i] <-499)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c56:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8002c5a:	dc06      	bgt.n	8002c6a <MotorSetPWM+0x146>
		 pwm[i] = -499;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	f64f 620d 	movw	r2, #65037	; 0xfe0d
 8002c68:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<4;i++)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	ddd8      	ble.n	8002c28 <MotorSetPWM+0x104>

	}

	TIM12->CCR2 = abs(pwm[0]);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bfb8      	it	lt
 8002c80:	425b      	neglt	r3, r3
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <MotorSetPWM+0x1b0>)
 8002c86:	639a      	str	r2, [r3, #56]	; 0x38
	TIM12->CCR1 = abs(pwm[1]);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bfb8      	it	lt
 8002c94:	425b      	neglt	r3, r3
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <MotorSetPWM+0x1b0>)
 8002c9a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM10->CCR1 = abs(pwm[2]);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bfb8      	it	lt
 8002ca8:	425b      	neglt	r3, r3
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <MotorSetPWM+0x1b4>)
 8002cae:	635a      	str	r2, [r3, #52]	; 0x34
	TIM9->CCR1 = abs(pwm[3]);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3306      	adds	r3, #6
 8002cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bfb8      	it	lt
 8002cbc:	425b      	neglt	r3, r3
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <MotorSetPWM+0x1b8>)
 8002cc2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40020400 	.word	0x40020400
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40001800 	.word	0x40001800
 8002cd8:	40014400 	.word	0x40014400
 8002cdc:	40014000 	.word	0x40014000

08002ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <HAL_MspInit+0x4c>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	4a0f      	ldr	r2, [pc, #60]	; (8002d2c <HAL_MspInit+0x4c>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <HAL_MspInit+0x4c>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_MspInit+0x4c>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a08      	ldr	r2, [pc, #32]	; (8002d2c <HAL_MspInit+0x4c>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_MspInit+0x4c>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800

08002d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <NMI_Handler+0x4>

08002d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d3a:	e7fe      	b.n	8002d3a <HardFault_Handler+0x4>

08002d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <MemManage_Handler+0x4>

08002d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d46:	e7fe      	b.n	8002d46 <BusFault_Handler+0x4>

08002d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <UsageFault_Handler+0x4>

08002d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d7c:	f001 f8d8 	bl	8003f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d88:	4802      	ldr	r0, [pc, #8]	; (8002d94 <DMA1_Stream5_IRQHandler+0x10>)
 8002d8a:	f001 fbbf 	bl	800450c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000768 	.word	0x20000768

08002d98 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002d9c:	4802      	ldr	r0, [pc, #8]	; (8002da8 <DMA1_Stream6_IRQHandler+0x10>)
 8002d9e:	f001 fbb5 	bl	800450c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	200007c8 	.word	0x200007c8

08002dac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002db0:	4802      	ldr	r0, [pc, #8]	; (8002dbc <USART1_IRQHandler+0x10>)
 8002db2:	f003 fdeb 	bl	800698c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200006e0 	.word	0x200006e0

08002dc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002dc4:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <USART2_IRQHandler+0x10>)
 8002dc6:	f003 fde1 	bl	800698c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000724 	.word	0x20000724

08002dd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <TIM6_DAC_IRQHandler+0x10>)
 8002dda:	f002 ff5b 	bl	8005c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000530 	.word	0x20000530

08002de8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <TIM7_IRQHandler+0x10>)
 8002dee:	f002 ff51 	bl	8005c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000578 	.word	0x20000578

08002dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return 1;
 8002e00:	2301      	movs	r3, #1
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <_kill>:

int _kill(int pid, int sig)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e16:	f004 fee9 	bl	8007bec <__errno>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2216      	movs	r2, #22
 8002e1e:	601a      	str	r2, [r3, #0]
  return -1;
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <_exit>:

void _exit (int status)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ffe7 	bl	8002e0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e3e:	e7fe      	b.n	8002e3e <_exit+0x12>

08002e40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e00a      	b.n	8002e68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e52:	f3af 8000 	nop.w
 8002e56:	4601      	mov	r1, r0
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	60ba      	str	r2, [r7, #8]
 8002e5e:	b2ca      	uxtb	r2, r1
 8002e60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3301      	adds	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	dbf0      	blt.n	8002e52 <_read+0x12>
  }

  return len;
 8002e70:	687b      	ldr	r3, [r7, #4]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e009      	b.n	8002ea0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	60ba      	str	r2, [r7, #8]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	dbf1      	blt.n	8002e8c <_write+0x12>
  }
  return len;
 8002ea8:	687b      	ldr	r3, [r7, #4]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <_close>:

int _close(int file)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eda:	605a      	str	r2, [r3, #4]
  return 0;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <_isatty>:

int _isatty(int file)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ef2:	2301      	movs	r3, #1
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f24:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <_sbrk+0x5c>)
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <_sbrk+0x60>)
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <_sbrk+0x64>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <_sbrk+0x64>)
 8002f3a:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <_sbrk+0x68>)
 8002f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <_sbrk+0x64>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d207      	bcs.n	8002f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f4c:	f004 fe4e 	bl	8007bec <__errno>
 8002f50:	4603      	mov	r3, r0
 8002f52:	220c      	movs	r2, #12
 8002f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f5a:	e009      	b.n	8002f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <_sbrk+0x64>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <_sbrk+0x64>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <_sbrk+0x64>)
 8002f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20020000 	.word	0x20020000
 8002f7c:	00000400 	.word	0x00000400
 8002f80:	200003c4 	.word	0x200003c4
 8002f84:	20000840 	.word	0x20000840

08002f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <SystemInit+0x20>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	4a05      	ldr	r2, [pc, #20]	; (8002fa8 <SystemInit+0x20>)
 8002f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08c      	sub	sp, #48	; 0x30
 8002fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002fb2:	f107 030c 	add.w	r3, r7, #12
 8002fb6:	2224      	movs	r2, #36	; 0x24
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f004 fe4e 	bl	8007c5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fc8:	4b22      	ldr	r3, [pc, #136]	; (8003054 <MX_TIM1_Init+0xa8>)
 8002fca:	4a23      	ldr	r2, [pc, #140]	; (8003058 <MX_TIM1_Init+0xac>)
 8002fcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002fce:	4b21      	ldr	r3, [pc, #132]	; (8003054 <MX_TIM1_Init+0xa8>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd4:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <MX_TIM1_Init+0xa8>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002fda:	4b1e      	ldr	r3, [pc, #120]	; (8003054 <MX_TIM1_Init+0xa8>)
 8002fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fe0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <MX_TIM1_Init+0xa8>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <MX_TIM1_Init+0xa8>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fee:	4b19      	ldr	r3, [pc, #100]	; (8003054 <MX_TIM1_Init+0xa8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 7;
 8003004:	2307      	movs	r3, #7
 8003006:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003008:	2300      	movs	r3, #0
 800300a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800300c:	2301      	movs	r3, #1
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003010:	2300      	movs	r3, #0
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 7;
 8003014:	2307      	movs	r3, #7
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003018:	f107 030c 	add.w	r3, r7, #12
 800301c:	4619      	mov	r1, r3
 800301e:	480d      	ldr	r0, [pc, #52]	; (8003054 <MX_TIM1_Init+0xa8>)
 8003020:	f002 fd04 	bl	8005a2c <HAL_TIM_Encoder_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800302a:	f7ff fb2f 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	4619      	mov	r1, r3
 800303a:	4806      	ldr	r0, [pc, #24]	; (8003054 <MX_TIM1_Init+0xa8>)
 800303c:	f003 fa92 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003046:	f7ff fb21 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800304a:	bf00      	nop
 800304c:	3730      	adds	r7, #48	; 0x30
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200003c8 	.word	0x200003c8
 8003058:	40010000 	.word	0x40010000

0800305c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08c      	sub	sp, #48	; 0x30
 8003060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003062:	f107 030c 	add.w	r3, r7, #12
 8003066:	2224      	movs	r2, #36	; 0x24
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f004 fdf6 	bl	8007c5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003078:	4b21      	ldr	r3, [pc, #132]	; (8003100 <MX_TIM2_Init+0xa4>)
 800307a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800307e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003080:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <MX_TIM2_Init+0xa4>)
 8003082:	2200      	movs	r2, #0
 8003084:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003086:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <MX_TIM2_Init+0xa4>)
 8003088:	2200      	movs	r2, #0
 800308a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800308c:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <MX_TIM2_Init+0xa4>)
 800308e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003092:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003094:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <MX_TIM2_Init+0xa4>)
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800309a:	4b19      	ldr	r3, [pc, #100]	; (8003100 <MX_TIM2_Init+0xa4>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80030a0:	2303      	movs	r3, #3
 80030a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80030a4:	2302      	movs	r3, #2
 80030a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80030a8:	2301      	movs	r3, #1
 80030aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 7;
 80030b0:	2307      	movs	r3, #7
 80030b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030b4:	2300      	movs	r3, #0
 80030b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030b8:	2301      	movs	r3, #1
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030bc:	2300      	movs	r3, #0
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 7;
 80030c0:	2307      	movs	r3, #7
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80030c4:	f107 030c 	add.w	r3, r7, #12
 80030c8:	4619      	mov	r1, r3
 80030ca:	480d      	ldr	r0, [pc, #52]	; (8003100 <MX_TIM2_Init+0xa4>)
 80030cc:	f002 fcae 	bl	8005a2c <HAL_TIM_Encoder_Init>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80030d6:	f7ff fad9 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030e2:	1d3b      	adds	r3, r7, #4
 80030e4:	4619      	mov	r1, r3
 80030e6:	4806      	ldr	r0, [pc, #24]	; (8003100 <MX_TIM2_Init+0xa4>)
 80030e8:	f003 fa3c 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80030f2:	f7ff facb 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030f6:	bf00      	nop
 80030f8:	3730      	adds	r7, #48	; 0x30
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000410 	.word	0x20000410

08003104 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	; 0x30
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800310a:	f107 030c 	add.w	r3, r7, #12
 800310e:	2224      	movs	r2, #36	; 0x24
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f004 fda2 	bl	8007c5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003118:	1d3b      	adds	r3, r7, #4
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003120:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <MX_TIM3_Init+0xa0>)
 8003122:	4a21      	ldr	r2, [pc, #132]	; (80031a8 <MX_TIM3_Init+0xa4>)
 8003124:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003126:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <MX_TIM3_Init+0xa0>)
 8003128:	2200      	movs	r2, #0
 800312a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <MX_TIM3_Init+0xa0>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <MX_TIM3_Init+0xa0>)
 8003134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003138:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800313a:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <MX_TIM3_Init+0xa0>)
 800313c:	2200      	movs	r2, #0
 800313e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <MX_TIM3_Init+0xa0>)
 8003142:	2200      	movs	r2, #0
 8003144:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003146:	2303      	movs	r3, #3
 8003148:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800314a:	2302      	movs	r3, #2
 800314c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800314e:	2301      	movs	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 7;
 8003156:	2307      	movs	r3, #7
 8003158:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800315a:	2302      	movs	r3, #2
 800315c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800315e:	2301      	movs	r3, #1
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003162:	2300      	movs	r3, #0
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 7;
 8003166:	2307      	movs	r3, #7
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800316a:	f107 030c 	add.w	r3, r7, #12
 800316e:	4619      	mov	r1, r3
 8003170:	480c      	ldr	r0, [pc, #48]	; (80031a4 <MX_TIM3_Init+0xa0>)
 8003172:	f002 fc5b 	bl	8005a2c <HAL_TIM_Encoder_Init>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800317c:	f7ff fa86 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003180:	2300      	movs	r3, #0
 8003182:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	4619      	mov	r1, r3
 800318c:	4805      	ldr	r0, [pc, #20]	; (80031a4 <MX_TIM3_Init+0xa0>)
 800318e:	f003 f9e9 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003198:	f7ff fa78 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800319c:	bf00      	nop
 800319e:	3730      	adds	r7, #48	; 0x30
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000458 	.word	0x20000458
 80031a8:	40000400 	.word	0x40000400

080031ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08c      	sub	sp, #48	; 0x30
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031b2:	f107 030c 	add.w	r3, r7, #12
 80031b6:	2224      	movs	r2, #36	; 0x24
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f004 fd4e 	bl	8007c5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80031c8:	4b20      	ldr	r3, [pc, #128]	; (800324c <MX_TIM4_Init+0xa0>)
 80031ca:	4a21      	ldr	r2, [pc, #132]	; (8003250 <MX_TIM4_Init+0xa4>)
 80031cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80031ce:	4b1f      	ldr	r3, [pc, #124]	; (800324c <MX_TIM4_Init+0xa0>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <MX_TIM4_Init+0xa0>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <MX_TIM4_Init+0xa0>)
 80031dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e2:	4b1a      	ldr	r3, [pc, #104]	; (800324c <MX_TIM4_Init+0xa0>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e8:	4b18      	ldr	r3, [pc, #96]	; (800324c <MX_TIM4_Init+0xa0>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80031ee:	2303      	movs	r3, #3
 80031f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80031f2:	2302      	movs	r3, #2
 80031f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031f6:	2301      	movs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 7;
 80031fe:	2307      	movs	r3, #7
 8003200:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003206:	2301      	movs	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800320a:	2300      	movs	r3, #0
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 7;
 800320e:	2307      	movs	r3, #7
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003212:	f107 030c 	add.w	r3, r7, #12
 8003216:	4619      	mov	r1, r3
 8003218:	480c      	ldr	r0, [pc, #48]	; (800324c <MX_TIM4_Init+0xa0>)
 800321a:	f002 fc07 	bl	8005a2c <HAL_TIM_Encoder_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003224:	f7ff fa32 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003228:	2300      	movs	r3, #0
 800322a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	4619      	mov	r1, r3
 8003234:	4805      	ldr	r0, [pc, #20]	; (800324c <MX_TIM4_Init+0xa0>)
 8003236:	f003 f995 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003240:	f7ff fa24 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	3730      	adds	r7, #48	; 0x30
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	200004a0 	.word	0x200004a0
 8003250:	40000800 	.word	0x40000800

08003254 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08c      	sub	sp, #48	; 0x30
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800325a:	f107 030c 	add.w	r3, r7, #12
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f004 fcfa 	bl	8007c5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003268:	1d3b      	adds	r3, r7, #4
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003270:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <MX_TIM5_Init+0xa0>)
 8003272:	4a21      	ldr	r2, [pc, #132]	; (80032f8 <MX_TIM5_Init+0xa4>)
 8003274:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003276:	4b1f      	ldr	r3, [pc, #124]	; (80032f4 <MX_TIM5_Init+0xa0>)
 8003278:	2200      	movs	r2, #0
 800327a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <MX_TIM5_Init+0xa0>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003282:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <MX_TIM5_Init+0xa0>)
 8003284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003288:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800328a:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <MX_TIM5_Init+0xa0>)
 800328c:	2200      	movs	r2, #0
 800328e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003290:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <MX_TIM5_Init+0xa0>)
 8003292:	2200      	movs	r2, #0
 8003294:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003296:	2303      	movs	r3, #3
 8003298:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800329e:	2301      	movs	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 7;
 80032a6:	2307      	movs	r3, #7
 80032a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80032aa:	2300      	movs	r3, #0
 80032ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032ae:	2301      	movs	r3, #1
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032b2:	2300      	movs	r3, #0
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 7;
 80032b6:	2307      	movs	r3, #7
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80032ba:	f107 030c 	add.w	r3, r7, #12
 80032be:	4619      	mov	r1, r3
 80032c0:	480c      	ldr	r0, [pc, #48]	; (80032f4 <MX_TIM5_Init+0xa0>)
 80032c2:	f002 fbb3 	bl	8005a2c <HAL_TIM_Encoder_Init>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80032cc:	f7ff f9de 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032d0:	2300      	movs	r3, #0
 80032d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80032d8:	1d3b      	adds	r3, r7, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	4805      	ldr	r0, [pc, #20]	; (80032f4 <MX_TIM5_Init+0xa0>)
 80032de:	f003 f941 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80032e8:	f7ff f9d0 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80032ec:	bf00      	nop
 80032ee:	3730      	adds	r7, #48	; 0x30
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	200004e8 	.word	0x200004e8
 80032f8:	40000c00 	.word	0x40000c00

080032fc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003302:	463b      	mov	r3, r7
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <MX_TIM6_Init+0x64>)
 800330c:	4a15      	ldr	r2, [pc, #84]	; (8003364 <MX_TIM6_Init+0x68>)
 800330e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 168-1;
 8003310:	4b13      	ldr	r3, [pc, #76]	; (8003360 <MX_TIM6_Init+0x64>)
 8003312:	22a7      	movs	r2, #167	; 0xa7
 8003314:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <MX_TIM6_Init+0x64>)
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 800331c:	4b10      	ldr	r3, [pc, #64]	; (8003360 <MX_TIM6_Init+0x64>)
 800331e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003322:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <MX_TIM6_Init+0x64>)
 8003326:	2200      	movs	r2, #0
 8003328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800332a:	480d      	ldr	r0, [pc, #52]	; (8003360 <MX_TIM6_Init+0x64>)
 800332c:	f002 f9a6 	bl	800567c <HAL_TIM_Base_Init>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003336:	f7ff f9a9 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800333a:	2320      	movs	r3, #32
 800333c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003342:	463b      	mov	r3, r7
 8003344:	4619      	mov	r1, r3
 8003346:	4806      	ldr	r0, [pc, #24]	; (8003360 <MX_TIM6_Init+0x64>)
 8003348:	f003 f90c 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003352:	f7ff f99b 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000530 	.word	0x20000530
 8003364:	40001000 	.word	0x40001000

08003368 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800336e:	463b      	mov	r3, r7
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <MX_TIM7_Init+0x64>)
 8003378:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <MX_TIM7_Init+0x68>)
 800337a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 800337c:	4b13      	ldr	r3, [pc, #76]	; (80033cc <MX_TIM7_Init+0x64>)
 800337e:	2253      	movs	r2, #83	; 0x53
 8003380:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <MX_TIM7_Init+0x64>)
 8003384:	2200      	movs	r2, #0
 8003386:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8003388:	4b10      	ldr	r3, [pc, #64]	; (80033cc <MX_TIM7_Init+0x64>)
 800338a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800338e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003390:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <MX_TIM7_Init+0x64>)
 8003392:	2200      	movs	r2, #0
 8003394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003396:	480d      	ldr	r0, [pc, #52]	; (80033cc <MX_TIM7_Init+0x64>)
 8003398:	f002 f970 	bl	800567c <HAL_TIM_Base_Init>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80033a2:	f7ff f973 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80033a6:	2320      	movs	r3, #32
 80033a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80033ae:	463b      	mov	r3, r7
 80033b0:	4619      	mov	r1, r3
 80033b2:	4806      	ldr	r0, [pc, #24]	; (80033cc <MX_TIM7_Init+0x64>)
 80033b4:	f003 f8d6 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80033be:	f7ff f965 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000578 	.word	0x20000578
 80033d0:	40001400 	.word	0x40001400

080033d4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	; 0x30
 80033d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033da:	f107 030c 	add.w	r3, r7, #12
 80033de:	2224      	movs	r2, #36	; 0x24
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f004 fc3a 	bl	8007c5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e8:	1d3b      	adds	r3, r7, #4
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80033f0:	4b22      	ldr	r3, [pc, #136]	; (800347c <MX_TIM8_Init+0xa8>)
 80033f2:	4a23      	ldr	r2, [pc, #140]	; (8003480 <MX_TIM8_Init+0xac>)
 80033f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80033f6:	4b21      	ldr	r3, [pc, #132]	; (800347c <MX_TIM8_Init+0xa8>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033fc:	4b1f      	ldr	r3, [pc, #124]	; (800347c <MX_TIM8_Init+0xa8>)
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003402:	4b1e      	ldr	r3, [pc, #120]	; (800347c <MX_TIM8_Init+0xa8>)
 8003404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003408:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800340a:	4b1c      	ldr	r3, [pc, #112]	; (800347c <MX_TIM8_Init+0xa8>)
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <MX_TIM8_Init+0xa8>)
 8003412:	2200      	movs	r2, #0
 8003414:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003416:	4b19      	ldr	r3, [pc, #100]	; (800347c <MX_TIM8_Init+0xa8>)
 8003418:	2200      	movs	r2, #0
 800341a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800341c:	2303      	movs	r3, #3
 800341e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003424:	2301      	movs	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 7;
 800342c:	2307      	movs	r3, #7
 800342e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003430:	2300      	movs	r3, #0
 8003432:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003434:	2301      	movs	r3, #1
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003438:	2300      	movs	r3, #0
 800343a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 7;
 800343c:	2307      	movs	r3, #7
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	4619      	mov	r1, r3
 8003446:	480d      	ldr	r0, [pc, #52]	; (800347c <MX_TIM8_Init+0xa8>)
 8003448:	f002 faf0 	bl	8005a2c <HAL_TIM_Encoder_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003452:	f7ff f91b 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003456:	2300      	movs	r3, #0
 8003458:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	4619      	mov	r1, r3
 8003462:	4806      	ldr	r0, [pc, #24]	; (800347c <MX_TIM8_Init+0xa8>)
 8003464:	f003 f87e 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800346e:	f7ff f90d 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003472:	bf00      	nop
 8003474:	3730      	adds	r7, #48	; 0x30
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200005c0 	.word	0x200005c0
 8003480:	40010400 	.word	0x40010400

08003484 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800348a:	1d3b      	adds	r3, r7, #4
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
 8003498:	615a      	str	r2, [r3, #20]
 800349a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <MX_TIM9_Init+0x84>)
 800349e:	4a1b      	ldr	r2, [pc, #108]	; (800350c <MX_TIM9_Init+0x88>)
 80034a0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 80034a2:	4b19      	ldr	r3, [pc, #100]	; (8003508 <MX_TIM9_Init+0x84>)
 80034a4:	22a7      	movs	r2, #167	; 0xa7
 80034a6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a8:	4b17      	ldr	r3, [pc, #92]	; (8003508 <MX_TIM9_Init+0x84>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 500-1;
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <MX_TIM9_Init+0x84>)
 80034b0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80034b4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <MX_TIM9_Init+0x84>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034bc:	4b12      	ldr	r3, [pc, #72]	; (8003508 <MX_TIM9_Init+0x84>)
 80034be:	2200      	movs	r2, #0
 80034c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80034c2:	4811      	ldr	r0, [pc, #68]	; (8003508 <MX_TIM9_Init+0x84>)
 80034c4:	f002 f99a 	bl	80057fc <HAL_TIM_PWM_Init>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80034ce:	f7ff f8dd 	bl	800268c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034d2:	2360      	movs	r3, #96	; 0x60
 80034d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034e2:	1d3b      	adds	r3, r7, #4
 80034e4:	2200      	movs	r2, #0
 80034e6:	4619      	mov	r1, r3
 80034e8:	4807      	ldr	r0, [pc, #28]	; (8003508 <MX_TIM9_Init+0x84>)
 80034ea:	f002 fcdb 	bl	8005ea4 <HAL_TIM_PWM_ConfigChannel>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80034f4:	f7ff f8ca 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80034f8:	4803      	ldr	r0, [pc, #12]	; (8003508 <MX_TIM9_Init+0x84>)
 80034fa:	f000 faad 	bl	8003a58 <HAL_TIM_MspPostInit>

}
 80034fe:	bf00      	nop
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000608 	.word	0x20000608
 800350c:	40014000 	.word	0x40014000

08003510 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]
 8003524:	615a      	str	r2, [r3, #20]
 8003526:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003528:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <MX_TIM10_Init+0x94>)
 800352a:	4a1f      	ldr	r2, [pc, #124]	; (80035a8 <MX_TIM10_Init+0x98>)
 800352c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <MX_TIM10_Init+0x94>)
 8003530:	22a7      	movs	r2, #167	; 0xa7
 8003532:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <MX_TIM10_Init+0x94>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 500-1;
 800353a:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <MX_TIM10_Init+0x94>)
 800353c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003540:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003542:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <MX_TIM10_Init+0x94>)
 8003544:	2200      	movs	r2, #0
 8003546:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003548:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <MX_TIM10_Init+0x94>)
 800354a:	2200      	movs	r2, #0
 800354c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800354e:	4815      	ldr	r0, [pc, #84]	; (80035a4 <MX_TIM10_Init+0x94>)
 8003550:	f002 f894 	bl	800567c <HAL_TIM_Base_Init>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800355a:	f7ff f897 	bl	800268c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800355e:	4811      	ldr	r0, [pc, #68]	; (80035a4 <MX_TIM10_Init+0x94>)
 8003560:	f002 f94c 	bl	80057fc <HAL_TIM_PWM_Init>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800356a:	f7ff f88f 	bl	800268c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800356e:	2360      	movs	r3, #96	; 0x60
 8003570:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800357e:	1d3b      	adds	r3, r7, #4
 8003580:	2200      	movs	r2, #0
 8003582:	4619      	mov	r1, r3
 8003584:	4807      	ldr	r0, [pc, #28]	; (80035a4 <MX_TIM10_Init+0x94>)
 8003586:	f002 fc8d 	bl	8005ea4 <HAL_TIM_PWM_ConfigChannel>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8003590:	f7ff f87c 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8003594:	4803      	ldr	r0, [pc, #12]	; (80035a4 <MX_TIM10_Init+0x94>)
 8003596:	f000 fa5f 	bl	8003a58 <HAL_TIM_MspPostInit>

}
 800359a:	bf00      	nop
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000650 	.word	0x20000650
 80035a8:	40014400 	.word	0x40014400

080035ac <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
 80035c0:	615a      	str	r2, [r3, #20]
 80035c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80035c4:	4b1f      	ldr	r3, [pc, #124]	; (8003644 <MX_TIM12_Init+0x98>)
 80035c6:	4a20      	ldr	r2, [pc, #128]	; (8003648 <MX_TIM12_Init+0x9c>)
 80035c8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 80035ca:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <MX_TIM12_Init+0x98>)
 80035cc:	2253      	movs	r2, #83	; 0x53
 80035ce:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d0:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <MX_TIM12_Init+0x98>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 500-1;
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <MX_TIM12_Init+0x98>)
 80035d8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80035dc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035de:	4b19      	ldr	r3, [pc, #100]	; (8003644 <MX_TIM12_Init+0x98>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e4:	4b17      	ldr	r3, [pc, #92]	; (8003644 <MX_TIM12_Init+0x98>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80035ea:	4816      	ldr	r0, [pc, #88]	; (8003644 <MX_TIM12_Init+0x98>)
 80035ec:	f002 f906 	bl	80057fc <HAL_TIM_PWM_Init>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80035f6:	f7ff f849 	bl	800268c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035fa:	2360      	movs	r3, #96	; 0x60
 80035fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800360a:	1d3b      	adds	r3, r7, #4
 800360c:	2200      	movs	r2, #0
 800360e:	4619      	mov	r1, r3
 8003610:	480c      	ldr	r0, [pc, #48]	; (8003644 <MX_TIM12_Init+0x98>)
 8003612:	f002 fc47 	bl	8005ea4 <HAL_TIM_PWM_ConfigChannel>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800361c:	f7ff f836 	bl	800268c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003620:	1d3b      	adds	r3, r7, #4
 8003622:	2204      	movs	r2, #4
 8003624:	4619      	mov	r1, r3
 8003626:	4807      	ldr	r0, [pc, #28]	; (8003644 <MX_TIM12_Init+0x98>)
 8003628:	f002 fc3c 	bl	8005ea4 <HAL_TIM_PWM_ConfigChannel>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8003632:	f7ff f82b 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003636:	4803      	ldr	r0, [pc, #12]	; (8003644 <MX_TIM12_Init+0x98>)
 8003638:	f000 fa0e 	bl	8003a58 <HAL_TIM_MspPostInit>

}
 800363c:	bf00      	nop
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000698 	.word	0x20000698
 8003648:	40001800 	.word	0x40001800

0800364c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b094      	sub	sp, #80	; 0x50
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003654:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a8b      	ldr	r2, [pc, #556]	; (8003898 <HAL_TIM_Encoder_MspInit+0x24c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d12d      	bne.n	80036ca <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	63bb      	str	r3, [r7, #56]	; 0x38
 8003672:	4b8a      	ldr	r3, [pc, #552]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	4a89      	ldr	r2, [pc, #548]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6453      	str	r3, [r2, #68]	; 0x44
 800367e:	4b87      	ldr	r3, [pc, #540]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	63bb      	str	r3, [r7, #56]	; 0x38
 8003688:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
 800368e:	4b83      	ldr	r3, [pc, #524]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	4a82      	ldr	r2, [pc, #520]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003694:	f043 0310 	orr.w	r3, r3, #16
 8003698:	6313      	str	r3, [r2, #48]	; 0x30
 800369a:	4b80      	ldr	r3, [pc, #512]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	637b      	str	r3, [r7, #52]	; 0x34
 80036a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC0_A_Pin|ENC0_B_Pin;
 80036a6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ac:	2302      	movs	r3, #2
 80036ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b4:	2300      	movs	r3, #0
 80036b6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036b8:	2301      	movs	r3, #1
 80036ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036c0:	4619      	mov	r1, r3
 80036c2:	4877      	ldr	r0, [pc, #476]	; (80038a0 <HAL_TIM_Encoder_MspInit+0x254>)
 80036c4:	f001 f98c 	bl	80049e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80036c8:	e127      	b.n	800391a <HAL_TIM_Encoder_MspInit+0x2ce>
  else if(tim_encoderHandle->Instance==TIM2)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d2:	d14b      	bne.n	800376c <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036d4:	2300      	movs	r3, #0
 80036d6:	633b      	str	r3, [r7, #48]	; 0x30
 80036d8:	4b70      	ldr	r3, [pc, #448]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	4a6f      	ldr	r2, [pc, #444]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6413      	str	r3, [r2, #64]	; 0x40
 80036e4:	4b6d      	ldr	r3, [pc, #436]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	633b      	str	r3, [r7, #48]	; 0x30
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f0:	2300      	movs	r3, #0
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f4:	4b69      	ldr	r3, [pc, #420]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	4a68      	ldr	r2, [pc, #416]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003700:	4b66      	ldr	r3, [pc, #408]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800370c:	2300      	movs	r3, #0
 800370e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003710:	4b62      	ldr	r3, [pc, #392]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	4a61      	ldr	r2, [pc, #388]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003716:	f043 0302 	orr.w	r3, r3, #2
 800371a:	6313      	str	r3, [r2, #48]	; 0x30
 800371c:	4b5f      	ldr	r3, [pc, #380]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	62bb      	str	r3, [r7, #40]	; 0x28
 8003726:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = ENC1_A_Pin;
 8003728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800372c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003736:	2300      	movs	r3, #0
 8003738:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800373a:	2301      	movs	r3, #1
 800373c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(ENC1_A_GPIO_Port, &GPIO_InitStruct);
 800373e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003742:	4619      	mov	r1, r3
 8003744:	4857      	ldr	r0, [pc, #348]	; (80038a4 <HAL_TIM_Encoder_MspInit+0x258>)
 8003746:	f001 f94b 	bl	80049e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC1_B_Pin;
 800374a:	2308      	movs	r3, #8
 800374c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374e:	2302      	movs	r3, #2
 8003750:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003756:	2300      	movs	r3, #0
 8003758:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800375a:	2301      	movs	r3, #1
 800375c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(ENC1_B_GPIO_Port, &GPIO_InitStruct);
 800375e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003762:	4619      	mov	r1, r3
 8003764:	4850      	ldr	r0, [pc, #320]	; (80038a8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003766:	f001 f93b 	bl	80049e0 <HAL_GPIO_Init>
}
 800376a:	e0d6      	b.n	800391a <HAL_TIM_Encoder_MspInit+0x2ce>
  else if(tim_encoderHandle->Instance==TIM3)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a4e      	ldr	r2, [pc, #312]	; (80038ac <HAL_TIM_Encoder_MspInit+0x260>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d12c      	bne.n	80037d0 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
 800377a:	4b48      	ldr	r3, [pc, #288]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	4a47      	ldr	r2, [pc, #284]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
 8003786:	4b45      	ldr	r3, [pc, #276]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	623b      	str	r3, [r7, #32]
 8003796:	4b41      	ldr	r3, [pc, #260]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a40      	ldr	r2, [pc, #256]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b3e      	ldr	r3, [pc, #248]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	623b      	str	r3, [r7, #32]
 80037ac:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 80037ae:	2330      	movs	r3, #48	; 0x30
 80037b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ba:	2300      	movs	r3, #0
 80037bc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037be:	2302      	movs	r3, #2
 80037c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037c6:	4619      	mov	r1, r3
 80037c8:	4837      	ldr	r0, [pc, #220]	; (80038a8 <HAL_TIM_Encoder_MspInit+0x25c>)
 80037ca:	f001 f909 	bl	80049e0 <HAL_GPIO_Init>
}
 80037ce:	e0a4      	b.n	800391a <HAL_TIM_Encoder_MspInit+0x2ce>
  else if(tim_encoderHandle->Instance==TIM4)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a36      	ldr	r2, [pc, #216]	; (80038b0 <HAL_TIM_Encoder_MspInit+0x264>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d12c      	bne.n	8003834 <HAL_TIM_Encoder_MspInit+0x1e8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	4b2f      	ldr	r3, [pc, #188]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	4a2e      	ldr	r2, [pc, #184]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ea:	4b2c      	ldr	r3, [pc, #176]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	4b28      	ldr	r3, [pc, #160]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	4a27      	ldr	r2, [pc, #156]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003800:	f043 0302 	orr.w	r3, r3, #2
 8003804:	6313      	str	r3, [r2, #48]	; 0x30
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC3_A_Pin|ENC3_B_Pin;
 8003812:	23c0      	movs	r3, #192	; 0xc0
 8003814:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	2300      	movs	r3, #0
 800381c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381e:	2300      	movs	r3, #0
 8003820:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003822:	2302      	movs	r3, #2
 8003824:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003826:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800382a:	4619      	mov	r1, r3
 800382c:	481e      	ldr	r0, [pc, #120]	; (80038a8 <HAL_TIM_Encoder_MspInit+0x25c>)
 800382e:	f001 f8d7 	bl	80049e0 <HAL_GPIO_Init>
}
 8003832:	e072      	b.n	800391a <HAL_TIM_Encoder_MspInit+0x2ce>
  else if(tim_encoderHandle->Instance==TIM5)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <HAL_TIM_Encoder_MspInit+0x268>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d13c      	bne.n	80038b8 <HAL_TIM_Encoder_MspInit+0x26c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	4b16      	ldr	r3, [pc, #88]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	4a15      	ldr	r2, [pc, #84]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003848:	f043 0308 	orr.w	r3, r3, #8
 800384c:	6413      	str	r3, [r2, #64]	; 0x40
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4a0e      	ldr	r2, [pc, #56]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <HAL_TIM_Encoder_MspInit+0x250>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ODOM1_A_Pin|ODOM1_B_Pin;
 8003876:	2303      	movs	r3, #3
 8003878:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387a:	2302      	movs	r3, #2
 800387c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387e:	2300      	movs	r3, #0
 8003880:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003882:	2300      	movs	r3, #0
 8003884:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003886:	2302      	movs	r3, #2
 8003888:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800388e:	4619      	mov	r1, r3
 8003890:	4804      	ldr	r0, [pc, #16]	; (80038a4 <HAL_TIM_Encoder_MspInit+0x258>)
 8003892:	f001 f8a5 	bl	80049e0 <HAL_GPIO_Init>
}
 8003896:	e040      	b.n	800391a <HAL_TIM_Encoder_MspInit+0x2ce>
 8003898:	40010000 	.word	0x40010000
 800389c:	40023800 	.word	0x40023800
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40020000 	.word	0x40020000
 80038a8:	40020400 	.word	0x40020400
 80038ac:	40000400 	.word	0x40000400
 80038b0:	40000800 	.word	0x40000800
 80038b4:	40000c00 	.word	0x40000c00
  else if(tim_encoderHandle->Instance==TIM8)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_TIM_Encoder_MspInit+0x2d8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d12b      	bne.n	800391a <HAL_TIM_Encoder_MspInit+0x2ce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <HAL_TIM_Encoder_MspInit+0x2dc>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	4a17      	ldr	r2, [pc, #92]	; (8003928 <HAL_TIM_Encoder_MspInit+0x2dc>)
 80038cc:	f043 0302 	orr.w	r3, r3, #2
 80038d0:	6453      	str	r3, [r2, #68]	; 0x44
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <HAL_TIM_Encoder_MspInit+0x2dc>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <HAL_TIM_Encoder_MspInit+0x2dc>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4a10      	ldr	r2, [pc, #64]	; (8003928 <HAL_TIM_Encoder_MspInit+0x2dc>)
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <HAL_TIM_Encoder_MspInit+0x2dc>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ODOM0_A_Pin|ODOM0_B_Pin;
 80038fa:	23c0      	movs	r3, #192	; 0xc0
 80038fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003906:	2300      	movs	r3, #0
 8003908:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800390a:	2303      	movs	r3, #3
 800390c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800390e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003912:	4619      	mov	r1, r3
 8003914:	4805      	ldr	r0, [pc, #20]	; (800392c <HAL_TIM_Encoder_MspInit+0x2e0>)
 8003916:	f001 f863 	bl	80049e0 <HAL_GPIO_Init>
}
 800391a:	bf00      	nop
 800391c:	3750      	adds	r7, #80	; 0x50
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40010400 	.word	0x40010400
 8003928:	40023800 	.word	0x40023800
 800392c:	40020800 	.word	0x40020800

08003930 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <HAL_TIM_Base_MspInit+0xa8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d116      	bne.n	8003970 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	4b25      	ldr	r3, [pc, #148]	; (80039dc <HAL_TIM_Base_MspInit+0xac>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	4a24      	ldr	r2, [pc, #144]	; (80039dc <HAL_TIM_Base_MspInit+0xac>)
 800394c:	f043 0310 	orr.w	r3, r3, #16
 8003950:	6413      	str	r3, [r2, #64]	; 0x40
 8003952:	4b22      	ldr	r3, [pc, #136]	; (80039dc <HAL_TIM_Base_MspInit+0xac>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800395e:	2200      	movs	r2, #0
 8003960:	2100      	movs	r1, #0
 8003962:	2036      	movs	r0, #54	; 0x36
 8003964:	f000 fc03 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003968:	2036      	movs	r0, #54	; 0x36
 800396a:	f000 fc1c 	bl	80041a6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800396e:	e02e      	b.n	80039ce <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM7)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1a      	ldr	r2, [pc, #104]	; (80039e0 <HAL_TIM_Base_MspInit+0xb0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d116      	bne.n	80039a8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_TIM_Base_MspInit+0xac>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	4a16      	ldr	r2, [pc, #88]	; (80039dc <HAL_TIM_Base_MspInit+0xac>)
 8003984:	f043 0320 	orr.w	r3, r3, #32
 8003988:	6413      	str	r3, [r2, #64]	; 0x40
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <HAL_TIM_Base_MspInit+0xac>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003996:	2200      	movs	r2, #0
 8003998:	2100      	movs	r1, #0
 800399a:	2037      	movs	r0, #55	; 0x37
 800399c:	f000 fbe7 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80039a0:	2037      	movs	r0, #55	; 0x37
 80039a2:	f000 fc00 	bl	80041a6 <HAL_NVIC_EnableIRQ>
}
 80039a6:	e012      	b.n	80039ce <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM10)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a0d      	ldr	r2, [pc, #52]	; (80039e4 <HAL_TIM_Base_MspInit+0xb4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d10d      	bne.n	80039ce <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_TIM_Base_MspInit+0xac>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	4a08      	ldr	r2, [pc, #32]	; (80039dc <HAL_TIM_Base_MspInit+0xac>)
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c0:	6453      	str	r3, [r2, #68]	; 0x44
 80039c2:	4b06      	ldr	r3, [pc, #24]	; (80039dc <HAL_TIM_Base_MspInit+0xac>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
}
 80039ce:	bf00      	nop
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40001000 	.word	0x40001000
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40001400 	.word	0x40001400
 80039e4:	40014400 	.word	0x40014400

080039e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <HAL_TIM_PWM_MspInit+0x64>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10e      	bne.n	8003a18 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <HAL_TIM_PWM_MspInit+0x68>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <HAL_TIM_PWM_MspInit+0x68>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a08:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0a:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <HAL_TIM_PWM_MspInit+0x68>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003a16:	e012      	b.n	8003a3e <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <HAL_TIM_PWM_MspInit+0x6c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d10d      	bne.n	8003a3e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_TIM_PWM_MspInit+0x68>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <HAL_TIM_PWM_MspInit+0x68>)
 8003a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
 8003a32:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <HAL_TIM_PWM_MspInit+0x68>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40001800 	.word	0x40001800

08003a58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a37      	ldr	r2, [pc, #220]	; (8003b54 <HAL_TIM_MspPostInit+0xfc>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d11e      	bne.n	8003ab8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <HAL_TIM_MspPostInit+0x100>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	4a35      	ldr	r2, [pc, #212]	; (8003b58 <HAL_TIM_MspPostInit+0x100>)
 8003a84:	f043 0310 	orr.w	r3, r3, #16
 8003a88:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8a:	4b33      	ldr	r3, [pc, #204]	; (8003b58 <HAL_TIM_MspPostInit+0x100>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = M3_PWM_Pin;
 8003a96:	2320      	movs	r3, #32
 8003a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003aaa:	f107 0314 	add.w	r3, r7, #20
 8003aae:	4619      	mov	r1, r3
 8003ab0:	482a      	ldr	r0, [pc, #168]	; (8003b5c <HAL_TIM_MspPostInit+0x104>)
 8003ab2:	f000 ff95 	bl	80049e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003ab6:	e048      	b.n	8003b4a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM10)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a28      	ldr	r2, [pc, #160]	; (8003b60 <HAL_TIM_MspPostInit+0x108>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d11f      	bne.n	8003b02 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_TIM_MspPostInit+0x100>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4a23      	ldr	r2, [pc, #140]	; (8003b58 <HAL_TIM_MspPostInit+0x100>)
 8003acc:	f043 0302 	orr.w	r3, r3, #2
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <HAL_TIM_MspPostInit+0x100>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aec:	2300      	movs	r3, #0
 8003aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003af0:	2303      	movs	r3, #3
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	4619      	mov	r1, r3
 8003afa:	481a      	ldr	r0, [pc, #104]	; (8003b64 <HAL_TIM_MspPostInit+0x10c>)
 8003afc:	f000 ff70 	bl	80049e0 <HAL_GPIO_Init>
}
 8003b00:	e023      	b.n	8003b4a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM12)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a18      	ldr	r2, [pc, #96]	; (8003b68 <HAL_TIM_MspPostInit+0x110>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d11e      	bne.n	8003b4a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60bb      	str	r3, [r7, #8]
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <HAL_TIM_MspPostInit+0x100>)
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	4a10      	ldr	r2, [pc, #64]	; (8003b58 <HAL_TIM_MspPostInit+0x100>)
 8003b16:	f043 0302 	orr.w	r3, r3, #2
 8003b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <HAL_TIM_MspPostInit+0x100>)
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_PWM_Pin|M0_PWM_Pin;
 8003b28:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b36:	2300      	movs	r3, #0
 8003b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003b3a:	2309      	movs	r3, #9
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3e:	f107 0314 	add.w	r3, r7, #20
 8003b42:	4619      	mov	r1, r3
 8003b44:	4807      	ldr	r0, [pc, #28]	; (8003b64 <HAL_TIM_MspPostInit+0x10c>)
 8003b46:	f000 ff4b 	bl	80049e0 <HAL_GPIO_Init>
}
 8003b4a:	bf00      	nop
 8003b4c:	3728      	adds	r7, #40	; 0x28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40014400 	.word	0x40014400
 8003b64:	40020400 	.word	0x40020400
 8003b68:	40001800 	.word	0x40001800

08003b6c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <MX_USART1_UART_Init+0x4c>)
 8003b72:	4a12      	ldr	r2, [pc, #72]	; (8003bbc <MX_USART1_UART_Init+0x50>)
 8003b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <MX_USART1_UART_Init+0x4c>)
 8003b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <MX_USART1_UART_Init+0x4c>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <MX_USART1_UART_Init+0x4c>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <MX_USART1_UART_Init+0x4c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <MX_USART1_UART_Init+0x4c>)
 8003b92:	220c      	movs	r2, #12
 8003b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <MX_USART1_UART_Init+0x4c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <MX_USART1_UART_Init+0x4c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ba2:	4805      	ldr	r0, [pc, #20]	; (8003bb8 <MX_USART1_UART_Init+0x4c>)
 8003ba4:	f002 fd6e 	bl	8006684 <HAL_UART_Init>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003bae:	f7fe fd6d 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	200006e0 	.word	0x200006e0
 8003bbc:	40011000 	.word	0x40011000

08003bc0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003bc4:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <MX_USART2_UART_Init+0x4c>)
 8003bc6:	4a12      	ldr	r2, [pc, #72]	; (8003c10 <MX_USART2_UART_Init+0x50>)
 8003bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <MX_USART2_UART_Init+0x4c>)
 8003bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bd2:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <MX_USART2_UART_Init+0x4c>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <MX_USART2_UART_Init+0x4c>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <MX_USART2_UART_Init+0x4c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003be4:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <MX_USART2_UART_Init+0x4c>)
 8003be6:	220c      	movs	r2, #12
 8003be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <MX_USART2_UART_Init+0x4c>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <MX_USART2_UART_Init+0x4c>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bf6:	4805      	ldr	r0, [pc, #20]	; (8003c0c <MX_USART2_UART_Init+0x4c>)
 8003bf8:	f002 fd44 	bl	8006684 <HAL_UART_Init>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003c02:	f7fe fd43 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000724 	.word	0x20000724
 8003c10:	40004400 	.word	0x40004400

08003c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08c      	sub	sp, #48	; 0x30
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c1c:	f107 031c 	add.w	r3, r7, #28
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a78      	ldr	r2, [pc, #480]	; (8003e14 <HAL_UART_MspInit+0x200>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d135      	bne.n	8003ca2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	4b77      	ldr	r3, [pc, #476]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	4a76      	ldr	r2, [pc, #472]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003c40:	f043 0310 	orr.w	r3, r3, #16
 8003c44:	6453      	str	r3, [r2, #68]	; 0x44
 8003c46:	4b74      	ldr	r3, [pc, #464]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	4b70      	ldr	r3, [pc, #448]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a6f      	ldr	r2, [pc, #444]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c80:	2307      	movs	r3, #7
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c84:	f107 031c 	add.w	r3, r7, #28
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4864      	ldr	r0, [pc, #400]	; (8003e1c <HAL_UART_MspInit+0x208>)
 8003c8c:	f000 fea8 	bl	80049e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c90:	2200      	movs	r2, #0
 8003c92:	2100      	movs	r1, #0
 8003c94:	2025      	movs	r0, #37	; 0x25
 8003c96:	f000 fa6a 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c9a:	2025      	movs	r0, #37	; 0x25
 8003c9c:	f000 fa83 	bl	80041a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003ca0:	e0b3      	b.n	8003e0a <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART2)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a5e      	ldr	r2, [pc, #376]	; (8003e20 <HAL_UART_MspInit+0x20c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	f040 80ae 	bne.w	8003e0a <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	4b59      	ldr	r3, [pc, #356]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	4a58      	ldr	r2, [pc, #352]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cbe:	4b56      	ldr	r3, [pc, #344]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	4b52      	ldr	r3, [pc, #328]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4a51      	ldr	r2, [pc, #324]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cda:	4b4f      	ldr	r3, [pc, #316]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	4b4b      	ldr	r3, [pc, #300]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	4a4a      	ldr	r2, [pc, #296]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003cf0:	f043 0308 	orr.w	r3, r3, #8
 8003cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf6:	4b48      	ldr	r3, [pc, #288]	; (8003e18 <HAL_UART_MspInit+0x204>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d02:	2308      	movs	r3, #8
 8003d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d06:	2302      	movs	r3, #2
 8003d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d12:	2307      	movs	r3, #7
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d16:	f107 031c 	add.w	r3, r7, #28
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	483f      	ldr	r0, [pc, #252]	; (8003e1c <HAL_UART_MspInit+0x208>)
 8003d1e:	f000 fe5f 	bl	80049e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003d22:	2320      	movs	r3, #32
 8003d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d26:	2302      	movs	r3, #2
 8003d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d32:	2307      	movs	r3, #7
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d36:	f107 031c 	add.w	r3, r7, #28
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4839      	ldr	r0, [pc, #228]	; (8003e24 <HAL_UART_MspInit+0x210>)
 8003d3e:	f000 fe4f 	bl	80049e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003d42:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <HAL_UART_MspInit+0x214>)
 8003d44:	4a39      	ldr	r2, [pc, #228]	; (8003e2c <HAL_UART_MspInit+0x218>)
 8003d46:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003d48:	4b37      	ldr	r3, [pc, #220]	; (8003e28 <HAL_UART_MspInit+0x214>)
 8003d4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d4e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d50:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <HAL_UART_MspInit+0x214>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d56:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <HAL_UART_MspInit+0x214>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d5c:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <HAL_UART_MspInit+0x214>)
 8003d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d62:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d64:	4b30      	ldr	r3, [pc, #192]	; (8003e28 <HAL_UART_MspInit+0x214>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d6a:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <HAL_UART_MspInit+0x214>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003d70:	4b2d      	ldr	r3, [pc, #180]	; (8003e28 <HAL_UART_MspInit+0x214>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d76:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <HAL_UART_MspInit+0x214>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d7c:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <HAL_UART_MspInit+0x214>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003d82:	4829      	ldr	r0, [pc, #164]	; (8003e28 <HAL_UART_MspInit+0x214>)
 8003d84:	f000 fa2a 	bl	80041dc <HAL_DMA_Init>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8003d8e:	f7fe fc7d 	bl	800268c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a24      	ldr	r2, [pc, #144]	; (8003e28 <HAL_UART_MspInit+0x214>)
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
 8003d98:	4a23      	ldr	r2, [pc, #140]	; (8003e28 <HAL_UART_MspInit+0x214>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003d9e:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <HAL_UART_MspInit+0x21c>)
 8003da0:	4a24      	ldr	r2, [pc, #144]	; (8003e34 <HAL_UART_MspInit+0x220>)
 8003da2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003da4:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <HAL_UART_MspInit+0x21c>)
 8003da6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003daa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dac:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <HAL_UART_MspInit+0x21c>)
 8003dae:	2240      	movs	r2, #64	; 0x40
 8003db0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <HAL_UART_MspInit+0x21c>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003db8:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_UART_MspInit+0x21c>)
 8003dba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dbe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_UART_MspInit+0x21c>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dc6:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <HAL_UART_MspInit+0x21c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003dcc:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <HAL_UART_MspInit+0x21c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003dd2:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <HAL_UART_MspInit+0x21c>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dd8:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <HAL_UART_MspInit+0x21c>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003dde:	4814      	ldr	r0, [pc, #80]	; (8003e30 <HAL_UART_MspInit+0x21c>)
 8003de0:	f000 f9fc 	bl	80041dc <HAL_DMA_Init>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8003dea:	f7fe fc4f 	bl	800268c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a0f      	ldr	r2, [pc, #60]	; (8003e30 <HAL_UART_MspInit+0x21c>)
 8003df2:	635a      	str	r2, [r3, #52]	; 0x34
 8003df4:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <HAL_UART_MspInit+0x21c>)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	2026      	movs	r0, #38	; 0x26
 8003e00:	f000 f9b5 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e04:	2026      	movs	r0, #38	; 0x26
 8003e06:	f000 f9ce 	bl	80041a6 <HAL_NVIC_EnableIRQ>
}
 8003e0a:	bf00      	nop
 8003e0c:	3730      	adds	r7, #48	; 0x30
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40011000 	.word	0x40011000
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40020000 	.word	0x40020000
 8003e20:	40004400 	.word	0x40004400
 8003e24:	40020c00 	.word	0x40020c00
 8003e28:	20000768 	.word	0x20000768
 8003e2c:	40026088 	.word	0x40026088
 8003e30:	200007c8 	.word	0x200007c8
 8003e34:	400260a0 	.word	0x400260a0

08003e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e3c:	480d      	ldr	r0, [pc, #52]	; (8003e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e3e:	490e      	ldr	r1, [pc, #56]	; (8003e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e40:	4a0e      	ldr	r2, [pc, #56]	; (8003e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e44:	e002      	b.n	8003e4c <LoopCopyDataInit>

08003e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e4a:	3304      	adds	r3, #4

08003e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e50:	d3f9      	bcc.n	8003e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e52:	4a0b      	ldr	r2, [pc, #44]	; (8003e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e54:	4c0b      	ldr	r4, [pc, #44]	; (8003e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e58:	e001      	b.n	8003e5e <LoopFillZerobss>

08003e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e5c:	3204      	adds	r2, #4

08003e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e60:	d3fb      	bcc.n	8003e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e62:	f7ff f891 	bl	8002f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e66:	f003 fec7 	bl	8007bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e6a:	f7fd fed5 	bl	8001c18 <main>
  bx  lr    
 8003e6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e78:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8003e7c:	0800bda4 	.word	0x0800bda4
  ldr r2, =_sbss
 8003e80:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8003e84:	2000083c 	.word	0x2000083c

08003e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e88:	e7fe      	b.n	8003e88 <ADC_IRQHandler>
	...

08003e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e90:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <HAL_Init+0x40>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0d      	ldr	r2, [pc, #52]	; (8003ecc <HAL_Init+0x40>)
 8003e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_Init+0x40>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <HAL_Init+0x40>)
 8003ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ea8:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <HAL_Init+0x40>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <HAL_Init+0x40>)
 8003eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eb4:	2003      	movs	r0, #3
 8003eb6:	f000 f94f 	bl	8004158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eba:	200f      	movs	r0, #15
 8003ebc:	f000 f808 	bl	8003ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ec0:	f7fe ff0e 	bl	8002ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023c00 	.word	0x40023c00

08003ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ed8:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <HAL_InitTick+0x54>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <HAL_InitTick+0x58>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f967 	bl	80041c2 <HAL_SYSTICK_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e00e      	b.n	8003f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b0f      	cmp	r3, #15
 8003f02:	d80a      	bhi.n	8003f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f04:	2200      	movs	r2, #0
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f0c:	f000 f92f 	bl	800416e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f10:	4a06      	ldr	r2, [pc, #24]	; (8003f2c <HAL_InitTick+0x5c>)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e000      	b.n	8003f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000038 	.word	0x20000038
 8003f28:	20000040 	.word	0x20000040
 8003f2c:	2000003c 	.word	0x2000003c

08003f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_IncTick+0x20>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_IncTick+0x24>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4413      	add	r3, r2
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <HAL_IncTick+0x24>)
 8003f42:	6013      	str	r3, [r2, #0]
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	20000040 	.word	0x20000040
 8003f54:	20000828 	.word	0x20000828

08003f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <HAL_GetTick+0x14>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000828 	.word	0x20000828

08003f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f78:	f7ff ffee 	bl	8003f58 <HAL_GetTick>
 8003f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f88:	d005      	beq.n	8003f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <HAL_Delay+0x44>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f96:	bf00      	nop
 8003f98:	f7ff ffde 	bl	8003f58 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d8f7      	bhi.n	8003f98 <HAL_Delay+0x28>
  {
  }
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000040 	.word	0x20000040

08003fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <__NVIC_SetPriorityGrouping+0x44>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fea:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <__NVIC_SetPriorityGrouping+0x44>)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	60d3      	str	r3, [r2, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <__NVIC_GetPriorityGrouping+0x18>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	0a1b      	lsrs	r3, r3, #8
 800400a:	f003 0307 	and.w	r3, r3, #7
}
 800400e:	4618      	mov	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402a:	2b00      	cmp	r3, #0
 800402c:	db0b      	blt.n	8004046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	f003 021f 	and.w	r2, r3, #31
 8004034:	4907      	ldr	r1, [pc, #28]	; (8004054 <__NVIC_EnableIRQ+0x38>)
 8004036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	2001      	movs	r0, #1
 800403e:	fa00 f202 	lsl.w	r2, r0, r2
 8004042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	e000e100 	.word	0xe000e100

08004058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	6039      	str	r1, [r7, #0]
 8004062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004068:	2b00      	cmp	r3, #0
 800406a:	db0a      	blt.n	8004082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	b2da      	uxtb	r2, r3
 8004070:	490c      	ldr	r1, [pc, #48]	; (80040a4 <__NVIC_SetPriority+0x4c>)
 8004072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004076:	0112      	lsls	r2, r2, #4
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	440b      	add	r3, r1
 800407c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004080:	e00a      	b.n	8004098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	4908      	ldr	r1, [pc, #32]	; (80040a8 <__NVIC_SetPriority+0x50>)
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	3b04      	subs	r3, #4
 8004090:	0112      	lsls	r2, r2, #4
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	440b      	add	r3, r1
 8004096:	761a      	strb	r2, [r3, #24]
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	e000e100 	.word	0xe000e100
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	; 0x24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f1c3 0307 	rsb	r3, r3, #7
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	bf28      	it	cs
 80040ca:	2304      	movcs	r3, #4
 80040cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3304      	adds	r3, #4
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d902      	bls.n	80040dc <NVIC_EncodePriority+0x30>
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3b03      	subs	r3, #3
 80040da:	e000      	b.n	80040de <NVIC_EncodePriority+0x32>
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43da      	mvns	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	401a      	ands	r2, r3
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fa01 f303 	lsl.w	r3, r1, r3
 80040fe:	43d9      	mvns	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004104:	4313      	orrs	r3, r2
         );
}
 8004106:	4618      	mov	r0, r3
 8004108:	3724      	adds	r7, #36	; 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004124:	d301      	bcc.n	800412a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004126:	2301      	movs	r3, #1
 8004128:	e00f      	b.n	800414a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <SysTick_Config+0x40>)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3b01      	subs	r3, #1
 8004130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004132:	210f      	movs	r1, #15
 8004134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004138:	f7ff ff8e 	bl	8004058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <SysTick_Config+0x40>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <SysTick_Config+0x40>)
 8004144:	2207      	movs	r2, #7
 8004146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	e000e010 	.word	0xe000e010

08004158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ff29 	bl	8003fb8 <__NVIC_SetPriorityGrouping>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	4603      	mov	r3, r0
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004180:	f7ff ff3e 	bl	8004000 <__NVIC_GetPriorityGrouping>
 8004184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f7ff ff8e 	bl	80040ac <NVIC_EncodePriority>
 8004190:	4602      	mov	r2, r0
 8004192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ff5d 	bl	8004058 <__NVIC_SetPriority>
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	4603      	mov	r3, r0
 80041ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff ff31 	bl	800401c <__NVIC_EnableIRQ>
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ffa2 	bl	8004114 <SysTick_Config>
 80041d0:	4603      	mov	r3, r0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041e8:	f7ff feb6 	bl	8003f58 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e099      	b.n	800432c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004218:	e00f      	b.n	800423a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800421a:	f7ff fe9d 	bl	8003f58 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b05      	cmp	r3, #5
 8004226:	d908      	bls.n	800423a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2203      	movs	r2, #3
 8004232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e078      	b.n	800432c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e8      	bne.n	800421a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4b38      	ldr	r3, [pc, #224]	; (8004334 <HAL_DMA_Init+0x158>)
 8004254:	4013      	ands	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004266:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004272:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800427e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	2b04      	cmp	r3, #4
 8004292:	d107      	bne.n	80042a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	4313      	orrs	r3, r2
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0307 	bic.w	r3, r3, #7
 80042ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d117      	bne.n	80042fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00e      	beq.n	80042fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fb01 	bl	80048e8 <DMA_CheckFifoParam>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2240      	movs	r2, #64	; 0x40
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80042fa:	2301      	movs	r3, #1
 80042fc:	e016      	b.n	800432c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fab8 	bl	800487c <DMA_CalcBaseAndBitshift>
 800430c:	4603      	mov	r3, r0
 800430e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004314:	223f      	movs	r2, #63	; 0x3f
 8004316:	409a      	lsls	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	f010803f 	.word	0xf010803f

08004338 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_DMA_Start_IT+0x26>
 800435a:	2302      	movs	r3, #2
 800435c:	e040      	b.n	80043e0 <HAL_DMA_Start_IT+0xa8>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	d12f      	bne.n	80043d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fa4a 	bl	8004820 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004390:	223f      	movs	r2, #63	; 0x3f
 8004392:	409a      	lsls	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0216 	orr.w	r2, r2, #22
 80043a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0208 	orr.w	r2, r2, #8
 80043be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	e005      	b.n	80043de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043da:	2302      	movs	r3, #2
 80043dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043f6:	f7ff fdaf 	bl	8003f58 <HAL_GetTick>
 80043fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d008      	beq.n	800441a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2280      	movs	r2, #128	; 0x80
 800440c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e052      	b.n	80044c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0216 	bic.w	r2, r2, #22
 8004428:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004438:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <HAL_DMA_Abort+0x62>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0208 	bic.w	r2, r2, #8
 8004458:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800446a:	e013      	b.n	8004494 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800446c:	f7ff fd74 	bl	8003f58 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b05      	cmp	r3, #5
 8004478:	d90c      	bls.n	8004494 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2203      	movs	r2, #3
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e015      	b.n	80044c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e4      	bne.n	800446c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a6:	223f      	movs	r2, #63	; 0x3f
 80044a8:	409a      	lsls	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d004      	beq.n	80044e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2280      	movs	r2, #128	; 0x80
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e00c      	b.n	8004500 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2205      	movs	r2, #5
 80044ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004518:	4b8e      	ldr	r3, [pc, #568]	; (8004754 <HAL_DMA_IRQHandler+0x248>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a8e      	ldr	r2, [pc, #568]	; (8004758 <HAL_DMA_IRQHandler+0x24c>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	0a9b      	lsrs	r3, r3, #10
 8004524:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004536:	2208      	movs	r2, #8
 8004538:	409a      	lsls	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01a      	beq.n	8004578 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d013      	beq.n	8004578 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0204 	bic.w	r2, r2, #4
 800455e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	2208      	movs	r2, #8
 8004566:	409a      	lsls	r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004570:	f043 0201 	orr.w	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457c:	2201      	movs	r2, #1
 800457e:	409a      	lsls	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d012      	beq.n	80045ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459a:	2201      	movs	r2, #1
 800459c:	409a      	lsls	r2, r3
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	f043 0202 	orr.w	r2, r3, #2
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b2:	2204      	movs	r2, #4
 80045b4:	409a      	lsls	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d012      	beq.n	80045e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d0:	2204      	movs	r2, #4
 80045d2:	409a      	lsls	r2, r3
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045dc:	f043 0204 	orr.w	r2, r3, #4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	2210      	movs	r2, #16
 80045ea:	409a      	lsls	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d043      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d03c      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004606:	2210      	movs	r2, #16
 8004608:	409a      	lsls	r2, r3
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d018      	beq.n	800464e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d108      	bne.n	800463c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	d024      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
 800463a:	e01f      	b.n	800467c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01b      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	4798      	blx	r3
 800464c:	e016      	b.n	800467c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d107      	bne.n	800466c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0208 	bic.w	r2, r2, #8
 800466a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004680:	2220      	movs	r2, #32
 8004682:	409a      	lsls	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 808f 	beq.w	80047ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8087 	beq.w	80047ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a2:	2220      	movs	r2, #32
 80046a4:	409a      	lsls	r2, r3
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b05      	cmp	r3, #5
 80046b4:	d136      	bne.n	8004724 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0216 	bic.w	r2, r2, #22
 80046c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <HAL_DMA_IRQHandler+0x1da>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0208 	bic.w	r2, r2, #8
 80046f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fa:	223f      	movs	r2, #63	; 0x3f
 80046fc:	409a      	lsls	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	2b00      	cmp	r3, #0
 8004718:	d07e      	beq.n	8004818 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	4798      	blx	r3
        }
        return;
 8004722:	e079      	b.n	8004818 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01d      	beq.n	800476e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10d      	bne.n	800475c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004744:	2b00      	cmp	r3, #0
 8004746:	d031      	beq.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
 8004750:	e02c      	b.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
 8004752:	bf00      	nop
 8004754:	20000038 	.word	0x20000038
 8004758:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d023      	beq.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	4798      	blx	r3
 800476c:	e01e      	b.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10f      	bne.n	800479c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0210 	bic.w	r2, r2, #16
 800478a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d032      	beq.n	800481a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d022      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2205      	movs	r2, #5
 80047c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	3301      	adds	r3, #1
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d307      	bcc.n	80047f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f2      	bne.n	80047d8 <HAL_DMA_IRQHandler+0x2cc>
 80047f2:	e000      	b.n	80047f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80047f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
 8004816:	e000      	b.n	800481a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004818:	bf00      	nop
    }
  }
}
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800483c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d108      	bne.n	8004860 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800485e:	e007      	b.n	8004870 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]
}
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	3b10      	subs	r3, #16
 800488c:	4a14      	ldr	r2, [pc, #80]	; (80048e0 <DMA_CalcBaseAndBitshift+0x64>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004896:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d909      	bls.n	80048be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	1d1a      	adds	r2, r3, #4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	659a      	str	r2, [r3, #88]	; 0x58
 80048bc:	e007      	b.n	80048ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	aaaaaaab 	.word	0xaaaaaaab
 80048e4:	0800b5e4 	.word	0x0800b5e4

080048e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d11f      	bne.n	8004942 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d856      	bhi.n	80049b6 <DMA_CheckFifoParam+0xce>
 8004908:	a201      	add	r2, pc, #4	; (adr r2, 8004910 <DMA_CheckFifoParam+0x28>)
 800490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490e:	bf00      	nop
 8004910:	08004921 	.word	0x08004921
 8004914:	08004933 	.word	0x08004933
 8004918:	08004921 	.word	0x08004921
 800491c:	080049b7 	.word	0x080049b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d046      	beq.n	80049ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004930:	e043      	b.n	80049ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800493a:	d140      	bne.n	80049be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004940:	e03d      	b.n	80049be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494a:	d121      	bne.n	8004990 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b03      	cmp	r3, #3
 8004950:	d837      	bhi.n	80049c2 <DMA_CheckFifoParam+0xda>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <DMA_CheckFifoParam+0x70>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	08004969 	.word	0x08004969
 800495c:	0800496f 	.word	0x0800496f
 8004960:	08004969 	.word	0x08004969
 8004964:	08004981 	.word	0x08004981
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	e030      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d025      	beq.n	80049c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800497e:	e022      	b.n	80049c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004988:	d11f      	bne.n	80049ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800498e:	e01c      	b.n	80049ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d903      	bls.n	800499e <DMA_CheckFifoParam+0xb6>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b03      	cmp	r3, #3
 800499a:	d003      	beq.n	80049a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800499c:	e018      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
      break;
 80049a2:	e015      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00e      	beq.n	80049ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
      break;
 80049b4:	e00b      	b.n	80049ce <DMA_CheckFifoParam+0xe6>
      break;
 80049b6:	bf00      	nop
 80049b8:	e00a      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049ba:	bf00      	nop
 80049bc:	e008      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049be:	bf00      	nop
 80049c0:	e006      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049c2:	bf00      	nop
 80049c4:	e004      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049c6:	bf00      	nop
 80049c8:	e002      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80049ca:	bf00      	nop
 80049cc:	e000      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049ce:	bf00      	nop
    }
  } 
  
  return status; 
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop

080049e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	e16b      	b.n	8004cd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049fc:	2201      	movs	r2, #1
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	f040 815a 	bne.w	8004cce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d005      	beq.n	8004a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d130      	bne.n	8004a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a68:	2201      	movs	r2, #1
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4013      	ands	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 0201 	and.w	r2, r3, #1
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d017      	beq.n	8004ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	2203      	movs	r2, #3
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d123      	bne.n	8004b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	08da      	lsrs	r2, r3, #3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3208      	adds	r2, #8
 8004ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	220f      	movs	r2, #15
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	43db      	mvns	r3, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4013      	ands	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	08da      	lsrs	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3208      	adds	r2, #8
 8004b1e:	69b9      	ldr	r1, [r7, #24]
 8004b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	2203      	movs	r2, #3
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 0203 	and.w	r2, r3, #3
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80b4 	beq.w	8004cce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	4b60      	ldr	r3, [pc, #384]	; (8004cec <HAL_GPIO_Init+0x30c>)
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6e:	4a5f      	ldr	r2, [pc, #380]	; (8004cec <HAL_GPIO_Init+0x30c>)
 8004b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b74:	6453      	str	r3, [r2, #68]	; 0x44
 8004b76:	4b5d      	ldr	r3, [pc, #372]	; (8004cec <HAL_GPIO_Init+0x30c>)
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b82:	4a5b      	ldr	r2, [pc, #364]	; (8004cf0 <HAL_GPIO_Init+0x310>)
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	089b      	lsrs	r3, r3, #2
 8004b88:	3302      	adds	r3, #2
 8004b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	220f      	movs	r2, #15
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a52      	ldr	r2, [pc, #328]	; (8004cf4 <HAL_GPIO_Init+0x314>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d02b      	beq.n	8004c06 <HAL_GPIO_Init+0x226>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a51      	ldr	r2, [pc, #324]	; (8004cf8 <HAL_GPIO_Init+0x318>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d025      	beq.n	8004c02 <HAL_GPIO_Init+0x222>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a50      	ldr	r2, [pc, #320]	; (8004cfc <HAL_GPIO_Init+0x31c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01f      	beq.n	8004bfe <HAL_GPIO_Init+0x21e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a4f      	ldr	r2, [pc, #316]	; (8004d00 <HAL_GPIO_Init+0x320>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d019      	beq.n	8004bfa <HAL_GPIO_Init+0x21a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a4e      	ldr	r2, [pc, #312]	; (8004d04 <HAL_GPIO_Init+0x324>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d013      	beq.n	8004bf6 <HAL_GPIO_Init+0x216>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a4d      	ldr	r2, [pc, #308]	; (8004d08 <HAL_GPIO_Init+0x328>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00d      	beq.n	8004bf2 <HAL_GPIO_Init+0x212>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a4c      	ldr	r2, [pc, #304]	; (8004d0c <HAL_GPIO_Init+0x32c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d007      	beq.n	8004bee <HAL_GPIO_Init+0x20e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a4b      	ldr	r2, [pc, #300]	; (8004d10 <HAL_GPIO_Init+0x330>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d101      	bne.n	8004bea <HAL_GPIO_Init+0x20a>
 8004be6:	2307      	movs	r3, #7
 8004be8:	e00e      	b.n	8004c08 <HAL_GPIO_Init+0x228>
 8004bea:	2308      	movs	r3, #8
 8004bec:	e00c      	b.n	8004c08 <HAL_GPIO_Init+0x228>
 8004bee:	2306      	movs	r3, #6
 8004bf0:	e00a      	b.n	8004c08 <HAL_GPIO_Init+0x228>
 8004bf2:	2305      	movs	r3, #5
 8004bf4:	e008      	b.n	8004c08 <HAL_GPIO_Init+0x228>
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	e006      	b.n	8004c08 <HAL_GPIO_Init+0x228>
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e004      	b.n	8004c08 <HAL_GPIO_Init+0x228>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e002      	b.n	8004c08 <HAL_GPIO_Init+0x228>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <HAL_GPIO_Init+0x228>
 8004c06:	2300      	movs	r3, #0
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	f002 0203 	and.w	r2, r2, #3
 8004c0e:	0092      	lsls	r2, r2, #2
 8004c10:	4093      	lsls	r3, r2
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c18:	4935      	ldr	r1, [pc, #212]	; (8004cf0 <HAL_GPIO_Init+0x310>)
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	089b      	lsrs	r3, r3, #2
 8004c1e:	3302      	adds	r3, #2
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c26:	4b3b      	ldr	r3, [pc, #236]	; (8004d14 <HAL_GPIO_Init+0x334>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4013      	ands	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c4a:	4a32      	ldr	r2, [pc, #200]	; (8004d14 <HAL_GPIO_Init+0x334>)
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c50:	4b30      	ldr	r3, [pc, #192]	; (8004d14 <HAL_GPIO_Init+0x334>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c74:	4a27      	ldr	r2, [pc, #156]	; (8004d14 <HAL_GPIO_Init+0x334>)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c7a:	4b26      	ldr	r3, [pc, #152]	; (8004d14 <HAL_GPIO_Init+0x334>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	43db      	mvns	r3, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4013      	ands	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c9e:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <HAL_GPIO_Init+0x334>)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ca4:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_GPIO_Init+0x334>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	43db      	mvns	r3, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cc8:	4a12      	ldr	r2, [pc, #72]	; (8004d14 <HAL_GPIO_Init+0x334>)
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b0f      	cmp	r3, #15
 8004cd8:	f67f ae90 	bls.w	80049fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	3724      	adds	r7, #36	; 0x24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40013800 	.word	0x40013800
 8004cf4:	40020000 	.word	0x40020000
 8004cf8:	40020400 	.word	0x40020400
 8004cfc:	40020800 	.word	0x40020800
 8004d00:	40020c00 	.word	0x40020c00
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40021400 	.word	0x40021400
 8004d0c:	40021800 	.word	0x40021800
 8004d10:	40021c00 	.word	0x40021c00
 8004d14:	40013c00 	.word	0x40013c00

08004d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	807b      	strh	r3, [r7, #2]
 8004d24:	4613      	mov	r3, r2
 8004d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d28:	787b      	ldrb	r3, [r7, #1]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d2e:	887a      	ldrh	r2, [r7, #2]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d34:	e003      	b.n	8004d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d36:	887b      	ldrh	r3, [r7, #2]
 8004d38:	041a      	lsls	r2, r3, #16
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	619a      	str	r2, [r3, #24]
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
	...

08004d4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e267      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d075      	beq.n	8004e56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d6a:	4b88      	ldr	r3, [pc, #544]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d00c      	beq.n	8004d90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d76:	4b85      	ldr	r3, [pc, #532]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d112      	bne.n	8004da8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d82:	4b82      	ldr	r3, [pc, #520]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d8e:	d10b      	bne.n	8004da8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	4b7e      	ldr	r3, [pc, #504]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d05b      	beq.n	8004e54 <HAL_RCC_OscConfig+0x108>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d157      	bne.n	8004e54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e242      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db0:	d106      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x74>
 8004db2:	4b76      	ldr	r3, [pc, #472]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a75      	ldr	r2, [pc, #468]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e01d      	b.n	8004dfc <HAL_RCC_OscConfig+0xb0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dc8:	d10c      	bne.n	8004de4 <HAL_RCC_OscConfig+0x98>
 8004dca:	4b70      	ldr	r3, [pc, #448]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6f      	ldr	r2, [pc, #444]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	4b6d      	ldr	r3, [pc, #436]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a6c      	ldr	r2, [pc, #432]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e00b      	b.n	8004dfc <HAL_RCC_OscConfig+0xb0>
 8004de4:	4b69      	ldr	r3, [pc, #420]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a68      	ldr	r2, [pc, #416]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4b66      	ldr	r3, [pc, #408]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a65      	ldr	r2, [pc, #404]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d013      	beq.n	8004e2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e04:	f7ff f8a8 	bl	8003f58 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e0c:	f7ff f8a4 	bl	8003f58 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b64      	cmp	r3, #100	; 0x64
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e207      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1e:	4b5b      	ldr	r3, [pc, #364]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0xc0>
 8004e2a:	e014      	b.n	8004e56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2c:	f7ff f894 	bl	8003f58 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e34:	f7ff f890 	bl	8003f58 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	; 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e1f3      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e46:	4b51      	ldr	r3, [pc, #324]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0xe8>
 8004e52:	e000      	b.n	8004e56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d063      	beq.n	8004f2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e62:	4b4a      	ldr	r3, [pc, #296]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6e:	4b47      	ldr	r3, [pc, #284]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d11c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e7a:	4b44      	ldr	r3, [pc, #272]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d116      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e86:	4b41      	ldr	r3, [pc, #260]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_RCC_OscConfig+0x152>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d001      	beq.n	8004e9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e1c7      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9e:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4937      	ldr	r1, [pc, #220]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eb2:	e03a      	b.n	8004f2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d020      	beq.n	8004efe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ebc:	4b34      	ldr	r3, [pc, #208]	; (8004f90 <HAL_RCC_OscConfig+0x244>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec2:	f7ff f849 	bl	8003f58 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eca:	f7ff f845 	bl	8003f58 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e1a8      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004edc:	4b2b      	ldr	r3, [pc, #172]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee8:	4b28      	ldr	r3, [pc, #160]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	4925      	ldr	r1, [pc, #148]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	600b      	str	r3, [r1, #0]
 8004efc:	e015      	b.n	8004f2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004efe:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <HAL_RCC_OscConfig+0x244>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f04:	f7ff f828 	bl	8003f58 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f0c:	f7ff f824 	bl	8003f58 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e187      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1e:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d036      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d016      	beq.n	8004f6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f3e:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <HAL_RCC_OscConfig+0x248>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7ff f808 	bl	8003f58 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f4c:	f7ff f804 	bl	8003f58 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e167      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x200>
 8004f6a:	e01b      	b.n	8004fa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f6c:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <HAL_RCC_OscConfig+0x248>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f72:	f7fe fff1 	bl	8003f58 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f78:	e00e      	b.n	8004f98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f7a:	f7fe ffed 	bl	8003f58 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d907      	bls.n	8004f98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e150      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	42470000 	.word	0x42470000
 8004f94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f98:	4b88      	ldr	r3, [pc, #544]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8004f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1ea      	bne.n	8004f7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8097 	beq.w	80050e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb6:	4b81      	ldr	r3, [pc, #516]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10f      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	4b7d      	ldr	r3, [pc, #500]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	4a7c      	ldr	r2, [pc, #496]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8004fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fd2:	4b7a      	ldr	r3, [pc, #488]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fda:	60bb      	str	r3, [r7, #8]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe2:	4b77      	ldr	r3, [pc, #476]	; (80051c0 <HAL_RCC_OscConfig+0x474>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d118      	bne.n	8005020 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fee:	4b74      	ldr	r3, [pc, #464]	; (80051c0 <HAL_RCC_OscConfig+0x474>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a73      	ldr	r2, [pc, #460]	; (80051c0 <HAL_RCC_OscConfig+0x474>)
 8004ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ffa:	f7fe ffad 	bl	8003f58 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005002:	f7fe ffa9 	bl	8003f58 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e10c      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005014:	4b6a      	ldr	r3, [pc, #424]	; (80051c0 <HAL_RCC_OscConfig+0x474>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d106      	bne.n	8005036 <HAL_RCC_OscConfig+0x2ea>
 8005028:	4b64      	ldr	r3, [pc, #400]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	4a63      	ldr	r2, [pc, #396]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 800502e:	f043 0301 	orr.w	r3, r3, #1
 8005032:	6713      	str	r3, [r2, #112]	; 0x70
 8005034:	e01c      	b.n	8005070 <HAL_RCC_OscConfig+0x324>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b05      	cmp	r3, #5
 800503c:	d10c      	bne.n	8005058 <HAL_RCC_OscConfig+0x30c>
 800503e:	4b5f      	ldr	r3, [pc, #380]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005042:	4a5e      	ldr	r2, [pc, #376]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005044:	f043 0304 	orr.w	r3, r3, #4
 8005048:	6713      	str	r3, [r2, #112]	; 0x70
 800504a:	4b5c      	ldr	r3, [pc, #368]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504e:	4a5b      	ldr	r2, [pc, #364]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	6713      	str	r3, [r2, #112]	; 0x70
 8005056:	e00b      	b.n	8005070 <HAL_RCC_OscConfig+0x324>
 8005058:	4b58      	ldr	r3, [pc, #352]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505c:	4a57      	ldr	r2, [pc, #348]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	6713      	str	r3, [r2, #112]	; 0x70
 8005064:	4b55      	ldr	r3, [pc, #340]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005068:	4a54      	ldr	r2, [pc, #336]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 800506a:	f023 0304 	bic.w	r3, r3, #4
 800506e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d015      	beq.n	80050a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005078:	f7fe ff6e 	bl	8003f58 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507e:	e00a      	b.n	8005096 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005080:	f7fe ff6a 	bl	8003f58 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	f241 3288 	movw	r2, #5000	; 0x1388
 800508e:	4293      	cmp	r3, r2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e0cb      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005096:	4b49      	ldr	r3, [pc, #292]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0ee      	beq.n	8005080 <HAL_RCC_OscConfig+0x334>
 80050a2:	e014      	b.n	80050ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a4:	f7fe ff58 	bl	8003f58 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050aa:	e00a      	b.n	80050c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ac:	f7fe ff54 	bl	8003f58 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e0b5      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c2:	4b3e      	ldr	r3, [pc, #248]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ee      	bne.n	80050ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d105      	bne.n	80050e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d4:	4b39      	ldr	r3, [pc, #228]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	4a38      	ldr	r2, [pc, #224]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 80050da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80a1 	beq.w	800522c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050ea:	4b34      	ldr	r3, [pc, #208]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	2b08      	cmp	r3, #8
 80050f4:	d05c      	beq.n	80051b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d141      	bne.n	8005182 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fe:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <HAL_RCC_OscConfig+0x478>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005104:	f7fe ff28 	bl	8003f58 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800510c:	f7fe ff24 	bl	8003f58 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e087      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511e:	4b27      	ldr	r3, [pc, #156]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69da      	ldr	r2, [r3, #28]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	019b      	lsls	r3, r3, #6
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	085b      	lsrs	r3, r3, #1
 8005142:	3b01      	subs	r3, #1
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	061b      	lsls	r3, r3, #24
 800514e:	491b      	ldr	r1, [pc, #108]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005150:	4313      	orrs	r3, r2
 8005152:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005154:	4b1b      	ldr	r3, [pc, #108]	; (80051c4 <HAL_RCC_OscConfig+0x478>)
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515a:	f7fe fefd 	bl	8003f58 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005162:	f7fe fef9 	bl	8003f58 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e05c      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005174:	4b11      	ldr	r3, [pc, #68]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0f0      	beq.n	8005162 <HAL_RCC_OscConfig+0x416>
 8005180:	e054      	b.n	800522c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <HAL_RCC_OscConfig+0x478>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005188:	f7fe fee6 	bl	8003f58 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005190:	f7fe fee2 	bl	8003f58 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e045      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a2:	4b06      	ldr	r3, [pc, #24]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x444>
 80051ae:	e03d      	b.n	800522c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d107      	bne.n	80051c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e038      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40007000 	.word	0x40007000
 80051c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051c8:	4b1b      	ldr	r3, [pc, #108]	; (8005238 <HAL_RCC_OscConfig+0x4ec>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d028      	beq.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d121      	bne.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d11a      	bne.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051f8:	4013      	ands	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005200:	4293      	cmp	r3, r2
 8005202:	d111      	bne.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	085b      	lsrs	r3, r3, #1
 8005210:	3b01      	subs	r3, #1
 8005212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005214:	429a      	cmp	r2, r3
 8005216:	d107      	bne.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d001      	beq.n	800522c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800

0800523c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e0cc      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005250:	4b68      	ldr	r3, [pc, #416]	; (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d90c      	bls.n	8005278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525e:	4b65      	ldr	r3, [pc, #404]	; (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005266:	4b63      	ldr	r3, [pc, #396]	; (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0b8      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d020      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005290:	4b59      	ldr	r3, [pc, #356]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	4a58      	ldr	r2, [pc, #352]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800529a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052a8:	4b53      	ldr	r3, [pc, #332]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	4a52      	ldr	r2, [pc, #328]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b4:	4b50      	ldr	r3, [pc, #320]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	494d      	ldr	r1, [pc, #308]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d044      	beq.n	800535c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d107      	bne.n	80052ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052da:	4b47      	ldr	r3, [pc, #284]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d119      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e07f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d003      	beq.n	80052fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d107      	bne.n	800530a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fa:	4b3f      	ldr	r3, [pc, #252]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e06f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800530a:	4b3b      	ldr	r3, [pc, #236]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e067      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800531a:	4b37      	ldr	r3, [pc, #220]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f023 0203 	bic.w	r2, r3, #3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4934      	ldr	r1, [pc, #208]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	4313      	orrs	r3, r2
 800532a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800532c:	f7fe fe14 	bl	8003f58 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005332:	e00a      	b.n	800534a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005334:	f7fe fe10 	bl	8003f58 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e04f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534a:	4b2b      	ldr	r3, [pc, #172]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 020c 	and.w	r2, r3, #12
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	429a      	cmp	r2, r3
 800535a:	d1eb      	bne.n	8005334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800535c:	4b25      	ldr	r3, [pc, #148]	; (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d20c      	bcs.n	8005384 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536a:	4b22      	ldr	r3, [pc, #136]	; (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005372:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e032      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005390:	4b19      	ldr	r3, [pc, #100]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4916      	ldr	r1, [pc, #88]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ae:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	490e      	ldr	r1, [pc, #56]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053c2:	f000 f821 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 80053c6:	4602      	mov	r2, r0
 80053c8:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	490a      	ldr	r1, [pc, #40]	; (80053fc <HAL_RCC_ClockConfig+0x1c0>)
 80053d4:	5ccb      	ldrb	r3, [r1, r3]
 80053d6:	fa22 f303 	lsr.w	r3, r2, r3
 80053da:	4a09      	ldr	r2, [pc, #36]	; (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80053dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053de:	4b09      	ldr	r3, [pc, #36]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe fd74 	bl	8003ed0 <HAL_InitTick>

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40023c00 	.word	0x40023c00
 80053f8:	40023800 	.word	0x40023800
 80053fc:	0800b5cc 	.word	0x0800b5cc
 8005400:	20000038 	.word	0x20000038
 8005404:	2000003c 	.word	0x2000003c

08005408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800540c:	b094      	sub	sp, #80	; 0x50
 800540e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	647b      	str	r3, [r7, #68]	; 0x44
 8005414:	2300      	movs	r3, #0
 8005416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005418:	2300      	movs	r3, #0
 800541a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005420:	4b79      	ldr	r3, [pc, #484]	; (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b08      	cmp	r3, #8
 800542a:	d00d      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0x40>
 800542c:	2b08      	cmp	r3, #8
 800542e:	f200 80e1 	bhi.w	80055f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_RCC_GetSysClockFreq+0x34>
 8005436:	2b04      	cmp	r3, #4
 8005438:	d003      	beq.n	8005442 <HAL_RCC_GetSysClockFreq+0x3a>
 800543a:	e0db      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800543c:	4b73      	ldr	r3, [pc, #460]	; (800560c <HAL_RCC_GetSysClockFreq+0x204>)
 800543e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005440:	e0db      	b.n	80055fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005442:	4b73      	ldr	r3, [pc, #460]	; (8005610 <HAL_RCC_GetSysClockFreq+0x208>)
 8005444:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005446:	e0d8      	b.n	80055fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005448:	4b6f      	ldr	r3, [pc, #444]	; (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005450:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005452:	4b6d      	ldr	r3, [pc, #436]	; (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d063      	beq.n	8005526 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800545e:	4b6a      	ldr	r3, [pc, #424]	; (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	099b      	lsrs	r3, r3, #6
 8005464:	2200      	movs	r2, #0
 8005466:	63bb      	str	r3, [r7, #56]	; 0x38
 8005468:	63fa      	str	r2, [r7, #60]	; 0x3c
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005470:	633b      	str	r3, [r7, #48]	; 0x30
 8005472:	2300      	movs	r3, #0
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
 8005476:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800547a:	4622      	mov	r2, r4
 800547c:	462b      	mov	r3, r5
 800547e:	f04f 0000 	mov.w	r0, #0
 8005482:	f04f 0100 	mov.w	r1, #0
 8005486:	0159      	lsls	r1, r3, #5
 8005488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800548c:	0150      	lsls	r0, r2, #5
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4621      	mov	r1, r4
 8005494:	1a51      	subs	r1, r2, r1
 8005496:	6139      	str	r1, [r7, #16]
 8005498:	4629      	mov	r1, r5
 800549a:	eb63 0301 	sbc.w	r3, r3, r1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054ac:	4659      	mov	r1, fp
 80054ae:	018b      	lsls	r3, r1, #6
 80054b0:	4651      	mov	r1, sl
 80054b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054b6:	4651      	mov	r1, sl
 80054b8:	018a      	lsls	r2, r1, #6
 80054ba:	4651      	mov	r1, sl
 80054bc:	ebb2 0801 	subs.w	r8, r2, r1
 80054c0:	4659      	mov	r1, fp
 80054c2:	eb63 0901 	sbc.w	r9, r3, r1
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054da:	4690      	mov	r8, r2
 80054dc:	4699      	mov	r9, r3
 80054de:	4623      	mov	r3, r4
 80054e0:	eb18 0303 	adds.w	r3, r8, r3
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	462b      	mov	r3, r5
 80054e8:	eb49 0303 	adc.w	r3, r9, r3
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054fa:	4629      	mov	r1, r5
 80054fc:	024b      	lsls	r3, r1, #9
 80054fe:	4621      	mov	r1, r4
 8005500:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005504:	4621      	mov	r1, r4
 8005506:	024a      	lsls	r2, r1, #9
 8005508:	4610      	mov	r0, r2
 800550a:	4619      	mov	r1, r3
 800550c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800550e:	2200      	movs	r2, #0
 8005510:	62bb      	str	r3, [r7, #40]	; 0x28
 8005512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005514:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005518:	f7fb fb96 	bl	8000c48 <__aeabi_uldivmod>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4613      	mov	r3, r2
 8005522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005524:	e058      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005526:	4b38      	ldr	r3, [pc, #224]	; (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	099b      	lsrs	r3, r3, #6
 800552c:	2200      	movs	r2, #0
 800552e:	4618      	mov	r0, r3
 8005530:	4611      	mov	r1, r2
 8005532:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005536:	623b      	str	r3, [r7, #32]
 8005538:	2300      	movs	r3, #0
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
 800553c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	f04f 0000 	mov.w	r0, #0
 8005548:	f04f 0100 	mov.w	r1, #0
 800554c:	0159      	lsls	r1, r3, #5
 800554e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005552:	0150      	lsls	r0, r2, #5
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4641      	mov	r1, r8
 800555a:	ebb2 0a01 	subs.w	sl, r2, r1
 800555e:	4649      	mov	r1, r9
 8005560:	eb63 0b01 	sbc.w	fp, r3, r1
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005570:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005574:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005578:	ebb2 040a 	subs.w	r4, r2, sl
 800557c:	eb63 050b 	sbc.w	r5, r3, fp
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	00eb      	lsls	r3, r5, #3
 800558a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800558e:	00e2      	lsls	r2, r4, #3
 8005590:	4614      	mov	r4, r2
 8005592:	461d      	mov	r5, r3
 8005594:	4643      	mov	r3, r8
 8005596:	18e3      	adds	r3, r4, r3
 8005598:	603b      	str	r3, [r7, #0]
 800559a:	464b      	mov	r3, r9
 800559c:	eb45 0303 	adc.w	r3, r5, r3
 80055a0:	607b      	str	r3, [r7, #4]
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055ae:	4629      	mov	r1, r5
 80055b0:	028b      	lsls	r3, r1, #10
 80055b2:	4621      	mov	r1, r4
 80055b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055b8:	4621      	mov	r1, r4
 80055ba:	028a      	lsls	r2, r1, #10
 80055bc:	4610      	mov	r0, r2
 80055be:	4619      	mov	r1, r3
 80055c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c2:	2200      	movs	r2, #0
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055cc:	f7fb fb3c 	bl	8000c48 <__aeabi_uldivmod>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4613      	mov	r3, r2
 80055d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055d8:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	0c1b      	lsrs	r3, r3, #16
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	3301      	adds	r3, #1
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80055e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055f2:	e002      	b.n	80055fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <HAL_RCC_GetSysClockFreq+0x204>)
 80055f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3750      	adds	r7, #80	; 0x50
 8005600:	46bd      	mov	sp, r7
 8005602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800
 800560c:	00f42400 	.word	0x00f42400
 8005610:	007a1200 	.word	0x007a1200

08005614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005618:	4b03      	ldr	r3, [pc, #12]	; (8005628 <HAL_RCC_GetHCLKFreq+0x14>)
 800561a:	681b      	ldr	r3, [r3, #0]
}
 800561c:	4618      	mov	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000038 	.word	0x20000038

0800562c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005630:	f7ff fff0 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	0a9b      	lsrs	r3, r3, #10
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	4903      	ldr	r1, [pc, #12]	; (8005650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005642:	5ccb      	ldrb	r3, [r1, r3]
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40023800 	.word	0x40023800
 8005650:	0800b5dc 	.word	0x0800b5dc

08005654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005658:	f7ff ffdc 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	0b5b      	lsrs	r3, r3, #13
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4903      	ldr	r1, [pc, #12]	; (8005678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40023800 	.word	0x40023800
 8005678:	0800b5dc 	.word	0x0800b5dc

0800567c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e041      	b.n	8005712 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fe f944 	bl	8003930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f000 fcdc 	bl	8006078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	d001      	beq.n	8005734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e04e      	b.n	80057d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a23      	ldr	r2, [pc, #140]	; (80057e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d022      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x80>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575e:	d01d      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x80>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1f      	ldr	r2, [pc, #124]	; (80057e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d018      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x80>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a1e      	ldr	r2, [pc, #120]	; (80057e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d013      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x80>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <HAL_TIM_Base_Start_IT+0xd0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00e      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x80>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1b      	ldr	r2, [pc, #108]	; (80057f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d009      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x80>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a19      	ldr	r2, [pc, #100]	; (80057f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d004      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x80>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d111      	bne.n	80057c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b06      	cmp	r3, #6
 80057ac:	d010      	beq.n	80057d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0201 	orr.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057be:	e007      	b.n	80057d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40010000 	.word	0x40010000
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40010400 	.word	0x40010400
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40001800 	.word	0x40001800

080057fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e041      	b.n	8005892 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fe f8e0 	bl	80039e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f000 fc1c 	bl	8006078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d109      	bne.n	80058c0 <HAL_TIM_PWM_Start+0x24>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	e022      	b.n	8005906 <HAL_TIM_PWM_Start+0x6a>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d109      	bne.n	80058da <HAL_TIM_PWM_Start+0x3e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	bf14      	ite	ne
 80058d2:	2301      	movne	r3, #1
 80058d4:	2300      	moveq	r3, #0
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	e015      	b.n	8005906 <HAL_TIM_PWM_Start+0x6a>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d109      	bne.n	80058f4 <HAL_TIM_PWM_Start+0x58>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	bf14      	ite	ne
 80058ec:	2301      	movne	r3, #1
 80058ee:	2300      	moveq	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	e008      	b.n	8005906 <HAL_TIM_PWM_Start+0x6a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	bf14      	ite	ne
 8005900:	2301      	movne	r3, #1
 8005902:	2300      	moveq	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e07c      	b.n	8005a08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d104      	bne.n	800591e <HAL_TIM_PWM_Start+0x82>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800591c:	e013      	b.n	8005946 <HAL_TIM_PWM_Start+0xaa>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b04      	cmp	r3, #4
 8005922:	d104      	bne.n	800592e <HAL_TIM_PWM_Start+0x92>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800592c:	e00b      	b.n	8005946 <HAL_TIM_PWM_Start+0xaa>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b08      	cmp	r3, #8
 8005932:	d104      	bne.n	800593e <HAL_TIM_PWM_Start+0xa2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800593c:	e003      	b.n	8005946 <HAL_TIM_PWM_Start+0xaa>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2201      	movs	r2, #1
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fde2 	bl	8006518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a2d      	ldr	r2, [pc, #180]	; (8005a10 <HAL_TIM_PWM_Start+0x174>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <HAL_TIM_PWM_Start+0xcc>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a2c      	ldr	r2, [pc, #176]	; (8005a14 <HAL_TIM_PWM_Start+0x178>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d101      	bne.n	800596c <HAL_TIM_PWM_Start+0xd0>
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <HAL_TIM_PWM_Start+0xd2>
 800596c:	2300      	movs	r3, #0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005980:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a22      	ldr	r2, [pc, #136]	; (8005a10 <HAL_TIM_PWM_Start+0x174>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d022      	beq.n	80059d2 <HAL_TIM_PWM_Start+0x136>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005994:	d01d      	beq.n	80059d2 <HAL_TIM_PWM_Start+0x136>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a1f      	ldr	r2, [pc, #124]	; (8005a18 <HAL_TIM_PWM_Start+0x17c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d018      	beq.n	80059d2 <HAL_TIM_PWM_Start+0x136>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1d      	ldr	r2, [pc, #116]	; (8005a1c <HAL_TIM_PWM_Start+0x180>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d013      	beq.n	80059d2 <HAL_TIM_PWM_Start+0x136>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1c      	ldr	r2, [pc, #112]	; (8005a20 <HAL_TIM_PWM_Start+0x184>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00e      	beq.n	80059d2 <HAL_TIM_PWM_Start+0x136>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a16      	ldr	r2, [pc, #88]	; (8005a14 <HAL_TIM_PWM_Start+0x178>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d009      	beq.n	80059d2 <HAL_TIM_PWM_Start+0x136>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a18      	ldr	r2, [pc, #96]	; (8005a24 <HAL_TIM_PWM_Start+0x188>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d004      	beq.n	80059d2 <HAL_TIM_PWM_Start+0x136>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a16      	ldr	r2, [pc, #88]	; (8005a28 <HAL_TIM_PWM_Start+0x18c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d111      	bne.n	80059f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b06      	cmp	r3, #6
 80059e2:	d010      	beq.n	8005a06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f4:	e007      	b.n	8005a06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0201 	orr.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40010000 	.word	0x40010000
 8005a14:	40010400 	.word	0x40010400
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40000c00 	.word	0x40000c00
 8005a24:	40014000 	.word	0x40014000
 8005a28:	40001800 	.word	0x40001800

08005a2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e097      	b.n	8005b70 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d106      	bne.n	8005a5a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7fd fdf9 	bl	800364c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a70:	f023 0307 	bic.w	r3, r3, #7
 8005a74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4610      	mov	r0, r2
 8005a82:	f000 faf9 	bl	8006078 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aae:	f023 0303 	bic.w	r3, r3, #3
 8005ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005acc:	f023 030c 	bic.w	r3, r3, #12
 8005ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ad8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005adc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	011a      	lsls	r2, r3, #4
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	031b      	lsls	r3, r3, #12
 8005afc:	4313      	orrs	r3, r2
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b0a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b88:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b90:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b98:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ba0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d110      	bne.n	8005bca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d102      	bne.n	8005bb4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bae:	7b7b      	ldrb	r3, [r7, #13]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d001      	beq.n	8005bb8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e069      	b.n	8005c8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bc8:	e031      	b.n	8005c2e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d110      	bne.n	8005bf2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bd0:	7bbb      	ldrb	r3, [r7, #14]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d102      	bne.n	8005bdc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bd6:	7b3b      	ldrb	r3, [r7, #12]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d001      	beq.n	8005be0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e055      	b.n	8005c8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bf0:	e01d      	b.n	8005c2e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d108      	bne.n	8005c0a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bf8:	7bbb      	ldrb	r3, [r7, #14]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d105      	bne.n	8005c0a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bfe:	7b7b      	ldrb	r3, [r7, #13]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d102      	bne.n	8005c0a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c04:	7b3b      	ldrb	r3, [r7, #12]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d001      	beq.n	8005c0e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e03e      	b.n	8005c8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2202      	movs	r2, #2
 8005c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2202      	movs	r2, #2
 8005c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_TIM_Encoder_Start+0xc4>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d008      	beq.n	8005c4c <HAL_TIM_Encoder_Start+0xd4>
 8005c3a:	e00f      	b.n	8005c5c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2201      	movs	r2, #1
 8005c42:	2100      	movs	r1, #0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fc67 	bl	8006518 <TIM_CCxChannelCmd>
      break;
 8005c4a:	e016      	b.n	8005c7a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2201      	movs	r2, #1
 8005c52:	2104      	movs	r1, #4
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fc5f 	bl	8006518 <TIM_CCxChannelCmd>
      break;
 8005c5a:	e00e      	b.n	8005c7a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2201      	movs	r2, #1
 8005c62:	2100      	movs	r1, #0
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fc57 	bl	8006518 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	2104      	movs	r1, #4
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fc50 	bl	8006518 <TIM_CCxChannelCmd>
      break;
 8005c78:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0201 	orr.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0202 	mvn.w	r2, #2
 8005cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f9b0 	bl	800603c <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f9a2 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f9b3 	bl	8006050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d122      	bne.n	8005d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d11b      	bne.n	8005d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0204 	mvn.w	r2, #4
 8005d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f986 	bl	800603c <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f978 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f989 	bl	8006050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d122      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d11b      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0208 	mvn.w	r2, #8
 8005d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f95c 	bl	800603c <HAL_TIM_IC_CaptureCallback>
 8005d84:	e005      	b.n	8005d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f94e 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f95f 	bl	8006050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d122      	bne.n	8005dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d11b      	bne.n	8005dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0210 	mvn.w	r2, #16
 8005dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f932 	bl	800603c <HAL_TIM_IC_CaptureCallback>
 8005dd8:	e005      	b.n	8005de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f924 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f935 	bl	8006050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d10e      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d107      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0201 	mvn.w	r2, #1
 8005e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fc f9d8 	bl	80021c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d10e      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e30:	2b80      	cmp	r3, #128	; 0x80
 8005e32:	d107      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fc16 	bl	8006670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d10e      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d107      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f8fa 	bl	8006064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d10e      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d107      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0220 	mvn.w	r2, #32
 8005e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fbe0 	bl	800665c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e9c:	bf00      	nop
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e0ae      	b.n	8006020 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b0c      	cmp	r3, #12
 8005ece:	f200 809f 	bhi.w	8006010 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ed2:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005f0d 	.word	0x08005f0d
 8005edc:	08006011 	.word	0x08006011
 8005ee0:	08006011 	.word	0x08006011
 8005ee4:	08006011 	.word	0x08006011
 8005ee8:	08005f4d 	.word	0x08005f4d
 8005eec:	08006011 	.word	0x08006011
 8005ef0:	08006011 	.word	0x08006011
 8005ef4:	08006011 	.word	0x08006011
 8005ef8:	08005f8f 	.word	0x08005f8f
 8005efc:	08006011 	.word	0x08006011
 8005f00:	08006011 	.word	0x08006011
 8005f04:	08006011 	.word	0x08006011
 8005f08:	08005fcf 	.word	0x08005fcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 f950 	bl	80061b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0208 	orr.w	r2, r2, #8
 8005f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0204 	bic.w	r2, r2, #4
 8005f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6999      	ldr	r1, [r3, #24]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691a      	ldr	r2, [r3, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	619a      	str	r2, [r3, #24]
      break;
 8005f4a:	e064      	b.n	8006016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 f9a0 	bl	8006298 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6999      	ldr	r1, [r3, #24]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	021a      	lsls	r2, r3, #8
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	619a      	str	r2, [r3, #24]
      break;
 8005f8c:	e043      	b.n	8006016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 f9f5 	bl	8006384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0208 	orr.w	r2, r2, #8
 8005fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0204 	bic.w	r2, r2, #4
 8005fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69d9      	ldr	r1, [r3, #28]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	61da      	str	r2, [r3, #28]
      break;
 8005fcc:	e023      	b.n	8006016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fa49 	bl	800646c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69d9      	ldr	r1, [r3, #28]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	021a      	lsls	r2, r3, #8
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	61da      	str	r2, [r3, #28]
      break;
 800600e:	e002      	b.n	8006016 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	75fb      	strb	r3, [r7, #23]
      break;
 8006014:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800601e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a40      	ldr	r2, [pc, #256]	; (800618c <TIM_Base_SetConfig+0x114>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d013      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006096:	d00f      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a3d      	ldr	r2, [pc, #244]	; (8006190 <TIM_Base_SetConfig+0x118>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00b      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a3c      	ldr	r2, [pc, #240]	; (8006194 <TIM_Base_SetConfig+0x11c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d007      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a3b      	ldr	r2, [pc, #236]	; (8006198 <TIM_Base_SetConfig+0x120>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_Base_SetConfig+0x40>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a3a      	ldr	r2, [pc, #232]	; (800619c <TIM_Base_SetConfig+0x124>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d108      	bne.n	80060ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2f      	ldr	r2, [pc, #188]	; (800618c <TIM_Base_SetConfig+0x114>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d02b      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d8:	d027      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2c      	ldr	r2, [pc, #176]	; (8006190 <TIM_Base_SetConfig+0x118>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d023      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a2b      	ldr	r2, [pc, #172]	; (8006194 <TIM_Base_SetConfig+0x11c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d01f      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a2a      	ldr	r2, [pc, #168]	; (8006198 <TIM_Base_SetConfig+0x120>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01b      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a29      	ldr	r2, [pc, #164]	; (800619c <TIM_Base_SetConfig+0x124>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d017      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <TIM_Base_SetConfig+0x128>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a27      	ldr	r2, [pc, #156]	; (80061a4 <TIM_Base_SetConfig+0x12c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00f      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a26      	ldr	r2, [pc, #152]	; (80061a8 <TIM_Base_SetConfig+0x130>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00b      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a25      	ldr	r2, [pc, #148]	; (80061ac <TIM_Base_SetConfig+0x134>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d007      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a24      	ldr	r2, [pc, #144]	; (80061b0 <TIM_Base_SetConfig+0x138>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d003      	beq.n	800612a <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a23      	ldr	r2, [pc, #140]	; (80061b4 <TIM_Base_SetConfig+0x13c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d108      	bne.n	800613c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a0a      	ldr	r2, [pc, #40]	; (800618c <TIM_Base_SetConfig+0x114>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_Base_SetConfig+0xf8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a0c      	ldr	r2, [pc, #48]	; (800619c <TIM_Base_SetConfig+0x124>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d103      	bne.n	8006178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	615a      	str	r2, [r3, #20]
}
 800617e:	bf00      	nop
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40010000 	.word	0x40010000
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40000c00 	.word	0x40000c00
 800619c:	40010400 	.word	0x40010400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40014800 	.word	0x40014800
 80061ac:	40001800 	.word	0x40001800
 80061b0:	40001c00 	.word	0x40001c00
 80061b4:	40002000 	.word	0x40002000

080061b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f023 0201 	bic.w	r2, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f023 0302 	bic.w	r3, r3, #2
 8006200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a20      	ldr	r2, [pc, #128]	; (8006290 <TIM_OC1_SetConfig+0xd8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d003      	beq.n	800621c <TIM_OC1_SetConfig+0x64>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a1f      	ldr	r2, [pc, #124]	; (8006294 <TIM_OC1_SetConfig+0xdc>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d10c      	bne.n	8006236 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0308 	bic.w	r3, r3, #8
 8006222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f023 0304 	bic.w	r3, r3, #4
 8006234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a15      	ldr	r2, [pc, #84]	; (8006290 <TIM_OC1_SetConfig+0xd8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d003      	beq.n	8006246 <TIM_OC1_SetConfig+0x8e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a14      	ldr	r2, [pc, #80]	; (8006294 <TIM_OC1_SetConfig+0xdc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d111      	bne.n	800626a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800624c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	621a      	str	r2, [r3, #32]
}
 8006284:	bf00      	nop
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	40010000 	.word	0x40010000
 8006294:	40010400 	.word	0x40010400

08006298 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f023 0210 	bic.w	r2, r3, #16
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	021b      	lsls	r3, r3, #8
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 0320 	bic.w	r3, r3, #32
 80062e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a22      	ldr	r2, [pc, #136]	; (800637c <TIM_OC2_SetConfig+0xe4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_OC2_SetConfig+0x68>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a21      	ldr	r2, [pc, #132]	; (8006380 <TIM_OC2_SetConfig+0xe8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d10d      	bne.n	800631c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800631a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a17      	ldr	r2, [pc, #92]	; (800637c <TIM_OC2_SetConfig+0xe4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC2_SetConfig+0x94>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a16      	ldr	r2, [pc, #88]	; (8006380 <TIM_OC2_SetConfig+0xe8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d113      	bne.n	8006354 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800633a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40010000 	.word	0x40010000
 8006380:	40010400 	.word	0x40010400

08006384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a21      	ldr	r2, [pc, #132]	; (8006464 <TIM_OC3_SetConfig+0xe0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <TIM_OC3_SetConfig+0x66>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a20      	ldr	r2, [pc, #128]	; (8006468 <TIM_OC3_SetConfig+0xe4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d10d      	bne.n	8006406 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a16      	ldr	r2, [pc, #88]	; (8006464 <TIM_OC3_SetConfig+0xe0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d003      	beq.n	8006416 <TIM_OC3_SetConfig+0x92>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a15      	ldr	r2, [pc, #84]	; (8006468 <TIM_OC3_SetConfig+0xe4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d113      	bne.n	800643e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800641c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	011b      	lsls	r3, r3, #4
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	621a      	str	r2, [r3, #32]
}
 8006458:	bf00      	nop
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	40010000 	.word	0x40010000
 8006468:	40010400 	.word	0x40010400

0800646c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	021b      	lsls	r3, r3, #8
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	031b      	lsls	r3, r3, #12
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a12      	ldr	r2, [pc, #72]	; (8006510 <TIM_OC4_SetConfig+0xa4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_OC4_SetConfig+0x68>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a11      	ldr	r2, [pc, #68]	; (8006514 <TIM_OC4_SetConfig+0xa8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d109      	bne.n	80064e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	019b      	lsls	r3, r3, #6
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	621a      	str	r2, [r3, #32]
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40010000 	.word	0x40010000
 8006514:	40010400 	.word	0x40010400

08006518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	2201      	movs	r2, #1
 800652c:	fa02 f303 	lsl.w	r3, r2, r3
 8006530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a1a      	ldr	r2, [r3, #32]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	43db      	mvns	r3, r3
 800653a:	401a      	ands	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a1a      	ldr	r2, [r3, #32]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	fa01 f303 	lsl.w	r3, r1, r3
 8006550:	431a      	orrs	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	621a      	str	r2, [r3, #32]
}
 8006556:	bf00      	nop
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006578:	2302      	movs	r3, #2
 800657a:	e05a      	b.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a21      	ldr	r2, [pc, #132]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d022      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c8:	d01d      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d018      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1b      	ldr	r2, [pc, #108]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d013      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1a      	ldr	r2, [pc, #104]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00e      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a18      	ldr	r2, [pc, #96]	; (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d009      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a17      	ldr	r2, [pc, #92]	; (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d004      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a15      	ldr	r2, [pc, #84]	; (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d10c      	bne.n	8006620 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800660c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	4313      	orrs	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40010000 	.word	0x40010000
 8006644:	40000400 	.word	0x40000400
 8006648:	40000800 	.word	0x40000800
 800664c:	40000c00 	.word	0x40000c00
 8006650:	40010400 	.word	0x40010400
 8006654:	40014000 	.word	0x40014000
 8006658:	40001800 	.word	0x40001800

0800665c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e03f      	b.n	8006716 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fd fab2 	bl	8003c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2224      	movs	r2, #36	; 0x24
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 f81b 	bl	8007704 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	695a      	ldr	r2, [r3, #20]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b08a      	sub	sp, #40	; 0x28
 8006722:	af02      	add	r7, sp, #8
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	603b      	str	r3, [r7, #0]
 800672a:	4613      	mov	r3, r2
 800672c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b20      	cmp	r3, #32
 800673c:	d17c      	bne.n	8006838 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <HAL_UART_Transmit+0x2c>
 8006744:	88fb      	ldrh	r3, [r7, #6]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e075      	b.n	800683a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_UART_Transmit+0x3e>
 8006758:	2302      	movs	r3, #2
 800675a:	e06e      	b.n	800683a <HAL_UART_Transmit+0x11c>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2221      	movs	r2, #33	; 0x21
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006772:	f7fd fbf1 	bl	8003f58 <HAL_GetTick>
 8006776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	88fa      	ldrh	r2, [r7, #6]
 800677c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	88fa      	ldrh	r2, [r7, #6]
 8006782:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800678c:	d108      	bne.n	80067a0 <HAL_UART_Transmit+0x82>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d104      	bne.n	80067a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	61bb      	str	r3, [r7, #24]
 800679e:	e003      	b.n	80067a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067a4:	2300      	movs	r3, #0
 80067a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80067b0:	e02a      	b.n	8006808 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2200      	movs	r2, #0
 80067ba:	2180      	movs	r1, #128	; 0x80
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 fc95 	bl	80070ec <UART_WaitOnFlagUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e036      	b.n	800683a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10b      	bne.n	80067ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	3302      	adds	r3, #2
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	e007      	b.n	80067fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	781a      	ldrb	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	3301      	adds	r3, #1
 80067f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067fe:	b29b      	uxth	r3, r3
 8006800:	3b01      	subs	r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1cf      	bne.n	80067b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2200      	movs	r2, #0
 800681a:	2140      	movs	r1, #64	; 0x40
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 fc65 	bl	80070ec <UART_WaitOnFlagUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e006      	b.n	800683a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2220      	movs	r2, #32
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	e000      	b.n	800683a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006838:	2302      	movs	r3, #2
  }
}
 800683a:	4618      	mov	r0, r3
 800683c:	3720      	adds	r7, #32
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	4613      	mov	r3, r2
 800684e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b20      	cmp	r3, #32
 800685a:	d130      	bne.n	80068be <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_UART_Transmit_IT+0x26>
 8006862:	88fb      	ldrh	r3, [r7, #6]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e029      	b.n	80068c0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_UART_Transmit_IT+0x38>
 8006876:	2302      	movs	r3, #2
 8006878:	e022      	b.n	80068c0 <HAL_UART_Transmit_IT+0x7e>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	88fa      	ldrh	r2, [r7, #6]
 800688c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	88fa      	ldrh	r2, [r7, #6]
 8006892:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2221      	movs	r2, #33	; 0x21
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68da      	ldr	r2, [r3, #12]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068b8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e000      	b.n	80068c0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80068be:	2302      	movs	r3, #2
  }
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d11d      	bne.n	8006922 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d002      	beq.n	80068f2 <HAL_UART_Receive_IT+0x26>
 80068ec:	88fb      	ldrh	r3, [r7, #6]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e016      	b.n	8006924 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_UART_Receive_IT+0x38>
 8006900:	2302      	movs	r3, #2
 8006902:	e00f      	b.n	8006924 <HAL_UART_Receive_IT+0x58>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006912:	88fb      	ldrh	r3, [r7, #6]
 8006914:	461a      	mov	r2, r3
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 fc55 	bl	80071c8 <UART_Start_Receive_IT>
 800691e:	4603      	mov	r3, r0
 8006920:	e000      	b.n	8006924 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006922:	2302      	movs	r3, #2
  }
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4613      	mov	r3, r2
 8006938:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b20      	cmp	r3, #32
 8006944:	d11d      	bne.n	8006982 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <HAL_UART_Receive_DMA+0x26>
 800694c:	88fb      	ldrh	r3, [r7, #6]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e016      	b.n	8006984 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800695c:	2b01      	cmp	r3, #1
 800695e:	d101      	bne.n	8006964 <HAL_UART_Receive_DMA+0x38>
 8006960:	2302      	movs	r3, #2
 8006962:	e00f      	b.n	8006984 <HAL_UART_Receive_DMA+0x58>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006972:	88fb      	ldrh	r3, [r7, #6]
 8006974:	461a      	mov	r2, r3
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 fc63 	bl	8007244 <UART_Start_Receive_DMA>
 800697e:	4603      	mov	r3, r0
 8006980:	e000      	b.n	8006984 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006982:	2302      	movs	r3, #2
  }
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b0ba      	sub	sp, #232	; 0xe8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c2:	f003 030f 	and.w	r3, r3, #15
 80069c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80069ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10f      	bne.n	80069f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d6:	f003 0320 	and.w	r3, r3, #32
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <HAL_UART_IRQHandler+0x66>
 80069de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fdcf 	bl	800758e <UART_Receive_IT>
      return;
 80069f0:	e256      	b.n	8006ea0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 80de 	beq.w	8006bb8 <HAL_UART_IRQHandler+0x22c>
 80069fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 80d1 	beq.w	8006bb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00b      	beq.n	8006a3a <HAL_UART_IRQHandler+0xae>
 8006a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d005      	beq.n	8006a3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	f043 0201 	orr.w	r2, r3, #1
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3e:	f003 0304 	and.w	r3, r3, #4
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00b      	beq.n	8006a5e <HAL_UART_IRQHandler+0xd2>
 8006a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d005      	beq.n	8006a5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	f043 0202 	orr.w	r2, r3, #2
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <HAL_UART_IRQHandler+0xf6>
 8006a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	f043 0204 	orr.w	r2, r3, #4
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a86:	f003 0308 	and.w	r3, r3, #8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d011      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x126>
 8006a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d105      	bne.n	8006aa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f043 0208 	orr.w	r2, r3, #8
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 81ed 	beq.w	8006e96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d008      	beq.n	8006ada <HAL_UART_IRQHandler+0x14e>
 8006ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fd5a 	bl	800758e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae4:	2b40      	cmp	r3, #64	; 0x40
 8006ae6:	bf0c      	ite	eq
 8006ae8:	2301      	moveq	r3, #1
 8006aea:	2300      	movne	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d103      	bne.n	8006b06 <HAL_UART_IRQHandler+0x17a>
 8006afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d04f      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fc62 	bl	80073d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d141      	bne.n	8006b9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3314      	adds	r3, #20
 8006b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3314      	adds	r3, #20
 8006b42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1d9      	bne.n	8006b1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d013      	beq.n	8006b96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b72:	4a7d      	ldr	r2, [pc, #500]	; (8006d68 <HAL_UART_IRQHandler+0x3dc>)
 8006b74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fd fca4 	bl	80044c8 <HAL_DMA_Abort_IT>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d016      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b90:	4610      	mov	r0, r2
 8006b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b94:	e00e      	b.n	8006bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f99a 	bl	8006ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b9c:	e00a      	b.n	8006bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f996 	bl	8006ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba4:	e006      	b.n	8006bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f992 	bl	8006ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006bb2:	e170      	b.n	8006e96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb4:	bf00      	nop
    return;
 8006bb6:	e16e      	b.n	8006e96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	f040 814a 	bne.w	8006e56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc6:	f003 0310 	and.w	r3, r3, #16
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 8143 	beq.w	8006e56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd4:	f003 0310 	and.w	r3, r3, #16
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 813c 	beq.w	8006e56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bde:	2300      	movs	r3, #0
 8006be0:	60bb      	str	r3, [r7, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	f040 80b4 	bne.w	8006d6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 8140 	beq.w	8006e9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c22:	429a      	cmp	r2, r3
 8006c24:	f080 8139 	bcs.w	8006e9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3a:	f000 8088 	beq.w	8006d4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	330c      	adds	r3, #12
 8006c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	330c      	adds	r3, #12
 8006c66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1d9      	bne.n	8006c3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3314      	adds	r3, #20
 8006c90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3314      	adds	r3, #20
 8006caa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e1      	bne.n	8006c8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3314      	adds	r3, #20
 8006ccc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3314      	adds	r3, #20
 8006ce6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006cec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e3      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d16:	e853 3f00 	ldrex	r3, [r3]
 8006d1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d1e:	f023 0310 	bic.w	r3, r3, #16
 8006d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	330c      	adds	r3, #12
 8006d2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d30:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d38:	e841 2300 	strex	r3, r2, [r1]
 8006d3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e3      	bne.n	8006d0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fd fb4d 	bl	80043e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f8c0 	bl	8006ee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d64:	e099      	b.n	8006e9a <HAL_UART_IRQHandler+0x50e>
 8006d66:	bf00      	nop
 8006d68:	08007497 	.word	0x08007497
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 808b 	beq.w	8006e9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8086 	beq.w	8006e9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	330c      	adds	r3, #12
 8006d98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006da8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006db6:	647a      	str	r2, [r7, #68]	; 0x44
 8006db8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e3      	bne.n	8006d92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3314      	adds	r3, #20
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3314      	adds	r3, #20
 8006dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006dee:	633a      	str	r2, [r7, #48]	; 0x30
 8006df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e3      	bne.n	8006dca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	330c      	adds	r3, #12
 8006e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0310 	bic.w	r3, r3, #16
 8006e26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	330c      	adds	r3, #12
 8006e30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e34:	61fa      	str	r2, [r7, #28]
 8006e36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	69b9      	ldr	r1, [r7, #24]
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	617b      	str	r3, [r7, #20]
   return(result);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e3      	bne.n	8006e10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f848 	bl	8006ee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e54:	e023      	b.n	8006e9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <HAL_UART_IRQHandler+0x4ea>
 8006e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fb25 	bl	80074be <UART_Transmit_IT>
    return;
 8006e74:	e014      	b.n	8006ea0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00e      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x514>
 8006e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d008      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fb65 	bl	800755e <UART_EndTransmit_IT>
    return;
 8006e94:	e004      	b.n	8006ea0 <HAL_UART_IRQHandler+0x514>
    return;
 8006e96:	bf00      	nop
 8006e98:	e002      	b.n	8006ea0 <HAL_UART_IRQHandler+0x514>
      return;
 8006e9a:	bf00      	nop
 8006e9c:	e000      	b.n	8006ea0 <HAL_UART_IRQHandler+0x514>
      return;
 8006e9e:	bf00      	nop
  }
}
 8006ea0:	37e8      	adds	r7, #232	; 0xe8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop

08006ea8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b09c      	sub	sp, #112	; 0x70
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d172      	bne.n	8006ffe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f34:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	330c      	adds	r3, #12
 8006f3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f40:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e5      	bne.n	8006f1e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3314      	adds	r3, #20
 8006f58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f64:	f023 0301 	bic.w	r3, r3, #1
 8006f68:	667b      	str	r3, [r7, #100]	; 0x64
 8006f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3314      	adds	r3, #20
 8006f70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f72:	647a      	str	r2, [r7, #68]	; 0x44
 8006f74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e5      	bne.n	8006f52 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3314      	adds	r3, #20
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	623b      	str	r3, [r7, #32]
   return(result);
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3314      	adds	r3, #20
 8006fa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fa6:	633a      	str	r2, [r7, #48]	; 0x30
 8006fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e5      	bne.n	8006f86 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d119      	bne.n	8006ffe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	330c      	adds	r3, #12
 8006fd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f023 0310 	bic.w	r3, r3, #16
 8006fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	330c      	adds	r3, #12
 8006fe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fea:	61fa      	str	r2, [r7, #28]
 8006fec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	69b9      	ldr	r1, [r7, #24]
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e5      	bne.n	8006fca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	2b01      	cmp	r3, #1
 8007004:	d106      	bne.n	8007014 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007008:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800700a:	4619      	mov	r1, r3
 800700c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800700e:	f7ff ff69 	bl	8006ee4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007012:	e002      	b.n	800701a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007014:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007016:	f7fa ffc1 	bl	8001f9c <HAL_UART_RxCpltCallback>
}
 800701a:	bf00      	nop
 800701c:	3770      	adds	r7, #112	; 0x70
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007034:	2b01      	cmp	r3, #1
 8007036:	d108      	bne.n	800704a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800703c:	085b      	lsrs	r3, r3, #1
 800703e:	b29b      	uxth	r3, r3
 8007040:	4619      	mov	r1, r3
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f7ff ff4e 	bl	8006ee4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007048:	e002      	b.n	8007050 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f7ff ff36 	bl	8006ebc <HAL_UART_RxHalfCpltCallback>
}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007060:	2300      	movs	r3, #0
 8007062:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007074:	2b80      	cmp	r3, #128	; 0x80
 8007076:	bf0c      	ite	eq
 8007078:	2301      	moveq	r3, #1
 800707a:	2300      	movne	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b21      	cmp	r3, #33	; 0x21
 800708a:	d108      	bne.n	800709e <UART_DMAError+0x46>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2200      	movs	r2, #0
 8007096:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007098:	68b8      	ldr	r0, [r7, #8]
 800709a:	f000 f971 	bl	8007380 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a8:	2b40      	cmp	r3, #64	; 0x40
 80070aa:	bf0c      	ite	eq
 80070ac:	2301      	moveq	r3, #1
 80070ae:	2300      	movne	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b22      	cmp	r3, #34	; 0x22
 80070be:	d108      	bne.n	80070d2 <UART_DMAError+0x7a>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d005      	beq.n	80070d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2200      	movs	r2, #0
 80070ca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80070cc:	68b8      	ldr	r0, [r7, #8]
 80070ce:	f000 f97f 	bl	80073d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	f043 0210 	orr.w	r2, r3, #16
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070de:	68b8      	ldr	r0, [r7, #8]
 80070e0:	f7ff fef6 	bl	8006ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e4:	bf00      	nop
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b090      	sub	sp, #64	; 0x40
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	4613      	mov	r3, r2
 80070fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fc:	e050      	b.n	80071a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007104:	d04c      	beq.n	80071a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <UART_WaitOnFlagUntilTimeout+0x30>
 800710c:	f7fc ff24 	bl	8003f58 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007118:	429a      	cmp	r2, r3
 800711a:	d241      	bcs.n	80071a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	330c      	adds	r3, #12
 8007122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800713c:	637a      	str	r2, [r7, #52]	; 0x34
 800713e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007144:	e841 2300 	strex	r3, r2, [r1]
 8007148:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800714a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e5      	bne.n	800711c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3314      	adds	r3, #20
 8007156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	613b      	str	r3, [r7, #16]
   return(result);
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f023 0301 	bic.w	r3, r3, #1
 8007166:	63bb      	str	r3, [r7, #56]	; 0x38
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3314      	adds	r3, #20
 800716e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007170:	623a      	str	r2, [r7, #32]
 8007172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	69f9      	ldr	r1, [r7, #28]
 8007176:	6a3a      	ldr	r2, [r7, #32]
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	61bb      	str	r3, [r7, #24]
   return(result);
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e5      	bne.n	8007150 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2220      	movs	r2, #32
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e00f      	b.n	80071c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	4013      	ands	r3, r2
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	bf0c      	ite	eq
 80071b0:	2301      	moveq	r3, #1
 80071b2:	2300      	movne	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	461a      	mov	r2, r3
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d09f      	beq.n	80070fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3740      	adds	r7, #64	; 0x40
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	88fa      	ldrh	r2, [r7, #6]
 80071e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	88fa      	ldrh	r2, [r7, #6]
 80071e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2222      	movs	r2, #34	; 0x22
 80071f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d007      	beq.n	8007216 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007214:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	695a      	ldr	r2, [r3, #20]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0201 	orr.w	r2, r2, #1
 8007224:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f042 0220 	orr.w	r2, r2, #32
 8007234:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b098      	sub	sp, #96	; 0x60
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	88fa      	ldrh	r2, [r7, #6]
 800725c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2222      	movs	r2, #34	; 0x22
 8007268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	4a40      	ldr	r2, [pc, #256]	; (8007374 <UART_Start_Receive_DMA+0x130>)
 8007272:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	4a3f      	ldr	r2, [pc, #252]	; (8007378 <UART_Start_Receive_DMA+0x134>)
 800727a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	4a3e      	ldr	r2, [pc, #248]	; (800737c <UART_Start_Receive_DMA+0x138>)
 8007282:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	2200      	movs	r2, #0
 800728a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800728c:	f107 0308 	add.w	r3, r7, #8
 8007290:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	88fb      	ldrh	r3, [r7, #6]
 80072a4:	f7fd f848 	bl	8004338 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80072a8:	2300      	movs	r3, #0
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	613b      	str	r3, [r7, #16]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	613b      	str	r3, [r7, #16]
 80072bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d019      	beq.n	8007302 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	330c      	adds	r3, #12
 80072d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	330c      	adds	r3, #12
 80072ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 80072f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80072f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80072fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e5      	bne.n	80072ce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3314      	adds	r3, #20
 8007308:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007314:	f043 0301 	orr.w	r3, r3, #1
 8007318:	657b      	str	r3, [r7, #84]	; 0x54
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3314      	adds	r3, #20
 8007320:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007322:	63ba      	str	r2, [r7, #56]	; 0x38
 8007324:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e5      	bne.n	8007302 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3314      	adds	r3, #20
 800733c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	617b      	str	r3, [r7, #20]
   return(result);
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800734c:	653b      	str	r3, [r7, #80]	; 0x50
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3314      	adds	r3, #20
 8007354:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007356:	627a      	str	r2, [r7, #36]	; 0x24
 8007358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	6a39      	ldr	r1, [r7, #32]
 800735c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	61fb      	str	r3, [r7, #28]
   return(result);
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e5      	bne.n	8007336 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3760      	adds	r7, #96	; 0x60
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	08006efd 	.word	0x08006efd
 8007378:	08007023 	.word	0x08007023
 800737c:	08007059 	.word	0x08007059

08007380 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007380:	b480      	push	{r7}
 8007382:	b089      	sub	sp, #36	; 0x24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	330c      	adds	r3, #12
 800738e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	60bb      	str	r3, [r7, #8]
   return(result);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800739e:	61fb      	str	r3, [r7, #28]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	330c      	adds	r3, #12
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	61ba      	str	r2, [r7, #24]
 80073aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6979      	ldr	r1, [r7, #20]
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	613b      	str	r3, [r7, #16]
   return(result);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e5      	bne.n	8007388 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2220      	movs	r2, #32
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80073c4:	bf00      	nop
 80073c6:	3724      	adds	r7, #36	; 0x24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b095      	sub	sp, #84	; 0x54
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	330c      	adds	r3, #12
 80073de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	330c      	adds	r3, #12
 80073f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073f8:	643a      	str	r2, [r7, #64]	; 0x40
 80073fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e5      	bne.n	80073d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3314      	adds	r3, #20
 8007412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	61fb      	str	r3, [r7, #28]
   return(result);
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	64bb      	str	r3, [r7, #72]	; 0x48
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3314      	adds	r3, #20
 800742a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800742c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800742e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e5      	bne.n	800740c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007444:	2b01      	cmp	r3, #1
 8007446:	d119      	bne.n	800747c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	330c      	adds	r3, #12
 800744e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	60bb      	str	r3, [r7, #8]
   return(result);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f023 0310 	bic.w	r3, r3, #16
 800745e:	647b      	str	r3, [r7, #68]	; 0x44
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	330c      	adds	r3, #12
 8007466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007468:	61ba      	str	r2, [r7, #24]
 800746a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6979      	ldr	r1, [r7, #20]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	613b      	str	r3, [r7, #16]
   return(result);
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e5      	bne.n	8007448 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	631a      	str	r2, [r3, #48]	; 0x30
}
 800748a:	bf00      	nop
 800748c:	3754      	adds	r7, #84	; 0x54
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7ff fd0d 	bl	8006ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074b6:	bf00      	nop
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074be:	b480      	push	{r7}
 80074c0:	b085      	sub	sp, #20
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b21      	cmp	r3, #33	; 0x21
 80074d0:	d13e      	bne.n	8007550 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074da:	d114      	bne.n	8007506 <UART_Transmit_IT+0x48>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d110      	bne.n	8007506 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	1c9a      	adds	r2, r3, #2
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	621a      	str	r2, [r3, #32]
 8007504:	e008      	b.n	8007518 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	1c59      	adds	r1, r3, #1
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6211      	str	r1, [r2, #32]
 8007510:	781a      	ldrb	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800751c:	b29b      	uxth	r3, r3
 800751e:	3b01      	subs	r3, #1
 8007520:	b29b      	uxth	r3, r3
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	4619      	mov	r1, r3
 8007526:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10f      	bne.n	800754c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800753a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800754a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	e000      	b.n	8007552 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007550:	2302      	movs	r3, #2
  }
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007574:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff fc92 	bl	8006ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b08c      	sub	sp, #48	; 0x30
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b22      	cmp	r3, #34	; 0x22
 80075a0:	f040 80ab 	bne.w	80076fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ac:	d117      	bne.n	80075de <UART_Receive_IT+0x50>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d113      	bne.n	80075de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	1c9a      	adds	r2, r3, #2
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	629a      	str	r2, [r3, #40]	; 0x28
 80075dc:	e026      	b.n	800762c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f0:	d007      	beq.n	8007602 <UART_Receive_IT+0x74>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10a      	bne.n	8007610 <UART_Receive_IT+0x82>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d106      	bne.n	8007610 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	b2da      	uxtb	r2, r3
 800760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760c:	701a      	strb	r2, [r3, #0]
 800760e:	e008      	b.n	8007622 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800761c:	b2da      	uxtb	r2, r3
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007620:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29b      	uxth	r3, r3
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	4619      	mov	r1, r3
 800763a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800763c:	2b00      	cmp	r3, #0
 800763e:	d15a      	bne.n	80076f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0220 	bic.w	r2, r2, #32
 800764e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800765e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	695a      	ldr	r2, [r3, #20]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0201 	bic.w	r2, r2, #1
 800766e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767c:	2b01      	cmp	r3, #1
 800767e:	d135      	bne.n	80076ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	330c      	adds	r3, #12
 800768c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	613b      	str	r3, [r7, #16]
   return(result);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f023 0310 	bic.w	r3, r3, #16
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	330c      	adds	r3, #12
 80076a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a6:	623a      	str	r2, [r7, #32]
 80076a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	69f9      	ldr	r1, [r7, #28]
 80076ac:	6a3a      	ldr	r2, [r7, #32]
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e5      	bne.n	8007686 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0310 	and.w	r3, r3, #16
 80076c4:	2b10      	cmp	r3, #16
 80076c6:	d10a      	bne.n	80076de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff fbfd 	bl	8006ee4 <HAL_UARTEx_RxEventCallback>
 80076ea:	e002      	b.n	80076f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fa fc55 	bl	8001f9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	e002      	b.n	80076fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	e000      	b.n	80076fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80076fa:	2302      	movs	r3, #2
  }
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3730      	adds	r7, #48	; 0x30
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007708:	b0c0      	sub	sp, #256	; 0x100
 800770a:	af00      	add	r7, sp, #0
 800770c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800771c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007720:	68d9      	ldr	r1, [r3, #12]
 8007722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	ea40 0301 	orr.w	r3, r0, r1
 800772c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800772e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007732:	689a      	ldr	r2, [r3, #8]
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	431a      	orrs	r2, r3
 800773c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	431a      	orrs	r2, r3
 8007744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	4313      	orrs	r3, r2
 800774c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800775c:	f021 010c 	bic.w	r1, r1, #12
 8007760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800776a:	430b      	orrs	r3, r1
 800776c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800776e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800777a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800777e:	6999      	ldr	r1, [r3, #24]
 8007780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	ea40 0301 	orr.w	r3, r0, r1
 800778a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800778c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	4b8f      	ldr	r3, [pc, #572]	; (80079d0 <UART_SetConfig+0x2cc>)
 8007794:	429a      	cmp	r2, r3
 8007796:	d005      	beq.n	80077a4 <UART_SetConfig+0xa0>
 8007798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	4b8d      	ldr	r3, [pc, #564]	; (80079d4 <UART_SetConfig+0x2d0>)
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d104      	bne.n	80077ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077a4:	f7fd ff56 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 80077a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80077ac:	e003      	b.n	80077b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077ae:	f7fd ff3d 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 80077b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c0:	f040 810c 	bne.w	80079dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077c8:	2200      	movs	r2, #0
 80077ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80077d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80077d6:	4622      	mov	r2, r4
 80077d8:	462b      	mov	r3, r5
 80077da:	1891      	adds	r1, r2, r2
 80077dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80077de:	415b      	adcs	r3, r3
 80077e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077e6:	4621      	mov	r1, r4
 80077e8:	eb12 0801 	adds.w	r8, r2, r1
 80077ec:	4629      	mov	r1, r5
 80077ee:	eb43 0901 	adc.w	r9, r3, r1
 80077f2:	f04f 0200 	mov.w	r2, #0
 80077f6:	f04f 0300 	mov.w	r3, #0
 80077fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007806:	4690      	mov	r8, r2
 8007808:	4699      	mov	r9, r3
 800780a:	4623      	mov	r3, r4
 800780c:	eb18 0303 	adds.w	r3, r8, r3
 8007810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007814:	462b      	mov	r3, r5
 8007816:	eb49 0303 	adc.w	r3, r9, r3
 800781a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800781e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800782a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800782e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007832:	460b      	mov	r3, r1
 8007834:	18db      	adds	r3, r3, r3
 8007836:	653b      	str	r3, [r7, #80]	; 0x50
 8007838:	4613      	mov	r3, r2
 800783a:	eb42 0303 	adc.w	r3, r2, r3
 800783e:	657b      	str	r3, [r7, #84]	; 0x54
 8007840:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007844:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007848:	f7f9 f9fe 	bl	8000c48 <__aeabi_uldivmod>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	4b61      	ldr	r3, [pc, #388]	; (80079d8 <UART_SetConfig+0x2d4>)
 8007852:	fba3 2302 	umull	r2, r3, r3, r2
 8007856:	095b      	lsrs	r3, r3, #5
 8007858:	011c      	lsls	r4, r3, #4
 800785a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800785e:	2200      	movs	r2, #0
 8007860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007864:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007868:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800786c:	4642      	mov	r2, r8
 800786e:	464b      	mov	r3, r9
 8007870:	1891      	adds	r1, r2, r2
 8007872:	64b9      	str	r1, [r7, #72]	; 0x48
 8007874:	415b      	adcs	r3, r3
 8007876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007878:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800787c:	4641      	mov	r1, r8
 800787e:	eb12 0a01 	adds.w	sl, r2, r1
 8007882:	4649      	mov	r1, r9
 8007884:	eb43 0b01 	adc.w	fp, r3, r1
 8007888:	f04f 0200 	mov.w	r2, #0
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007894:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007898:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800789c:	4692      	mov	sl, r2
 800789e:	469b      	mov	fp, r3
 80078a0:	4643      	mov	r3, r8
 80078a2:	eb1a 0303 	adds.w	r3, sl, r3
 80078a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078aa:	464b      	mov	r3, r9
 80078ac:	eb4b 0303 	adc.w	r3, fp, r3
 80078b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80078c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80078c8:	460b      	mov	r3, r1
 80078ca:	18db      	adds	r3, r3, r3
 80078cc:	643b      	str	r3, [r7, #64]	; 0x40
 80078ce:	4613      	mov	r3, r2
 80078d0:	eb42 0303 	adc.w	r3, r2, r3
 80078d4:	647b      	str	r3, [r7, #68]	; 0x44
 80078d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80078de:	f7f9 f9b3 	bl	8000c48 <__aeabi_uldivmod>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4611      	mov	r1, r2
 80078e8:	4b3b      	ldr	r3, [pc, #236]	; (80079d8 <UART_SetConfig+0x2d4>)
 80078ea:	fba3 2301 	umull	r2, r3, r3, r1
 80078ee:	095b      	lsrs	r3, r3, #5
 80078f0:	2264      	movs	r2, #100	; 0x64
 80078f2:	fb02 f303 	mul.w	r3, r2, r3
 80078f6:	1acb      	subs	r3, r1, r3
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80078fe:	4b36      	ldr	r3, [pc, #216]	; (80079d8 <UART_SetConfig+0x2d4>)
 8007900:	fba3 2302 	umull	r2, r3, r3, r2
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800790c:	441c      	add	r4, r3
 800790e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007912:	2200      	movs	r2, #0
 8007914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007918:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800791c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007920:	4642      	mov	r2, r8
 8007922:	464b      	mov	r3, r9
 8007924:	1891      	adds	r1, r2, r2
 8007926:	63b9      	str	r1, [r7, #56]	; 0x38
 8007928:	415b      	adcs	r3, r3
 800792a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800792c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007930:	4641      	mov	r1, r8
 8007932:	1851      	adds	r1, r2, r1
 8007934:	6339      	str	r1, [r7, #48]	; 0x30
 8007936:	4649      	mov	r1, r9
 8007938:	414b      	adcs	r3, r1
 800793a:	637b      	str	r3, [r7, #52]	; 0x34
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	f04f 0300 	mov.w	r3, #0
 8007944:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007948:	4659      	mov	r1, fp
 800794a:	00cb      	lsls	r3, r1, #3
 800794c:	4651      	mov	r1, sl
 800794e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007952:	4651      	mov	r1, sl
 8007954:	00ca      	lsls	r2, r1, #3
 8007956:	4610      	mov	r0, r2
 8007958:	4619      	mov	r1, r3
 800795a:	4603      	mov	r3, r0
 800795c:	4642      	mov	r2, r8
 800795e:	189b      	adds	r3, r3, r2
 8007960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007964:	464b      	mov	r3, r9
 8007966:	460a      	mov	r2, r1
 8007968:	eb42 0303 	adc.w	r3, r2, r3
 800796c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800797c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007980:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007984:	460b      	mov	r3, r1
 8007986:	18db      	adds	r3, r3, r3
 8007988:	62bb      	str	r3, [r7, #40]	; 0x28
 800798a:	4613      	mov	r3, r2
 800798c:	eb42 0303 	adc.w	r3, r2, r3
 8007990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007996:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800799a:	f7f9 f955 	bl	8000c48 <__aeabi_uldivmod>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4b0d      	ldr	r3, [pc, #52]	; (80079d8 <UART_SetConfig+0x2d4>)
 80079a4:	fba3 1302 	umull	r1, r3, r3, r2
 80079a8:	095b      	lsrs	r3, r3, #5
 80079aa:	2164      	movs	r1, #100	; 0x64
 80079ac:	fb01 f303 	mul.w	r3, r1, r3
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	3332      	adds	r3, #50	; 0x32
 80079b6:	4a08      	ldr	r2, [pc, #32]	; (80079d8 <UART_SetConfig+0x2d4>)
 80079b8:	fba2 2303 	umull	r2, r3, r2, r3
 80079bc:	095b      	lsrs	r3, r3, #5
 80079be:	f003 0207 	and.w	r2, r3, #7
 80079c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4422      	add	r2, r4
 80079ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079cc:	e105      	b.n	8007bda <UART_SetConfig+0x4d6>
 80079ce:	bf00      	nop
 80079d0:	40011000 	.word	0x40011000
 80079d4:	40011400 	.word	0x40011400
 80079d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80079e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80079ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80079ee:	4642      	mov	r2, r8
 80079f0:	464b      	mov	r3, r9
 80079f2:	1891      	adds	r1, r2, r2
 80079f4:	6239      	str	r1, [r7, #32]
 80079f6:	415b      	adcs	r3, r3
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
 80079fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079fe:	4641      	mov	r1, r8
 8007a00:	1854      	adds	r4, r2, r1
 8007a02:	4649      	mov	r1, r9
 8007a04:	eb43 0501 	adc.w	r5, r3, r1
 8007a08:	f04f 0200 	mov.w	r2, #0
 8007a0c:	f04f 0300 	mov.w	r3, #0
 8007a10:	00eb      	lsls	r3, r5, #3
 8007a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a16:	00e2      	lsls	r2, r4, #3
 8007a18:	4614      	mov	r4, r2
 8007a1a:	461d      	mov	r5, r3
 8007a1c:	4643      	mov	r3, r8
 8007a1e:	18e3      	adds	r3, r4, r3
 8007a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a24:	464b      	mov	r3, r9
 8007a26:	eb45 0303 	adc.w	r3, r5, r3
 8007a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a3e:	f04f 0200 	mov.w	r2, #0
 8007a42:	f04f 0300 	mov.w	r3, #0
 8007a46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	008b      	lsls	r3, r1, #2
 8007a4e:	4621      	mov	r1, r4
 8007a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a54:	4621      	mov	r1, r4
 8007a56:	008a      	lsls	r2, r1, #2
 8007a58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a5c:	f7f9 f8f4 	bl	8000c48 <__aeabi_uldivmod>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4b60      	ldr	r3, [pc, #384]	; (8007be8 <UART_SetConfig+0x4e4>)
 8007a66:	fba3 2302 	umull	r2, r3, r3, r2
 8007a6a:	095b      	lsrs	r3, r3, #5
 8007a6c:	011c      	lsls	r4, r3, #4
 8007a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007a80:	4642      	mov	r2, r8
 8007a82:	464b      	mov	r3, r9
 8007a84:	1891      	adds	r1, r2, r2
 8007a86:	61b9      	str	r1, [r7, #24]
 8007a88:	415b      	adcs	r3, r3
 8007a8a:	61fb      	str	r3, [r7, #28]
 8007a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a90:	4641      	mov	r1, r8
 8007a92:	1851      	adds	r1, r2, r1
 8007a94:	6139      	str	r1, [r7, #16]
 8007a96:	4649      	mov	r1, r9
 8007a98:	414b      	adcs	r3, r1
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	f04f 0300 	mov.w	r3, #0
 8007aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007aa8:	4659      	mov	r1, fp
 8007aaa:	00cb      	lsls	r3, r1, #3
 8007aac:	4651      	mov	r1, sl
 8007aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ab2:	4651      	mov	r1, sl
 8007ab4:	00ca      	lsls	r2, r1, #3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4603      	mov	r3, r0
 8007abc:	4642      	mov	r2, r8
 8007abe:	189b      	adds	r3, r3, r2
 8007ac0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ac4:	464b      	mov	r3, r9
 8007ac6:	460a      	mov	r2, r1
 8007ac8:	eb42 0303 	adc.w	r3, r2, r3
 8007acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ada:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	f04f 0300 	mov.w	r3, #0
 8007ae4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ae8:	4649      	mov	r1, r9
 8007aea:	008b      	lsls	r3, r1, #2
 8007aec:	4641      	mov	r1, r8
 8007aee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007af2:	4641      	mov	r1, r8
 8007af4:	008a      	lsls	r2, r1, #2
 8007af6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007afa:	f7f9 f8a5 	bl	8000c48 <__aeabi_uldivmod>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	4b39      	ldr	r3, [pc, #228]	; (8007be8 <UART_SetConfig+0x4e4>)
 8007b04:	fba3 1302 	umull	r1, r3, r3, r2
 8007b08:	095b      	lsrs	r3, r3, #5
 8007b0a:	2164      	movs	r1, #100	; 0x64
 8007b0c:	fb01 f303 	mul.w	r3, r1, r3
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	3332      	adds	r3, #50	; 0x32
 8007b16:	4a34      	ldr	r2, [pc, #208]	; (8007be8 <UART_SetConfig+0x4e4>)
 8007b18:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1c:	095b      	lsrs	r3, r3, #5
 8007b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b22:	441c      	add	r4, r3
 8007b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b28:	2200      	movs	r2, #0
 8007b2a:	673b      	str	r3, [r7, #112]	; 0x70
 8007b2c:	677a      	str	r2, [r7, #116]	; 0x74
 8007b2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b32:	4642      	mov	r2, r8
 8007b34:	464b      	mov	r3, r9
 8007b36:	1891      	adds	r1, r2, r2
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	415b      	adcs	r3, r3
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b42:	4641      	mov	r1, r8
 8007b44:	1851      	adds	r1, r2, r1
 8007b46:	6039      	str	r1, [r7, #0]
 8007b48:	4649      	mov	r1, r9
 8007b4a:	414b      	adcs	r3, r1
 8007b4c:	607b      	str	r3, [r7, #4]
 8007b4e:	f04f 0200 	mov.w	r2, #0
 8007b52:	f04f 0300 	mov.w	r3, #0
 8007b56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b5a:	4659      	mov	r1, fp
 8007b5c:	00cb      	lsls	r3, r1, #3
 8007b5e:	4651      	mov	r1, sl
 8007b60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b64:	4651      	mov	r1, sl
 8007b66:	00ca      	lsls	r2, r1, #3
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	4642      	mov	r2, r8
 8007b70:	189b      	adds	r3, r3, r2
 8007b72:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b74:	464b      	mov	r3, r9
 8007b76:	460a      	mov	r2, r1
 8007b78:	eb42 0303 	adc.w	r3, r2, r3
 8007b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	663b      	str	r3, [r7, #96]	; 0x60
 8007b88:	667a      	str	r2, [r7, #100]	; 0x64
 8007b8a:	f04f 0200 	mov.w	r2, #0
 8007b8e:	f04f 0300 	mov.w	r3, #0
 8007b92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007b96:	4649      	mov	r1, r9
 8007b98:	008b      	lsls	r3, r1, #2
 8007b9a:	4641      	mov	r1, r8
 8007b9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	008a      	lsls	r2, r1, #2
 8007ba4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ba8:	f7f9 f84e 	bl	8000c48 <__aeabi_uldivmod>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4b0d      	ldr	r3, [pc, #52]	; (8007be8 <UART_SetConfig+0x4e4>)
 8007bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8007bb6:	095b      	lsrs	r3, r3, #5
 8007bb8:	2164      	movs	r1, #100	; 0x64
 8007bba:	fb01 f303 	mul.w	r3, r1, r3
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	3332      	adds	r3, #50	; 0x32
 8007bc4:	4a08      	ldr	r2, [pc, #32]	; (8007be8 <UART_SetConfig+0x4e4>)
 8007bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bca:	095b      	lsrs	r3, r3, #5
 8007bcc:	f003 020f 	and.w	r2, r3, #15
 8007bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4422      	add	r2, r4
 8007bd8:	609a      	str	r2, [r3, #8]
}
 8007bda:	bf00      	nop
 8007bdc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007be0:	46bd      	mov	sp, r7
 8007be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007be6:	bf00      	nop
 8007be8:	51eb851f 	.word	0x51eb851f

08007bec <__errno>:
 8007bec:	4b01      	ldr	r3, [pc, #4]	; (8007bf4 <__errno+0x8>)
 8007bee:	6818      	ldr	r0, [r3, #0]
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20000044 	.word	0x20000044

08007bf8 <__libc_init_array>:
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	4d0d      	ldr	r5, [pc, #52]	; (8007c30 <__libc_init_array+0x38>)
 8007bfc:	4c0d      	ldr	r4, [pc, #52]	; (8007c34 <__libc_init_array+0x3c>)
 8007bfe:	1b64      	subs	r4, r4, r5
 8007c00:	10a4      	asrs	r4, r4, #2
 8007c02:	2600      	movs	r6, #0
 8007c04:	42a6      	cmp	r6, r4
 8007c06:	d109      	bne.n	8007c1c <__libc_init_array+0x24>
 8007c08:	4d0b      	ldr	r5, [pc, #44]	; (8007c38 <__libc_init_array+0x40>)
 8007c0a:	4c0c      	ldr	r4, [pc, #48]	; (8007c3c <__libc_init_array+0x44>)
 8007c0c:	f003 fca2 	bl	800b554 <_init>
 8007c10:	1b64      	subs	r4, r4, r5
 8007c12:	10a4      	asrs	r4, r4, #2
 8007c14:	2600      	movs	r6, #0
 8007c16:	42a6      	cmp	r6, r4
 8007c18:	d105      	bne.n	8007c26 <__libc_init_array+0x2e>
 8007c1a:	bd70      	pop	{r4, r5, r6, pc}
 8007c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c20:	4798      	blx	r3
 8007c22:	3601      	adds	r6, #1
 8007c24:	e7ee      	b.n	8007c04 <__libc_init_array+0xc>
 8007c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c2a:	4798      	blx	r3
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	e7f2      	b.n	8007c16 <__libc_init_array+0x1e>
 8007c30:	0800bd9c 	.word	0x0800bd9c
 8007c34:	0800bd9c 	.word	0x0800bd9c
 8007c38:	0800bd9c 	.word	0x0800bd9c
 8007c3c:	0800bda0 	.word	0x0800bda0

08007c40 <memcpy>:
 8007c40:	440a      	add	r2, r1
 8007c42:	4291      	cmp	r1, r2
 8007c44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c48:	d100      	bne.n	8007c4c <memcpy+0xc>
 8007c4a:	4770      	bx	lr
 8007c4c:	b510      	push	{r4, lr}
 8007c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c56:	4291      	cmp	r1, r2
 8007c58:	d1f9      	bne.n	8007c4e <memcpy+0xe>
 8007c5a:	bd10      	pop	{r4, pc}

08007c5c <memset>:
 8007c5c:	4402      	add	r2, r0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d100      	bne.n	8007c66 <memset+0xa>
 8007c64:	4770      	bx	lr
 8007c66:	f803 1b01 	strb.w	r1, [r3], #1
 8007c6a:	e7f9      	b.n	8007c60 <memset+0x4>

08007c6c <__cvt>:
 8007c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c70:	ec55 4b10 	vmov	r4, r5, d0
 8007c74:	2d00      	cmp	r5, #0
 8007c76:	460e      	mov	r6, r1
 8007c78:	4619      	mov	r1, r3
 8007c7a:	462b      	mov	r3, r5
 8007c7c:	bfbb      	ittet	lt
 8007c7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c82:	461d      	movlt	r5, r3
 8007c84:	2300      	movge	r3, #0
 8007c86:	232d      	movlt	r3, #45	; 0x2d
 8007c88:	700b      	strb	r3, [r1, #0]
 8007c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c90:	4691      	mov	r9, r2
 8007c92:	f023 0820 	bic.w	r8, r3, #32
 8007c96:	bfbc      	itt	lt
 8007c98:	4622      	movlt	r2, r4
 8007c9a:	4614      	movlt	r4, r2
 8007c9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ca0:	d005      	beq.n	8007cae <__cvt+0x42>
 8007ca2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007ca6:	d100      	bne.n	8007caa <__cvt+0x3e>
 8007ca8:	3601      	adds	r6, #1
 8007caa:	2102      	movs	r1, #2
 8007cac:	e000      	b.n	8007cb0 <__cvt+0x44>
 8007cae:	2103      	movs	r1, #3
 8007cb0:	ab03      	add	r3, sp, #12
 8007cb2:	9301      	str	r3, [sp, #4]
 8007cb4:	ab02      	add	r3, sp, #8
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	ec45 4b10 	vmov	d0, r4, r5
 8007cbc:	4653      	mov	r3, sl
 8007cbe:	4632      	mov	r2, r6
 8007cc0:	f000 fcea 	bl	8008698 <_dtoa_r>
 8007cc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007cc8:	4607      	mov	r7, r0
 8007cca:	d102      	bne.n	8007cd2 <__cvt+0x66>
 8007ccc:	f019 0f01 	tst.w	r9, #1
 8007cd0:	d022      	beq.n	8007d18 <__cvt+0xac>
 8007cd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cd6:	eb07 0906 	add.w	r9, r7, r6
 8007cda:	d110      	bne.n	8007cfe <__cvt+0x92>
 8007cdc:	783b      	ldrb	r3, [r7, #0]
 8007cde:	2b30      	cmp	r3, #48	; 0x30
 8007ce0:	d10a      	bne.n	8007cf8 <__cvt+0x8c>
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	4629      	mov	r1, r5
 8007cea:	f7f8 feed 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cee:	b918      	cbnz	r0, 8007cf8 <__cvt+0x8c>
 8007cf0:	f1c6 0601 	rsb	r6, r6, #1
 8007cf4:	f8ca 6000 	str.w	r6, [sl]
 8007cf8:	f8da 3000 	ldr.w	r3, [sl]
 8007cfc:	4499      	add	r9, r3
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2300      	movs	r3, #0
 8007d02:	4620      	mov	r0, r4
 8007d04:	4629      	mov	r1, r5
 8007d06:	f7f8 fedf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d0a:	b108      	cbz	r0, 8007d10 <__cvt+0xa4>
 8007d0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d10:	2230      	movs	r2, #48	; 0x30
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	454b      	cmp	r3, r9
 8007d16:	d307      	bcc.n	8007d28 <__cvt+0xbc>
 8007d18:	9b03      	ldr	r3, [sp, #12]
 8007d1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d1c:	1bdb      	subs	r3, r3, r7
 8007d1e:	4638      	mov	r0, r7
 8007d20:	6013      	str	r3, [r2, #0]
 8007d22:	b004      	add	sp, #16
 8007d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d28:	1c59      	adds	r1, r3, #1
 8007d2a:	9103      	str	r1, [sp, #12]
 8007d2c:	701a      	strb	r2, [r3, #0]
 8007d2e:	e7f0      	b.n	8007d12 <__cvt+0xa6>

08007d30 <__exponent>:
 8007d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d32:	4603      	mov	r3, r0
 8007d34:	2900      	cmp	r1, #0
 8007d36:	bfb8      	it	lt
 8007d38:	4249      	neglt	r1, r1
 8007d3a:	f803 2b02 	strb.w	r2, [r3], #2
 8007d3e:	bfb4      	ite	lt
 8007d40:	222d      	movlt	r2, #45	; 0x2d
 8007d42:	222b      	movge	r2, #43	; 0x2b
 8007d44:	2909      	cmp	r1, #9
 8007d46:	7042      	strb	r2, [r0, #1]
 8007d48:	dd2a      	ble.n	8007da0 <__exponent+0x70>
 8007d4a:	f10d 0407 	add.w	r4, sp, #7
 8007d4e:	46a4      	mov	ip, r4
 8007d50:	270a      	movs	r7, #10
 8007d52:	46a6      	mov	lr, r4
 8007d54:	460a      	mov	r2, r1
 8007d56:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d5a:	fb07 1516 	mls	r5, r7, r6, r1
 8007d5e:	3530      	adds	r5, #48	; 0x30
 8007d60:	2a63      	cmp	r2, #99	; 0x63
 8007d62:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007d66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	dcf1      	bgt.n	8007d52 <__exponent+0x22>
 8007d6e:	3130      	adds	r1, #48	; 0x30
 8007d70:	f1ae 0502 	sub.w	r5, lr, #2
 8007d74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d78:	1c44      	adds	r4, r0, #1
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	4561      	cmp	r1, ip
 8007d7e:	d30a      	bcc.n	8007d96 <__exponent+0x66>
 8007d80:	f10d 0209 	add.w	r2, sp, #9
 8007d84:	eba2 020e 	sub.w	r2, r2, lr
 8007d88:	4565      	cmp	r5, ip
 8007d8a:	bf88      	it	hi
 8007d8c:	2200      	movhi	r2, #0
 8007d8e:	4413      	add	r3, r2
 8007d90:	1a18      	subs	r0, r3, r0
 8007d92:	b003      	add	sp, #12
 8007d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d9e:	e7ed      	b.n	8007d7c <__exponent+0x4c>
 8007da0:	2330      	movs	r3, #48	; 0x30
 8007da2:	3130      	adds	r1, #48	; 0x30
 8007da4:	7083      	strb	r3, [r0, #2]
 8007da6:	70c1      	strb	r1, [r0, #3]
 8007da8:	1d03      	adds	r3, r0, #4
 8007daa:	e7f1      	b.n	8007d90 <__exponent+0x60>

08007dac <_printf_float>:
 8007dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	ed2d 8b02 	vpush	{d8}
 8007db4:	b08d      	sub	sp, #52	; 0x34
 8007db6:	460c      	mov	r4, r1
 8007db8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007dbc:	4616      	mov	r6, r2
 8007dbe:	461f      	mov	r7, r3
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	f001 fa57 	bl	8009274 <_localeconv_r>
 8007dc6:	f8d0 a000 	ldr.w	sl, [r0]
 8007dca:	4650      	mov	r0, sl
 8007dcc:	f7f8 fa00 	bl	80001d0 <strlen>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	9305      	str	r3, [sp, #20]
 8007dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ddc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007de0:	3307      	adds	r3, #7
 8007de2:	f023 0307 	bic.w	r3, r3, #7
 8007de6:	f103 0208 	add.w	r2, r3, #8
 8007dea:	f8c8 2000 	str.w	r2, [r8]
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007df6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007dfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dfe:	9307      	str	r3, [sp, #28]
 8007e00:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e04:	ee08 0a10 	vmov	s16, r0
 8007e08:	4b9f      	ldr	r3, [pc, #636]	; (8008088 <_printf_float+0x2dc>)
 8007e0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e12:	f7f8 fe8b 	bl	8000b2c <__aeabi_dcmpun>
 8007e16:	bb88      	cbnz	r0, 8007e7c <_printf_float+0xd0>
 8007e18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e1c:	4b9a      	ldr	r3, [pc, #616]	; (8008088 <_printf_float+0x2dc>)
 8007e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e22:	f7f8 fe65 	bl	8000af0 <__aeabi_dcmple>
 8007e26:	bb48      	cbnz	r0, 8007e7c <_printf_float+0xd0>
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	4649      	mov	r1, r9
 8007e30:	f7f8 fe54 	bl	8000adc <__aeabi_dcmplt>
 8007e34:	b110      	cbz	r0, 8007e3c <_printf_float+0x90>
 8007e36:	232d      	movs	r3, #45	; 0x2d
 8007e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e3c:	4b93      	ldr	r3, [pc, #588]	; (800808c <_printf_float+0x2e0>)
 8007e3e:	4894      	ldr	r0, [pc, #592]	; (8008090 <_printf_float+0x2e4>)
 8007e40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e44:	bf94      	ite	ls
 8007e46:	4698      	movls	r8, r3
 8007e48:	4680      	movhi	r8, r0
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	6123      	str	r3, [r4, #16]
 8007e4e:	9b05      	ldr	r3, [sp, #20]
 8007e50:	f023 0204 	bic.w	r2, r3, #4
 8007e54:	6022      	str	r2, [r4, #0]
 8007e56:	f04f 0900 	mov.w	r9, #0
 8007e5a:	9700      	str	r7, [sp, #0]
 8007e5c:	4633      	mov	r3, r6
 8007e5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e60:	4621      	mov	r1, r4
 8007e62:	4628      	mov	r0, r5
 8007e64:	f000 f9d8 	bl	8008218 <_printf_common>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	f040 8090 	bne.w	8007f8e <_printf_float+0x1e2>
 8007e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e72:	b00d      	add	sp, #52	; 0x34
 8007e74:	ecbd 8b02 	vpop	{d8}
 8007e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	464b      	mov	r3, r9
 8007e80:	4640      	mov	r0, r8
 8007e82:	4649      	mov	r1, r9
 8007e84:	f7f8 fe52 	bl	8000b2c <__aeabi_dcmpun>
 8007e88:	b140      	cbz	r0, 8007e9c <_printf_float+0xf0>
 8007e8a:	464b      	mov	r3, r9
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	bfbc      	itt	lt
 8007e90:	232d      	movlt	r3, #45	; 0x2d
 8007e92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e96:	487f      	ldr	r0, [pc, #508]	; (8008094 <_printf_float+0x2e8>)
 8007e98:	4b7f      	ldr	r3, [pc, #508]	; (8008098 <_printf_float+0x2ec>)
 8007e9a:	e7d1      	b.n	8007e40 <_printf_float+0x94>
 8007e9c:	6863      	ldr	r3, [r4, #4]
 8007e9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ea2:	9206      	str	r2, [sp, #24]
 8007ea4:	1c5a      	adds	r2, r3, #1
 8007ea6:	d13f      	bne.n	8007f28 <_printf_float+0x17c>
 8007ea8:	2306      	movs	r3, #6
 8007eaa:	6063      	str	r3, [r4, #4]
 8007eac:	9b05      	ldr	r3, [sp, #20]
 8007eae:	6861      	ldr	r1, [r4, #4]
 8007eb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9303      	str	r3, [sp, #12]
 8007eb8:	ab0a      	add	r3, sp, #40	; 0x28
 8007eba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007ebe:	ab09      	add	r3, sp, #36	; 0x24
 8007ec0:	ec49 8b10 	vmov	d0, r8, r9
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	6022      	str	r2, [r4, #0]
 8007ec8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ecc:	4628      	mov	r0, r5
 8007ece:	f7ff fecd 	bl	8007c6c <__cvt>
 8007ed2:	9b06      	ldr	r3, [sp, #24]
 8007ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ed6:	2b47      	cmp	r3, #71	; 0x47
 8007ed8:	4680      	mov	r8, r0
 8007eda:	d108      	bne.n	8007eee <_printf_float+0x142>
 8007edc:	1cc8      	adds	r0, r1, #3
 8007ede:	db02      	blt.n	8007ee6 <_printf_float+0x13a>
 8007ee0:	6863      	ldr	r3, [r4, #4]
 8007ee2:	4299      	cmp	r1, r3
 8007ee4:	dd41      	ble.n	8007f6a <_printf_float+0x1be>
 8007ee6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007eea:	fa5f fb8b 	uxtb.w	fp, fp
 8007eee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ef2:	d820      	bhi.n	8007f36 <_printf_float+0x18a>
 8007ef4:	3901      	subs	r1, #1
 8007ef6:	465a      	mov	r2, fp
 8007ef8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007efc:	9109      	str	r1, [sp, #36]	; 0x24
 8007efe:	f7ff ff17 	bl	8007d30 <__exponent>
 8007f02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f04:	1813      	adds	r3, r2, r0
 8007f06:	2a01      	cmp	r2, #1
 8007f08:	4681      	mov	r9, r0
 8007f0a:	6123      	str	r3, [r4, #16]
 8007f0c:	dc02      	bgt.n	8007f14 <_printf_float+0x168>
 8007f0e:	6822      	ldr	r2, [r4, #0]
 8007f10:	07d2      	lsls	r2, r2, #31
 8007f12:	d501      	bpl.n	8007f18 <_printf_float+0x16c>
 8007f14:	3301      	adds	r3, #1
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d09c      	beq.n	8007e5a <_printf_float+0xae>
 8007f20:	232d      	movs	r3, #45	; 0x2d
 8007f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f26:	e798      	b.n	8007e5a <_printf_float+0xae>
 8007f28:	9a06      	ldr	r2, [sp, #24]
 8007f2a:	2a47      	cmp	r2, #71	; 0x47
 8007f2c:	d1be      	bne.n	8007eac <_printf_float+0x100>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1bc      	bne.n	8007eac <_printf_float+0x100>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e7b9      	b.n	8007eaa <_printf_float+0xfe>
 8007f36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f3a:	d118      	bne.n	8007f6e <_printf_float+0x1c2>
 8007f3c:	2900      	cmp	r1, #0
 8007f3e:	6863      	ldr	r3, [r4, #4]
 8007f40:	dd0b      	ble.n	8007f5a <_printf_float+0x1ae>
 8007f42:	6121      	str	r1, [r4, #16]
 8007f44:	b913      	cbnz	r3, 8007f4c <_printf_float+0x1a0>
 8007f46:	6822      	ldr	r2, [r4, #0]
 8007f48:	07d0      	lsls	r0, r2, #31
 8007f4a:	d502      	bpl.n	8007f52 <_printf_float+0x1a6>
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	440b      	add	r3, r1
 8007f50:	6123      	str	r3, [r4, #16]
 8007f52:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f54:	f04f 0900 	mov.w	r9, #0
 8007f58:	e7de      	b.n	8007f18 <_printf_float+0x16c>
 8007f5a:	b913      	cbnz	r3, 8007f62 <_printf_float+0x1b6>
 8007f5c:	6822      	ldr	r2, [r4, #0]
 8007f5e:	07d2      	lsls	r2, r2, #31
 8007f60:	d501      	bpl.n	8007f66 <_printf_float+0x1ba>
 8007f62:	3302      	adds	r3, #2
 8007f64:	e7f4      	b.n	8007f50 <_printf_float+0x1a4>
 8007f66:	2301      	movs	r3, #1
 8007f68:	e7f2      	b.n	8007f50 <_printf_float+0x1a4>
 8007f6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f70:	4299      	cmp	r1, r3
 8007f72:	db05      	blt.n	8007f80 <_printf_float+0x1d4>
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	6121      	str	r1, [r4, #16]
 8007f78:	07d8      	lsls	r0, r3, #31
 8007f7a:	d5ea      	bpl.n	8007f52 <_printf_float+0x1a6>
 8007f7c:	1c4b      	adds	r3, r1, #1
 8007f7e:	e7e7      	b.n	8007f50 <_printf_float+0x1a4>
 8007f80:	2900      	cmp	r1, #0
 8007f82:	bfd4      	ite	le
 8007f84:	f1c1 0202 	rsble	r2, r1, #2
 8007f88:	2201      	movgt	r2, #1
 8007f8a:	4413      	add	r3, r2
 8007f8c:	e7e0      	b.n	8007f50 <_printf_float+0x1a4>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	055a      	lsls	r2, r3, #21
 8007f92:	d407      	bmi.n	8007fa4 <_printf_float+0x1f8>
 8007f94:	6923      	ldr	r3, [r4, #16]
 8007f96:	4642      	mov	r2, r8
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	47b8      	blx	r7
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	d12c      	bne.n	8007ffc <_printf_float+0x250>
 8007fa2:	e764      	b.n	8007e6e <_printf_float+0xc2>
 8007fa4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fa8:	f240 80e0 	bls.w	800816c <_printf_float+0x3c0>
 8007fac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f7f8 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d034      	beq.n	8008026 <_printf_float+0x27a>
 8007fbc:	4a37      	ldr	r2, [pc, #220]	; (800809c <_printf_float+0x2f0>)
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	47b8      	blx	r7
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	f43f af51 	beq.w	8007e6e <_printf_float+0xc2>
 8007fcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	db02      	blt.n	8007fda <_printf_float+0x22e>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	07d8      	lsls	r0, r3, #31
 8007fd8:	d510      	bpl.n	8007ffc <_printf_float+0x250>
 8007fda:	ee18 3a10 	vmov	r3, s16
 8007fde:	4652      	mov	r2, sl
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f43f af41 	beq.w	8007e6e <_printf_float+0xc2>
 8007fec:	f04f 0800 	mov.w	r8, #0
 8007ff0:	f104 091a 	add.w	r9, r4, #26
 8007ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	4543      	cmp	r3, r8
 8007ffa:	dc09      	bgt.n	8008010 <_printf_float+0x264>
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	079b      	lsls	r3, r3, #30
 8008000:	f100 8105 	bmi.w	800820e <_printf_float+0x462>
 8008004:	68e0      	ldr	r0, [r4, #12]
 8008006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008008:	4298      	cmp	r0, r3
 800800a:	bfb8      	it	lt
 800800c:	4618      	movlt	r0, r3
 800800e:	e730      	b.n	8007e72 <_printf_float+0xc6>
 8008010:	2301      	movs	r3, #1
 8008012:	464a      	mov	r2, r9
 8008014:	4631      	mov	r1, r6
 8008016:	4628      	mov	r0, r5
 8008018:	47b8      	blx	r7
 800801a:	3001      	adds	r0, #1
 800801c:	f43f af27 	beq.w	8007e6e <_printf_float+0xc2>
 8008020:	f108 0801 	add.w	r8, r8, #1
 8008024:	e7e6      	b.n	8007ff4 <_printf_float+0x248>
 8008026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008028:	2b00      	cmp	r3, #0
 800802a:	dc39      	bgt.n	80080a0 <_printf_float+0x2f4>
 800802c:	4a1b      	ldr	r2, [pc, #108]	; (800809c <_printf_float+0x2f0>)
 800802e:	2301      	movs	r3, #1
 8008030:	4631      	mov	r1, r6
 8008032:	4628      	mov	r0, r5
 8008034:	47b8      	blx	r7
 8008036:	3001      	adds	r0, #1
 8008038:	f43f af19 	beq.w	8007e6e <_printf_float+0xc2>
 800803c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008040:	4313      	orrs	r3, r2
 8008042:	d102      	bne.n	800804a <_printf_float+0x29e>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	07d9      	lsls	r1, r3, #31
 8008048:	d5d8      	bpl.n	8007ffc <_printf_float+0x250>
 800804a:	ee18 3a10 	vmov	r3, s16
 800804e:	4652      	mov	r2, sl
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	f43f af09 	beq.w	8007e6e <_printf_float+0xc2>
 800805c:	f04f 0900 	mov.w	r9, #0
 8008060:	f104 0a1a 	add.w	sl, r4, #26
 8008064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008066:	425b      	negs	r3, r3
 8008068:	454b      	cmp	r3, r9
 800806a:	dc01      	bgt.n	8008070 <_printf_float+0x2c4>
 800806c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800806e:	e792      	b.n	8007f96 <_printf_float+0x1ea>
 8008070:	2301      	movs	r3, #1
 8008072:	4652      	mov	r2, sl
 8008074:	4631      	mov	r1, r6
 8008076:	4628      	mov	r0, r5
 8008078:	47b8      	blx	r7
 800807a:	3001      	adds	r0, #1
 800807c:	f43f aef7 	beq.w	8007e6e <_printf_float+0xc2>
 8008080:	f109 0901 	add.w	r9, r9, #1
 8008084:	e7ee      	b.n	8008064 <_printf_float+0x2b8>
 8008086:	bf00      	nop
 8008088:	7fefffff 	.word	0x7fefffff
 800808c:	0800b5f0 	.word	0x0800b5f0
 8008090:	0800b5f4 	.word	0x0800b5f4
 8008094:	0800b5fc 	.word	0x0800b5fc
 8008098:	0800b5f8 	.word	0x0800b5f8
 800809c:	0800b600 	.word	0x0800b600
 80080a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080a4:	429a      	cmp	r2, r3
 80080a6:	bfa8      	it	ge
 80080a8:	461a      	movge	r2, r3
 80080aa:	2a00      	cmp	r2, #0
 80080ac:	4691      	mov	r9, r2
 80080ae:	dc37      	bgt.n	8008120 <_printf_float+0x374>
 80080b0:	f04f 0b00 	mov.w	fp, #0
 80080b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080b8:	f104 021a 	add.w	r2, r4, #26
 80080bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080be:	9305      	str	r3, [sp, #20]
 80080c0:	eba3 0309 	sub.w	r3, r3, r9
 80080c4:	455b      	cmp	r3, fp
 80080c6:	dc33      	bgt.n	8008130 <_printf_float+0x384>
 80080c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080cc:	429a      	cmp	r2, r3
 80080ce:	db3b      	blt.n	8008148 <_printf_float+0x39c>
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	07da      	lsls	r2, r3, #31
 80080d4:	d438      	bmi.n	8008148 <_printf_float+0x39c>
 80080d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d8:	9a05      	ldr	r2, [sp, #20]
 80080da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080dc:	1a9a      	subs	r2, r3, r2
 80080de:	eba3 0901 	sub.w	r9, r3, r1
 80080e2:	4591      	cmp	r9, r2
 80080e4:	bfa8      	it	ge
 80080e6:	4691      	movge	r9, r2
 80080e8:	f1b9 0f00 	cmp.w	r9, #0
 80080ec:	dc35      	bgt.n	800815a <_printf_float+0x3ae>
 80080ee:	f04f 0800 	mov.w	r8, #0
 80080f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080f6:	f104 0a1a 	add.w	sl, r4, #26
 80080fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080fe:	1a9b      	subs	r3, r3, r2
 8008100:	eba3 0309 	sub.w	r3, r3, r9
 8008104:	4543      	cmp	r3, r8
 8008106:	f77f af79 	ble.w	8007ffc <_printf_float+0x250>
 800810a:	2301      	movs	r3, #1
 800810c:	4652      	mov	r2, sl
 800810e:	4631      	mov	r1, r6
 8008110:	4628      	mov	r0, r5
 8008112:	47b8      	blx	r7
 8008114:	3001      	adds	r0, #1
 8008116:	f43f aeaa 	beq.w	8007e6e <_printf_float+0xc2>
 800811a:	f108 0801 	add.w	r8, r8, #1
 800811e:	e7ec      	b.n	80080fa <_printf_float+0x34e>
 8008120:	4613      	mov	r3, r2
 8008122:	4631      	mov	r1, r6
 8008124:	4642      	mov	r2, r8
 8008126:	4628      	mov	r0, r5
 8008128:	47b8      	blx	r7
 800812a:	3001      	adds	r0, #1
 800812c:	d1c0      	bne.n	80080b0 <_printf_float+0x304>
 800812e:	e69e      	b.n	8007e6e <_printf_float+0xc2>
 8008130:	2301      	movs	r3, #1
 8008132:	4631      	mov	r1, r6
 8008134:	4628      	mov	r0, r5
 8008136:	9205      	str	r2, [sp, #20]
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	f43f ae97 	beq.w	8007e6e <_printf_float+0xc2>
 8008140:	9a05      	ldr	r2, [sp, #20]
 8008142:	f10b 0b01 	add.w	fp, fp, #1
 8008146:	e7b9      	b.n	80080bc <_printf_float+0x310>
 8008148:	ee18 3a10 	vmov	r3, s16
 800814c:	4652      	mov	r2, sl
 800814e:	4631      	mov	r1, r6
 8008150:	4628      	mov	r0, r5
 8008152:	47b8      	blx	r7
 8008154:	3001      	adds	r0, #1
 8008156:	d1be      	bne.n	80080d6 <_printf_float+0x32a>
 8008158:	e689      	b.n	8007e6e <_printf_float+0xc2>
 800815a:	9a05      	ldr	r2, [sp, #20]
 800815c:	464b      	mov	r3, r9
 800815e:	4442      	add	r2, r8
 8008160:	4631      	mov	r1, r6
 8008162:	4628      	mov	r0, r5
 8008164:	47b8      	blx	r7
 8008166:	3001      	adds	r0, #1
 8008168:	d1c1      	bne.n	80080ee <_printf_float+0x342>
 800816a:	e680      	b.n	8007e6e <_printf_float+0xc2>
 800816c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800816e:	2a01      	cmp	r2, #1
 8008170:	dc01      	bgt.n	8008176 <_printf_float+0x3ca>
 8008172:	07db      	lsls	r3, r3, #31
 8008174:	d538      	bpl.n	80081e8 <_printf_float+0x43c>
 8008176:	2301      	movs	r3, #1
 8008178:	4642      	mov	r2, r8
 800817a:	4631      	mov	r1, r6
 800817c:	4628      	mov	r0, r5
 800817e:	47b8      	blx	r7
 8008180:	3001      	adds	r0, #1
 8008182:	f43f ae74 	beq.w	8007e6e <_printf_float+0xc2>
 8008186:	ee18 3a10 	vmov	r3, s16
 800818a:	4652      	mov	r2, sl
 800818c:	4631      	mov	r1, r6
 800818e:	4628      	mov	r0, r5
 8008190:	47b8      	blx	r7
 8008192:	3001      	adds	r0, #1
 8008194:	f43f ae6b 	beq.w	8007e6e <_printf_float+0xc2>
 8008198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800819c:	2200      	movs	r2, #0
 800819e:	2300      	movs	r3, #0
 80081a0:	f7f8 fc92 	bl	8000ac8 <__aeabi_dcmpeq>
 80081a4:	b9d8      	cbnz	r0, 80081de <_printf_float+0x432>
 80081a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a8:	f108 0201 	add.w	r2, r8, #1
 80081ac:	3b01      	subs	r3, #1
 80081ae:	4631      	mov	r1, r6
 80081b0:	4628      	mov	r0, r5
 80081b2:	47b8      	blx	r7
 80081b4:	3001      	adds	r0, #1
 80081b6:	d10e      	bne.n	80081d6 <_printf_float+0x42a>
 80081b8:	e659      	b.n	8007e6e <_printf_float+0xc2>
 80081ba:	2301      	movs	r3, #1
 80081bc:	4652      	mov	r2, sl
 80081be:	4631      	mov	r1, r6
 80081c0:	4628      	mov	r0, r5
 80081c2:	47b8      	blx	r7
 80081c4:	3001      	adds	r0, #1
 80081c6:	f43f ae52 	beq.w	8007e6e <_printf_float+0xc2>
 80081ca:	f108 0801 	add.w	r8, r8, #1
 80081ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d0:	3b01      	subs	r3, #1
 80081d2:	4543      	cmp	r3, r8
 80081d4:	dcf1      	bgt.n	80081ba <_printf_float+0x40e>
 80081d6:	464b      	mov	r3, r9
 80081d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081dc:	e6dc      	b.n	8007f98 <_printf_float+0x1ec>
 80081de:	f04f 0800 	mov.w	r8, #0
 80081e2:	f104 0a1a 	add.w	sl, r4, #26
 80081e6:	e7f2      	b.n	80081ce <_printf_float+0x422>
 80081e8:	2301      	movs	r3, #1
 80081ea:	4642      	mov	r2, r8
 80081ec:	e7df      	b.n	80081ae <_printf_float+0x402>
 80081ee:	2301      	movs	r3, #1
 80081f0:	464a      	mov	r2, r9
 80081f2:	4631      	mov	r1, r6
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b8      	blx	r7
 80081f8:	3001      	adds	r0, #1
 80081fa:	f43f ae38 	beq.w	8007e6e <_printf_float+0xc2>
 80081fe:	f108 0801 	add.w	r8, r8, #1
 8008202:	68e3      	ldr	r3, [r4, #12]
 8008204:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008206:	1a5b      	subs	r3, r3, r1
 8008208:	4543      	cmp	r3, r8
 800820a:	dcf0      	bgt.n	80081ee <_printf_float+0x442>
 800820c:	e6fa      	b.n	8008004 <_printf_float+0x258>
 800820e:	f04f 0800 	mov.w	r8, #0
 8008212:	f104 0919 	add.w	r9, r4, #25
 8008216:	e7f4      	b.n	8008202 <_printf_float+0x456>

08008218 <_printf_common>:
 8008218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800821c:	4616      	mov	r6, r2
 800821e:	4699      	mov	r9, r3
 8008220:	688a      	ldr	r2, [r1, #8]
 8008222:	690b      	ldr	r3, [r1, #16]
 8008224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008228:	4293      	cmp	r3, r2
 800822a:	bfb8      	it	lt
 800822c:	4613      	movlt	r3, r2
 800822e:	6033      	str	r3, [r6, #0]
 8008230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008234:	4607      	mov	r7, r0
 8008236:	460c      	mov	r4, r1
 8008238:	b10a      	cbz	r2, 800823e <_printf_common+0x26>
 800823a:	3301      	adds	r3, #1
 800823c:	6033      	str	r3, [r6, #0]
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	0699      	lsls	r1, r3, #26
 8008242:	bf42      	ittt	mi
 8008244:	6833      	ldrmi	r3, [r6, #0]
 8008246:	3302      	addmi	r3, #2
 8008248:	6033      	strmi	r3, [r6, #0]
 800824a:	6825      	ldr	r5, [r4, #0]
 800824c:	f015 0506 	ands.w	r5, r5, #6
 8008250:	d106      	bne.n	8008260 <_printf_common+0x48>
 8008252:	f104 0a19 	add.w	sl, r4, #25
 8008256:	68e3      	ldr	r3, [r4, #12]
 8008258:	6832      	ldr	r2, [r6, #0]
 800825a:	1a9b      	subs	r3, r3, r2
 800825c:	42ab      	cmp	r3, r5
 800825e:	dc26      	bgt.n	80082ae <_printf_common+0x96>
 8008260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008264:	1e13      	subs	r3, r2, #0
 8008266:	6822      	ldr	r2, [r4, #0]
 8008268:	bf18      	it	ne
 800826a:	2301      	movne	r3, #1
 800826c:	0692      	lsls	r2, r2, #26
 800826e:	d42b      	bmi.n	80082c8 <_printf_common+0xb0>
 8008270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008274:	4649      	mov	r1, r9
 8008276:	4638      	mov	r0, r7
 8008278:	47c0      	blx	r8
 800827a:	3001      	adds	r0, #1
 800827c:	d01e      	beq.n	80082bc <_printf_common+0xa4>
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	68e5      	ldr	r5, [r4, #12]
 8008282:	6832      	ldr	r2, [r6, #0]
 8008284:	f003 0306 	and.w	r3, r3, #6
 8008288:	2b04      	cmp	r3, #4
 800828a:	bf08      	it	eq
 800828c:	1aad      	subeq	r5, r5, r2
 800828e:	68a3      	ldr	r3, [r4, #8]
 8008290:	6922      	ldr	r2, [r4, #16]
 8008292:	bf0c      	ite	eq
 8008294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008298:	2500      	movne	r5, #0
 800829a:	4293      	cmp	r3, r2
 800829c:	bfc4      	itt	gt
 800829e:	1a9b      	subgt	r3, r3, r2
 80082a0:	18ed      	addgt	r5, r5, r3
 80082a2:	2600      	movs	r6, #0
 80082a4:	341a      	adds	r4, #26
 80082a6:	42b5      	cmp	r5, r6
 80082a8:	d11a      	bne.n	80082e0 <_printf_common+0xc8>
 80082aa:	2000      	movs	r0, #0
 80082ac:	e008      	b.n	80082c0 <_printf_common+0xa8>
 80082ae:	2301      	movs	r3, #1
 80082b0:	4652      	mov	r2, sl
 80082b2:	4649      	mov	r1, r9
 80082b4:	4638      	mov	r0, r7
 80082b6:	47c0      	blx	r8
 80082b8:	3001      	adds	r0, #1
 80082ba:	d103      	bne.n	80082c4 <_printf_common+0xac>
 80082bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c4:	3501      	adds	r5, #1
 80082c6:	e7c6      	b.n	8008256 <_printf_common+0x3e>
 80082c8:	18e1      	adds	r1, r4, r3
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	2030      	movs	r0, #48	; 0x30
 80082ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082d2:	4422      	add	r2, r4
 80082d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082dc:	3302      	adds	r3, #2
 80082de:	e7c7      	b.n	8008270 <_printf_common+0x58>
 80082e0:	2301      	movs	r3, #1
 80082e2:	4622      	mov	r2, r4
 80082e4:	4649      	mov	r1, r9
 80082e6:	4638      	mov	r0, r7
 80082e8:	47c0      	blx	r8
 80082ea:	3001      	adds	r0, #1
 80082ec:	d0e6      	beq.n	80082bc <_printf_common+0xa4>
 80082ee:	3601      	adds	r6, #1
 80082f0:	e7d9      	b.n	80082a6 <_printf_common+0x8e>
	...

080082f4 <_printf_i>:
 80082f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082f8:	7e0f      	ldrb	r7, [r1, #24]
 80082fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082fc:	2f78      	cmp	r7, #120	; 0x78
 80082fe:	4691      	mov	r9, r2
 8008300:	4680      	mov	r8, r0
 8008302:	460c      	mov	r4, r1
 8008304:	469a      	mov	sl, r3
 8008306:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800830a:	d807      	bhi.n	800831c <_printf_i+0x28>
 800830c:	2f62      	cmp	r7, #98	; 0x62
 800830e:	d80a      	bhi.n	8008326 <_printf_i+0x32>
 8008310:	2f00      	cmp	r7, #0
 8008312:	f000 80d8 	beq.w	80084c6 <_printf_i+0x1d2>
 8008316:	2f58      	cmp	r7, #88	; 0x58
 8008318:	f000 80a3 	beq.w	8008462 <_printf_i+0x16e>
 800831c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008324:	e03a      	b.n	800839c <_printf_i+0xa8>
 8008326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800832a:	2b15      	cmp	r3, #21
 800832c:	d8f6      	bhi.n	800831c <_printf_i+0x28>
 800832e:	a101      	add	r1, pc, #4	; (adr r1, 8008334 <_printf_i+0x40>)
 8008330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008334:	0800838d 	.word	0x0800838d
 8008338:	080083a1 	.word	0x080083a1
 800833c:	0800831d 	.word	0x0800831d
 8008340:	0800831d 	.word	0x0800831d
 8008344:	0800831d 	.word	0x0800831d
 8008348:	0800831d 	.word	0x0800831d
 800834c:	080083a1 	.word	0x080083a1
 8008350:	0800831d 	.word	0x0800831d
 8008354:	0800831d 	.word	0x0800831d
 8008358:	0800831d 	.word	0x0800831d
 800835c:	0800831d 	.word	0x0800831d
 8008360:	080084ad 	.word	0x080084ad
 8008364:	080083d1 	.word	0x080083d1
 8008368:	0800848f 	.word	0x0800848f
 800836c:	0800831d 	.word	0x0800831d
 8008370:	0800831d 	.word	0x0800831d
 8008374:	080084cf 	.word	0x080084cf
 8008378:	0800831d 	.word	0x0800831d
 800837c:	080083d1 	.word	0x080083d1
 8008380:	0800831d 	.word	0x0800831d
 8008384:	0800831d 	.word	0x0800831d
 8008388:	08008497 	.word	0x08008497
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	1d1a      	adds	r2, r3, #4
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	602a      	str	r2, [r5, #0]
 8008394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800839c:	2301      	movs	r3, #1
 800839e:	e0a3      	b.n	80084e8 <_printf_i+0x1f4>
 80083a0:	6820      	ldr	r0, [r4, #0]
 80083a2:	6829      	ldr	r1, [r5, #0]
 80083a4:	0606      	lsls	r6, r0, #24
 80083a6:	f101 0304 	add.w	r3, r1, #4
 80083aa:	d50a      	bpl.n	80083c2 <_printf_i+0xce>
 80083ac:	680e      	ldr	r6, [r1, #0]
 80083ae:	602b      	str	r3, [r5, #0]
 80083b0:	2e00      	cmp	r6, #0
 80083b2:	da03      	bge.n	80083bc <_printf_i+0xc8>
 80083b4:	232d      	movs	r3, #45	; 0x2d
 80083b6:	4276      	negs	r6, r6
 80083b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083bc:	485e      	ldr	r0, [pc, #376]	; (8008538 <_printf_i+0x244>)
 80083be:	230a      	movs	r3, #10
 80083c0:	e019      	b.n	80083f6 <_printf_i+0x102>
 80083c2:	680e      	ldr	r6, [r1, #0]
 80083c4:	602b      	str	r3, [r5, #0]
 80083c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083ca:	bf18      	it	ne
 80083cc:	b236      	sxthne	r6, r6
 80083ce:	e7ef      	b.n	80083b0 <_printf_i+0xbc>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	6820      	ldr	r0, [r4, #0]
 80083d4:	1d19      	adds	r1, r3, #4
 80083d6:	6029      	str	r1, [r5, #0]
 80083d8:	0601      	lsls	r1, r0, #24
 80083da:	d501      	bpl.n	80083e0 <_printf_i+0xec>
 80083dc:	681e      	ldr	r6, [r3, #0]
 80083de:	e002      	b.n	80083e6 <_printf_i+0xf2>
 80083e0:	0646      	lsls	r6, r0, #25
 80083e2:	d5fb      	bpl.n	80083dc <_printf_i+0xe8>
 80083e4:	881e      	ldrh	r6, [r3, #0]
 80083e6:	4854      	ldr	r0, [pc, #336]	; (8008538 <_printf_i+0x244>)
 80083e8:	2f6f      	cmp	r7, #111	; 0x6f
 80083ea:	bf0c      	ite	eq
 80083ec:	2308      	moveq	r3, #8
 80083ee:	230a      	movne	r3, #10
 80083f0:	2100      	movs	r1, #0
 80083f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083f6:	6865      	ldr	r5, [r4, #4]
 80083f8:	60a5      	str	r5, [r4, #8]
 80083fa:	2d00      	cmp	r5, #0
 80083fc:	bfa2      	ittt	ge
 80083fe:	6821      	ldrge	r1, [r4, #0]
 8008400:	f021 0104 	bicge.w	r1, r1, #4
 8008404:	6021      	strge	r1, [r4, #0]
 8008406:	b90e      	cbnz	r6, 800840c <_printf_i+0x118>
 8008408:	2d00      	cmp	r5, #0
 800840a:	d04d      	beq.n	80084a8 <_printf_i+0x1b4>
 800840c:	4615      	mov	r5, r2
 800840e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008412:	fb03 6711 	mls	r7, r3, r1, r6
 8008416:	5dc7      	ldrb	r7, [r0, r7]
 8008418:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800841c:	4637      	mov	r7, r6
 800841e:	42bb      	cmp	r3, r7
 8008420:	460e      	mov	r6, r1
 8008422:	d9f4      	bls.n	800840e <_printf_i+0x11a>
 8008424:	2b08      	cmp	r3, #8
 8008426:	d10b      	bne.n	8008440 <_printf_i+0x14c>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	07de      	lsls	r6, r3, #31
 800842c:	d508      	bpl.n	8008440 <_printf_i+0x14c>
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	6861      	ldr	r1, [r4, #4]
 8008432:	4299      	cmp	r1, r3
 8008434:	bfde      	ittt	le
 8008436:	2330      	movle	r3, #48	; 0x30
 8008438:	f805 3c01 	strble.w	r3, [r5, #-1]
 800843c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008440:	1b52      	subs	r2, r2, r5
 8008442:	6122      	str	r2, [r4, #16]
 8008444:	f8cd a000 	str.w	sl, [sp]
 8008448:	464b      	mov	r3, r9
 800844a:	aa03      	add	r2, sp, #12
 800844c:	4621      	mov	r1, r4
 800844e:	4640      	mov	r0, r8
 8008450:	f7ff fee2 	bl	8008218 <_printf_common>
 8008454:	3001      	adds	r0, #1
 8008456:	d14c      	bne.n	80084f2 <_printf_i+0x1fe>
 8008458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800845c:	b004      	add	sp, #16
 800845e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008462:	4835      	ldr	r0, [pc, #212]	; (8008538 <_printf_i+0x244>)
 8008464:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008468:	6829      	ldr	r1, [r5, #0]
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008470:	6029      	str	r1, [r5, #0]
 8008472:	061d      	lsls	r5, r3, #24
 8008474:	d514      	bpl.n	80084a0 <_printf_i+0x1ac>
 8008476:	07df      	lsls	r7, r3, #31
 8008478:	bf44      	itt	mi
 800847a:	f043 0320 	orrmi.w	r3, r3, #32
 800847e:	6023      	strmi	r3, [r4, #0]
 8008480:	b91e      	cbnz	r6, 800848a <_printf_i+0x196>
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	f023 0320 	bic.w	r3, r3, #32
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	2310      	movs	r3, #16
 800848c:	e7b0      	b.n	80083f0 <_printf_i+0xfc>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	f043 0320 	orr.w	r3, r3, #32
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	2378      	movs	r3, #120	; 0x78
 8008498:	4828      	ldr	r0, [pc, #160]	; (800853c <_printf_i+0x248>)
 800849a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800849e:	e7e3      	b.n	8008468 <_printf_i+0x174>
 80084a0:	0659      	lsls	r1, r3, #25
 80084a2:	bf48      	it	mi
 80084a4:	b2b6      	uxthmi	r6, r6
 80084a6:	e7e6      	b.n	8008476 <_printf_i+0x182>
 80084a8:	4615      	mov	r5, r2
 80084aa:	e7bb      	b.n	8008424 <_printf_i+0x130>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	6826      	ldr	r6, [r4, #0]
 80084b0:	6961      	ldr	r1, [r4, #20]
 80084b2:	1d18      	adds	r0, r3, #4
 80084b4:	6028      	str	r0, [r5, #0]
 80084b6:	0635      	lsls	r5, r6, #24
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	d501      	bpl.n	80084c0 <_printf_i+0x1cc>
 80084bc:	6019      	str	r1, [r3, #0]
 80084be:	e002      	b.n	80084c6 <_printf_i+0x1d2>
 80084c0:	0670      	lsls	r0, r6, #25
 80084c2:	d5fb      	bpl.n	80084bc <_printf_i+0x1c8>
 80084c4:	8019      	strh	r1, [r3, #0]
 80084c6:	2300      	movs	r3, #0
 80084c8:	6123      	str	r3, [r4, #16]
 80084ca:	4615      	mov	r5, r2
 80084cc:	e7ba      	b.n	8008444 <_printf_i+0x150>
 80084ce:	682b      	ldr	r3, [r5, #0]
 80084d0:	1d1a      	adds	r2, r3, #4
 80084d2:	602a      	str	r2, [r5, #0]
 80084d4:	681d      	ldr	r5, [r3, #0]
 80084d6:	6862      	ldr	r2, [r4, #4]
 80084d8:	2100      	movs	r1, #0
 80084da:	4628      	mov	r0, r5
 80084dc:	f7f7 fe80 	bl	80001e0 <memchr>
 80084e0:	b108      	cbz	r0, 80084e6 <_printf_i+0x1f2>
 80084e2:	1b40      	subs	r0, r0, r5
 80084e4:	6060      	str	r0, [r4, #4]
 80084e6:	6863      	ldr	r3, [r4, #4]
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	2300      	movs	r3, #0
 80084ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084f0:	e7a8      	b.n	8008444 <_printf_i+0x150>
 80084f2:	6923      	ldr	r3, [r4, #16]
 80084f4:	462a      	mov	r2, r5
 80084f6:	4649      	mov	r1, r9
 80084f8:	4640      	mov	r0, r8
 80084fa:	47d0      	blx	sl
 80084fc:	3001      	adds	r0, #1
 80084fe:	d0ab      	beq.n	8008458 <_printf_i+0x164>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	079b      	lsls	r3, r3, #30
 8008504:	d413      	bmi.n	800852e <_printf_i+0x23a>
 8008506:	68e0      	ldr	r0, [r4, #12]
 8008508:	9b03      	ldr	r3, [sp, #12]
 800850a:	4298      	cmp	r0, r3
 800850c:	bfb8      	it	lt
 800850e:	4618      	movlt	r0, r3
 8008510:	e7a4      	b.n	800845c <_printf_i+0x168>
 8008512:	2301      	movs	r3, #1
 8008514:	4632      	mov	r2, r6
 8008516:	4649      	mov	r1, r9
 8008518:	4640      	mov	r0, r8
 800851a:	47d0      	blx	sl
 800851c:	3001      	adds	r0, #1
 800851e:	d09b      	beq.n	8008458 <_printf_i+0x164>
 8008520:	3501      	adds	r5, #1
 8008522:	68e3      	ldr	r3, [r4, #12]
 8008524:	9903      	ldr	r1, [sp, #12]
 8008526:	1a5b      	subs	r3, r3, r1
 8008528:	42ab      	cmp	r3, r5
 800852a:	dcf2      	bgt.n	8008512 <_printf_i+0x21e>
 800852c:	e7eb      	b.n	8008506 <_printf_i+0x212>
 800852e:	2500      	movs	r5, #0
 8008530:	f104 0619 	add.w	r6, r4, #25
 8008534:	e7f5      	b.n	8008522 <_printf_i+0x22e>
 8008536:	bf00      	nop
 8008538:	0800b602 	.word	0x0800b602
 800853c:	0800b613 	.word	0x0800b613

08008540 <siprintf>:
 8008540:	b40e      	push	{r1, r2, r3}
 8008542:	b500      	push	{lr}
 8008544:	b09c      	sub	sp, #112	; 0x70
 8008546:	ab1d      	add	r3, sp, #116	; 0x74
 8008548:	9002      	str	r0, [sp, #8]
 800854a:	9006      	str	r0, [sp, #24]
 800854c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008550:	4809      	ldr	r0, [pc, #36]	; (8008578 <siprintf+0x38>)
 8008552:	9107      	str	r1, [sp, #28]
 8008554:	9104      	str	r1, [sp, #16]
 8008556:	4909      	ldr	r1, [pc, #36]	; (800857c <siprintf+0x3c>)
 8008558:	f853 2b04 	ldr.w	r2, [r3], #4
 800855c:	9105      	str	r1, [sp, #20]
 800855e:	6800      	ldr	r0, [r0, #0]
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	a902      	add	r1, sp, #8
 8008564:	f001 fb68 	bl	8009c38 <_svfiprintf_r>
 8008568:	9b02      	ldr	r3, [sp, #8]
 800856a:	2200      	movs	r2, #0
 800856c:	701a      	strb	r2, [r3, #0]
 800856e:	b01c      	add	sp, #112	; 0x70
 8008570:	f85d eb04 	ldr.w	lr, [sp], #4
 8008574:	b003      	add	sp, #12
 8008576:	4770      	bx	lr
 8008578:	20000044 	.word	0x20000044
 800857c:	ffff0208 	.word	0xffff0208

08008580 <quorem>:
 8008580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008584:	6903      	ldr	r3, [r0, #16]
 8008586:	690c      	ldr	r4, [r1, #16]
 8008588:	42a3      	cmp	r3, r4
 800858a:	4607      	mov	r7, r0
 800858c:	f2c0 8081 	blt.w	8008692 <quorem+0x112>
 8008590:	3c01      	subs	r4, #1
 8008592:	f101 0814 	add.w	r8, r1, #20
 8008596:	f100 0514 	add.w	r5, r0, #20
 800859a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800859e:	9301      	str	r3, [sp, #4]
 80085a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085a8:	3301      	adds	r3, #1
 80085aa:	429a      	cmp	r2, r3
 80085ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80085b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80085b8:	d331      	bcc.n	800861e <quorem+0x9e>
 80085ba:	f04f 0e00 	mov.w	lr, #0
 80085be:	4640      	mov	r0, r8
 80085c0:	46ac      	mov	ip, r5
 80085c2:	46f2      	mov	sl, lr
 80085c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80085c8:	b293      	uxth	r3, r2
 80085ca:	fb06 e303 	mla	r3, r6, r3, lr
 80085ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	ebaa 0303 	sub.w	r3, sl, r3
 80085d8:	f8dc a000 	ldr.w	sl, [ip]
 80085dc:	0c12      	lsrs	r2, r2, #16
 80085de:	fa13 f38a 	uxtah	r3, r3, sl
 80085e2:	fb06 e202 	mla	r2, r6, r2, lr
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	9b00      	ldr	r3, [sp, #0]
 80085ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80085ee:	b292      	uxth	r2, r2
 80085f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80085f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80085fc:	4581      	cmp	r9, r0
 80085fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008602:	f84c 3b04 	str.w	r3, [ip], #4
 8008606:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800860a:	d2db      	bcs.n	80085c4 <quorem+0x44>
 800860c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008610:	b92b      	cbnz	r3, 800861e <quorem+0x9e>
 8008612:	9b01      	ldr	r3, [sp, #4]
 8008614:	3b04      	subs	r3, #4
 8008616:	429d      	cmp	r5, r3
 8008618:	461a      	mov	r2, r3
 800861a:	d32e      	bcc.n	800867a <quorem+0xfa>
 800861c:	613c      	str	r4, [r7, #16]
 800861e:	4638      	mov	r0, r7
 8008620:	f001 f8b6 	bl	8009790 <__mcmp>
 8008624:	2800      	cmp	r0, #0
 8008626:	db24      	blt.n	8008672 <quorem+0xf2>
 8008628:	3601      	adds	r6, #1
 800862a:	4628      	mov	r0, r5
 800862c:	f04f 0c00 	mov.w	ip, #0
 8008630:	f858 2b04 	ldr.w	r2, [r8], #4
 8008634:	f8d0 e000 	ldr.w	lr, [r0]
 8008638:	b293      	uxth	r3, r2
 800863a:	ebac 0303 	sub.w	r3, ip, r3
 800863e:	0c12      	lsrs	r2, r2, #16
 8008640:	fa13 f38e 	uxtah	r3, r3, lr
 8008644:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008648:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800864c:	b29b      	uxth	r3, r3
 800864e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008652:	45c1      	cmp	r9, r8
 8008654:	f840 3b04 	str.w	r3, [r0], #4
 8008658:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800865c:	d2e8      	bcs.n	8008630 <quorem+0xb0>
 800865e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008662:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008666:	b922      	cbnz	r2, 8008672 <quorem+0xf2>
 8008668:	3b04      	subs	r3, #4
 800866a:	429d      	cmp	r5, r3
 800866c:	461a      	mov	r2, r3
 800866e:	d30a      	bcc.n	8008686 <quorem+0x106>
 8008670:	613c      	str	r4, [r7, #16]
 8008672:	4630      	mov	r0, r6
 8008674:	b003      	add	sp, #12
 8008676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867a:	6812      	ldr	r2, [r2, #0]
 800867c:	3b04      	subs	r3, #4
 800867e:	2a00      	cmp	r2, #0
 8008680:	d1cc      	bne.n	800861c <quorem+0x9c>
 8008682:	3c01      	subs	r4, #1
 8008684:	e7c7      	b.n	8008616 <quorem+0x96>
 8008686:	6812      	ldr	r2, [r2, #0]
 8008688:	3b04      	subs	r3, #4
 800868a:	2a00      	cmp	r2, #0
 800868c:	d1f0      	bne.n	8008670 <quorem+0xf0>
 800868e:	3c01      	subs	r4, #1
 8008690:	e7eb      	b.n	800866a <quorem+0xea>
 8008692:	2000      	movs	r0, #0
 8008694:	e7ee      	b.n	8008674 <quorem+0xf4>
	...

08008698 <_dtoa_r>:
 8008698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869c:	ed2d 8b04 	vpush	{d8-d9}
 80086a0:	ec57 6b10 	vmov	r6, r7, d0
 80086a4:	b093      	sub	sp, #76	; 0x4c
 80086a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80086ac:	9106      	str	r1, [sp, #24]
 80086ae:	ee10 aa10 	vmov	sl, s0
 80086b2:	4604      	mov	r4, r0
 80086b4:	9209      	str	r2, [sp, #36]	; 0x24
 80086b6:	930c      	str	r3, [sp, #48]	; 0x30
 80086b8:	46bb      	mov	fp, r7
 80086ba:	b975      	cbnz	r5, 80086da <_dtoa_r+0x42>
 80086bc:	2010      	movs	r0, #16
 80086be:	f000 fddd 	bl	800927c <malloc>
 80086c2:	4602      	mov	r2, r0
 80086c4:	6260      	str	r0, [r4, #36]	; 0x24
 80086c6:	b920      	cbnz	r0, 80086d2 <_dtoa_r+0x3a>
 80086c8:	4ba7      	ldr	r3, [pc, #668]	; (8008968 <_dtoa_r+0x2d0>)
 80086ca:	21ea      	movs	r1, #234	; 0xea
 80086cc:	48a7      	ldr	r0, [pc, #668]	; (800896c <_dtoa_r+0x2d4>)
 80086ce:	f001 fbc3 	bl	8009e58 <__assert_func>
 80086d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086d6:	6005      	str	r5, [r0, #0]
 80086d8:	60c5      	str	r5, [r0, #12]
 80086da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086dc:	6819      	ldr	r1, [r3, #0]
 80086de:	b151      	cbz	r1, 80086f6 <_dtoa_r+0x5e>
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	604a      	str	r2, [r1, #4]
 80086e4:	2301      	movs	r3, #1
 80086e6:	4093      	lsls	r3, r2
 80086e8:	608b      	str	r3, [r1, #8]
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 fe0e 	bl	800930c <_Bfree>
 80086f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	1e3b      	subs	r3, r7, #0
 80086f8:	bfaa      	itet	ge
 80086fa:	2300      	movge	r3, #0
 80086fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008700:	f8c8 3000 	strge.w	r3, [r8]
 8008704:	4b9a      	ldr	r3, [pc, #616]	; (8008970 <_dtoa_r+0x2d8>)
 8008706:	bfbc      	itt	lt
 8008708:	2201      	movlt	r2, #1
 800870a:	f8c8 2000 	strlt.w	r2, [r8]
 800870e:	ea33 030b 	bics.w	r3, r3, fp
 8008712:	d11b      	bne.n	800874c <_dtoa_r+0xb4>
 8008714:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008716:	f242 730f 	movw	r3, #9999	; 0x270f
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008720:	4333      	orrs	r3, r6
 8008722:	f000 8592 	beq.w	800924a <_dtoa_r+0xbb2>
 8008726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008728:	b963      	cbnz	r3, 8008744 <_dtoa_r+0xac>
 800872a:	4b92      	ldr	r3, [pc, #584]	; (8008974 <_dtoa_r+0x2dc>)
 800872c:	e022      	b.n	8008774 <_dtoa_r+0xdc>
 800872e:	4b92      	ldr	r3, [pc, #584]	; (8008978 <_dtoa_r+0x2e0>)
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	3308      	adds	r3, #8
 8008734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	9801      	ldr	r0, [sp, #4]
 800873a:	b013      	add	sp, #76	; 0x4c
 800873c:	ecbd 8b04 	vpop	{d8-d9}
 8008740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008744:	4b8b      	ldr	r3, [pc, #556]	; (8008974 <_dtoa_r+0x2dc>)
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	3303      	adds	r3, #3
 800874a:	e7f3      	b.n	8008734 <_dtoa_r+0x9c>
 800874c:	2200      	movs	r2, #0
 800874e:	2300      	movs	r3, #0
 8008750:	4650      	mov	r0, sl
 8008752:	4659      	mov	r1, fp
 8008754:	f7f8 f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008758:	ec4b ab19 	vmov	d9, sl, fp
 800875c:	4680      	mov	r8, r0
 800875e:	b158      	cbz	r0, 8008778 <_dtoa_r+0xe0>
 8008760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008762:	2301      	movs	r3, #1
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 856b 	beq.w	8009244 <_dtoa_r+0xbac>
 800876e:	4883      	ldr	r0, [pc, #524]	; (800897c <_dtoa_r+0x2e4>)
 8008770:	6018      	str	r0, [r3, #0]
 8008772:	1e43      	subs	r3, r0, #1
 8008774:	9301      	str	r3, [sp, #4]
 8008776:	e7df      	b.n	8008738 <_dtoa_r+0xa0>
 8008778:	ec4b ab10 	vmov	d0, sl, fp
 800877c:	aa10      	add	r2, sp, #64	; 0x40
 800877e:	a911      	add	r1, sp, #68	; 0x44
 8008780:	4620      	mov	r0, r4
 8008782:	f001 f8ab 	bl	80098dc <__d2b>
 8008786:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800878a:	ee08 0a10 	vmov	s16, r0
 800878e:	2d00      	cmp	r5, #0
 8008790:	f000 8084 	beq.w	800889c <_dtoa_r+0x204>
 8008794:	ee19 3a90 	vmov	r3, s19
 8008798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800879c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80087a0:	4656      	mov	r6, sl
 80087a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80087a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80087aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80087ae:	4b74      	ldr	r3, [pc, #464]	; (8008980 <_dtoa_r+0x2e8>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	4630      	mov	r0, r6
 80087b4:	4639      	mov	r1, r7
 80087b6:	f7f7 fd67 	bl	8000288 <__aeabi_dsub>
 80087ba:	a365      	add	r3, pc, #404	; (adr r3, 8008950 <_dtoa_r+0x2b8>)
 80087bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c0:	f7f7 ff1a 	bl	80005f8 <__aeabi_dmul>
 80087c4:	a364      	add	r3, pc, #400	; (adr r3, 8008958 <_dtoa_r+0x2c0>)
 80087c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ca:	f7f7 fd5f 	bl	800028c <__adddf3>
 80087ce:	4606      	mov	r6, r0
 80087d0:	4628      	mov	r0, r5
 80087d2:	460f      	mov	r7, r1
 80087d4:	f7f7 fea6 	bl	8000524 <__aeabi_i2d>
 80087d8:	a361      	add	r3, pc, #388	; (adr r3, 8008960 <_dtoa_r+0x2c8>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f7f7 ff0b 	bl	80005f8 <__aeabi_dmul>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4630      	mov	r0, r6
 80087e8:	4639      	mov	r1, r7
 80087ea:	f7f7 fd4f 	bl	800028c <__adddf3>
 80087ee:	4606      	mov	r6, r0
 80087f0:	460f      	mov	r7, r1
 80087f2:	f7f8 f9b1 	bl	8000b58 <__aeabi_d2iz>
 80087f6:	2200      	movs	r2, #0
 80087f8:	9000      	str	r0, [sp, #0]
 80087fa:	2300      	movs	r3, #0
 80087fc:	4630      	mov	r0, r6
 80087fe:	4639      	mov	r1, r7
 8008800:	f7f8 f96c 	bl	8000adc <__aeabi_dcmplt>
 8008804:	b150      	cbz	r0, 800881c <_dtoa_r+0x184>
 8008806:	9800      	ldr	r0, [sp, #0]
 8008808:	f7f7 fe8c 	bl	8000524 <__aeabi_i2d>
 800880c:	4632      	mov	r2, r6
 800880e:	463b      	mov	r3, r7
 8008810:	f7f8 f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008814:	b910      	cbnz	r0, 800881c <_dtoa_r+0x184>
 8008816:	9b00      	ldr	r3, [sp, #0]
 8008818:	3b01      	subs	r3, #1
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	9b00      	ldr	r3, [sp, #0]
 800881e:	2b16      	cmp	r3, #22
 8008820:	d85a      	bhi.n	80088d8 <_dtoa_r+0x240>
 8008822:	9a00      	ldr	r2, [sp, #0]
 8008824:	4b57      	ldr	r3, [pc, #348]	; (8008984 <_dtoa_r+0x2ec>)
 8008826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	ec51 0b19 	vmov	r0, r1, d9
 8008832:	f7f8 f953 	bl	8000adc <__aeabi_dcmplt>
 8008836:	2800      	cmp	r0, #0
 8008838:	d050      	beq.n	80088dc <_dtoa_r+0x244>
 800883a:	9b00      	ldr	r3, [sp, #0]
 800883c:	3b01      	subs	r3, #1
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	2300      	movs	r3, #0
 8008842:	930b      	str	r3, [sp, #44]	; 0x2c
 8008844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008846:	1b5d      	subs	r5, r3, r5
 8008848:	1e6b      	subs	r3, r5, #1
 800884a:	9305      	str	r3, [sp, #20]
 800884c:	bf45      	ittet	mi
 800884e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008852:	9304      	strmi	r3, [sp, #16]
 8008854:	2300      	movpl	r3, #0
 8008856:	2300      	movmi	r3, #0
 8008858:	bf4c      	ite	mi
 800885a:	9305      	strmi	r3, [sp, #20]
 800885c:	9304      	strpl	r3, [sp, #16]
 800885e:	9b00      	ldr	r3, [sp, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	db3d      	blt.n	80088e0 <_dtoa_r+0x248>
 8008864:	9b05      	ldr	r3, [sp, #20]
 8008866:	9a00      	ldr	r2, [sp, #0]
 8008868:	920a      	str	r2, [sp, #40]	; 0x28
 800886a:	4413      	add	r3, r2
 800886c:	9305      	str	r3, [sp, #20]
 800886e:	2300      	movs	r3, #0
 8008870:	9307      	str	r3, [sp, #28]
 8008872:	9b06      	ldr	r3, [sp, #24]
 8008874:	2b09      	cmp	r3, #9
 8008876:	f200 8089 	bhi.w	800898c <_dtoa_r+0x2f4>
 800887a:	2b05      	cmp	r3, #5
 800887c:	bfc4      	itt	gt
 800887e:	3b04      	subgt	r3, #4
 8008880:	9306      	strgt	r3, [sp, #24]
 8008882:	9b06      	ldr	r3, [sp, #24]
 8008884:	f1a3 0302 	sub.w	r3, r3, #2
 8008888:	bfcc      	ite	gt
 800888a:	2500      	movgt	r5, #0
 800888c:	2501      	movle	r5, #1
 800888e:	2b03      	cmp	r3, #3
 8008890:	f200 8087 	bhi.w	80089a2 <_dtoa_r+0x30a>
 8008894:	e8df f003 	tbb	[pc, r3]
 8008898:	59383a2d 	.word	0x59383a2d
 800889c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80088a0:	441d      	add	r5, r3
 80088a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80088a6:	2b20      	cmp	r3, #32
 80088a8:	bfc1      	itttt	gt
 80088aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80088ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80088b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80088b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80088ba:	bfda      	itte	le
 80088bc:	f1c3 0320 	rsble	r3, r3, #32
 80088c0:	fa06 f003 	lslle.w	r0, r6, r3
 80088c4:	4318      	orrgt	r0, r3
 80088c6:	f7f7 fe1d 	bl	8000504 <__aeabi_ui2d>
 80088ca:	2301      	movs	r3, #1
 80088cc:	4606      	mov	r6, r0
 80088ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80088d2:	3d01      	subs	r5, #1
 80088d4:	930e      	str	r3, [sp, #56]	; 0x38
 80088d6:	e76a      	b.n	80087ae <_dtoa_r+0x116>
 80088d8:	2301      	movs	r3, #1
 80088da:	e7b2      	b.n	8008842 <_dtoa_r+0x1aa>
 80088dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80088de:	e7b1      	b.n	8008844 <_dtoa_r+0x1ac>
 80088e0:	9b04      	ldr	r3, [sp, #16]
 80088e2:	9a00      	ldr	r2, [sp, #0]
 80088e4:	1a9b      	subs	r3, r3, r2
 80088e6:	9304      	str	r3, [sp, #16]
 80088e8:	4253      	negs	r3, r2
 80088ea:	9307      	str	r3, [sp, #28]
 80088ec:	2300      	movs	r3, #0
 80088ee:	930a      	str	r3, [sp, #40]	; 0x28
 80088f0:	e7bf      	b.n	8008872 <_dtoa_r+0x1da>
 80088f2:	2300      	movs	r3, #0
 80088f4:	9308      	str	r3, [sp, #32]
 80088f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	dc55      	bgt.n	80089a8 <_dtoa_r+0x310>
 80088fc:	2301      	movs	r3, #1
 80088fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008902:	461a      	mov	r2, r3
 8008904:	9209      	str	r2, [sp, #36]	; 0x24
 8008906:	e00c      	b.n	8008922 <_dtoa_r+0x28a>
 8008908:	2301      	movs	r3, #1
 800890a:	e7f3      	b.n	80088f4 <_dtoa_r+0x25c>
 800890c:	2300      	movs	r3, #0
 800890e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008910:	9308      	str	r3, [sp, #32]
 8008912:	9b00      	ldr	r3, [sp, #0]
 8008914:	4413      	add	r3, r2
 8008916:	9302      	str	r3, [sp, #8]
 8008918:	3301      	adds	r3, #1
 800891a:	2b01      	cmp	r3, #1
 800891c:	9303      	str	r3, [sp, #12]
 800891e:	bfb8      	it	lt
 8008920:	2301      	movlt	r3, #1
 8008922:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008924:	2200      	movs	r2, #0
 8008926:	6042      	str	r2, [r0, #4]
 8008928:	2204      	movs	r2, #4
 800892a:	f102 0614 	add.w	r6, r2, #20
 800892e:	429e      	cmp	r6, r3
 8008930:	6841      	ldr	r1, [r0, #4]
 8008932:	d93d      	bls.n	80089b0 <_dtoa_r+0x318>
 8008934:	4620      	mov	r0, r4
 8008936:	f000 fca9 	bl	800928c <_Balloc>
 800893a:	9001      	str	r0, [sp, #4]
 800893c:	2800      	cmp	r0, #0
 800893e:	d13b      	bne.n	80089b8 <_dtoa_r+0x320>
 8008940:	4b11      	ldr	r3, [pc, #68]	; (8008988 <_dtoa_r+0x2f0>)
 8008942:	4602      	mov	r2, r0
 8008944:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008948:	e6c0      	b.n	80086cc <_dtoa_r+0x34>
 800894a:	2301      	movs	r3, #1
 800894c:	e7df      	b.n	800890e <_dtoa_r+0x276>
 800894e:	bf00      	nop
 8008950:	636f4361 	.word	0x636f4361
 8008954:	3fd287a7 	.word	0x3fd287a7
 8008958:	8b60c8b3 	.word	0x8b60c8b3
 800895c:	3fc68a28 	.word	0x3fc68a28
 8008960:	509f79fb 	.word	0x509f79fb
 8008964:	3fd34413 	.word	0x3fd34413
 8008968:	0800b631 	.word	0x0800b631
 800896c:	0800b648 	.word	0x0800b648
 8008970:	7ff00000 	.word	0x7ff00000
 8008974:	0800b62d 	.word	0x0800b62d
 8008978:	0800b624 	.word	0x0800b624
 800897c:	0800b601 	.word	0x0800b601
 8008980:	3ff80000 	.word	0x3ff80000
 8008984:	0800b738 	.word	0x0800b738
 8008988:	0800b6a3 	.word	0x0800b6a3
 800898c:	2501      	movs	r5, #1
 800898e:	2300      	movs	r3, #0
 8008990:	9306      	str	r3, [sp, #24]
 8008992:	9508      	str	r5, [sp, #32]
 8008994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008998:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800899c:	2200      	movs	r2, #0
 800899e:	2312      	movs	r3, #18
 80089a0:	e7b0      	b.n	8008904 <_dtoa_r+0x26c>
 80089a2:	2301      	movs	r3, #1
 80089a4:	9308      	str	r3, [sp, #32]
 80089a6:	e7f5      	b.n	8008994 <_dtoa_r+0x2fc>
 80089a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80089ae:	e7b8      	b.n	8008922 <_dtoa_r+0x28a>
 80089b0:	3101      	adds	r1, #1
 80089b2:	6041      	str	r1, [r0, #4]
 80089b4:	0052      	lsls	r2, r2, #1
 80089b6:	e7b8      	b.n	800892a <_dtoa_r+0x292>
 80089b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ba:	9a01      	ldr	r2, [sp, #4]
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	2b0e      	cmp	r3, #14
 80089c2:	f200 809d 	bhi.w	8008b00 <_dtoa_r+0x468>
 80089c6:	2d00      	cmp	r5, #0
 80089c8:	f000 809a 	beq.w	8008b00 <_dtoa_r+0x468>
 80089cc:	9b00      	ldr	r3, [sp, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dd32      	ble.n	8008a38 <_dtoa_r+0x3a0>
 80089d2:	4ab7      	ldr	r2, [pc, #732]	; (8008cb0 <_dtoa_r+0x618>)
 80089d4:	f003 030f 	and.w	r3, r3, #15
 80089d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80089dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089e0:	9b00      	ldr	r3, [sp, #0]
 80089e2:	05d8      	lsls	r0, r3, #23
 80089e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80089e8:	d516      	bpl.n	8008a18 <_dtoa_r+0x380>
 80089ea:	4bb2      	ldr	r3, [pc, #712]	; (8008cb4 <_dtoa_r+0x61c>)
 80089ec:	ec51 0b19 	vmov	r0, r1, d9
 80089f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089f4:	f7f7 ff2a 	bl	800084c <__aeabi_ddiv>
 80089f8:	f007 070f 	and.w	r7, r7, #15
 80089fc:	4682      	mov	sl, r0
 80089fe:	468b      	mov	fp, r1
 8008a00:	2503      	movs	r5, #3
 8008a02:	4eac      	ldr	r6, [pc, #688]	; (8008cb4 <_dtoa_r+0x61c>)
 8008a04:	b957      	cbnz	r7, 8008a1c <_dtoa_r+0x384>
 8008a06:	4642      	mov	r2, r8
 8008a08:	464b      	mov	r3, r9
 8008a0a:	4650      	mov	r0, sl
 8008a0c:	4659      	mov	r1, fp
 8008a0e:	f7f7 ff1d 	bl	800084c <__aeabi_ddiv>
 8008a12:	4682      	mov	sl, r0
 8008a14:	468b      	mov	fp, r1
 8008a16:	e028      	b.n	8008a6a <_dtoa_r+0x3d2>
 8008a18:	2502      	movs	r5, #2
 8008a1a:	e7f2      	b.n	8008a02 <_dtoa_r+0x36a>
 8008a1c:	07f9      	lsls	r1, r7, #31
 8008a1e:	d508      	bpl.n	8008a32 <_dtoa_r+0x39a>
 8008a20:	4640      	mov	r0, r8
 8008a22:	4649      	mov	r1, r9
 8008a24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a28:	f7f7 fde6 	bl	80005f8 <__aeabi_dmul>
 8008a2c:	3501      	adds	r5, #1
 8008a2e:	4680      	mov	r8, r0
 8008a30:	4689      	mov	r9, r1
 8008a32:	107f      	asrs	r7, r7, #1
 8008a34:	3608      	adds	r6, #8
 8008a36:	e7e5      	b.n	8008a04 <_dtoa_r+0x36c>
 8008a38:	f000 809b 	beq.w	8008b72 <_dtoa_r+0x4da>
 8008a3c:	9b00      	ldr	r3, [sp, #0]
 8008a3e:	4f9d      	ldr	r7, [pc, #628]	; (8008cb4 <_dtoa_r+0x61c>)
 8008a40:	425e      	negs	r6, r3
 8008a42:	4b9b      	ldr	r3, [pc, #620]	; (8008cb0 <_dtoa_r+0x618>)
 8008a44:	f006 020f 	and.w	r2, r6, #15
 8008a48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	ec51 0b19 	vmov	r0, r1, d9
 8008a54:	f7f7 fdd0 	bl	80005f8 <__aeabi_dmul>
 8008a58:	1136      	asrs	r6, r6, #4
 8008a5a:	4682      	mov	sl, r0
 8008a5c:	468b      	mov	fp, r1
 8008a5e:	2300      	movs	r3, #0
 8008a60:	2502      	movs	r5, #2
 8008a62:	2e00      	cmp	r6, #0
 8008a64:	d17a      	bne.n	8008b5c <_dtoa_r+0x4c4>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1d3      	bne.n	8008a12 <_dtoa_r+0x37a>
 8008a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 8082 	beq.w	8008b76 <_dtoa_r+0x4de>
 8008a72:	4b91      	ldr	r3, [pc, #580]	; (8008cb8 <_dtoa_r+0x620>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	4650      	mov	r0, sl
 8008a78:	4659      	mov	r1, fp
 8008a7a:	f7f8 f82f 	bl	8000adc <__aeabi_dcmplt>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d079      	beq.n	8008b76 <_dtoa_r+0x4de>
 8008a82:	9b03      	ldr	r3, [sp, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d076      	beq.n	8008b76 <_dtoa_r+0x4de>
 8008a88:	9b02      	ldr	r3, [sp, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	dd36      	ble.n	8008afc <_dtoa_r+0x464>
 8008a8e:	9b00      	ldr	r3, [sp, #0]
 8008a90:	4650      	mov	r0, sl
 8008a92:	4659      	mov	r1, fp
 8008a94:	1e5f      	subs	r7, r3, #1
 8008a96:	2200      	movs	r2, #0
 8008a98:	4b88      	ldr	r3, [pc, #544]	; (8008cbc <_dtoa_r+0x624>)
 8008a9a:	f7f7 fdad 	bl	80005f8 <__aeabi_dmul>
 8008a9e:	9e02      	ldr	r6, [sp, #8]
 8008aa0:	4682      	mov	sl, r0
 8008aa2:	468b      	mov	fp, r1
 8008aa4:	3501      	adds	r5, #1
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f7f7 fd3c 	bl	8000524 <__aeabi_i2d>
 8008aac:	4652      	mov	r2, sl
 8008aae:	465b      	mov	r3, fp
 8008ab0:	f7f7 fda2 	bl	80005f8 <__aeabi_dmul>
 8008ab4:	4b82      	ldr	r3, [pc, #520]	; (8008cc0 <_dtoa_r+0x628>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f7f7 fbe8 	bl	800028c <__adddf3>
 8008abc:	46d0      	mov	r8, sl
 8008abe:	46d9      	mov	r9, fp
 8008ac0:	4682      	mov	sl, r0
 8008ac2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008ac6:	2e00      	cmp	r6, #0
 8008ac8:	d158      	bne.n	8008b7c <_dtoa_r+0x4e4>
 8008aca:	4b7e      	ldr	r3, [pc, #504]	; (8008cc4 <_dtoa_r+0x62c>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	4640      	mov	r0, r8
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	f7f7 fbd9 	bl	8000288 <__aeabi_dsub>
 8008ad6:	4652      	mov	r2, sl
 8008ad8:	465b      	mov	r3, fp
 8008ada:	4680      	mov	r8, r0
 8008adc:	4689      	mov	r9, r1
 8008ade:	f7f8 f81b 	bl	8000b18 <__aeabi_dcmpgt>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	f040 8295 	bne.w	8009012 <_dtoa_r+0x97a>
 8008ae8:	4652      	mov	r2, sl
 8008aea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008aee:	4640      	mov	r0, r8
 8008af0:	4649      	mov	r1, r9
 8008af2:	f7f7 fff3 	bl	8000adc <__aeabi_dcmplt>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	f040 8289 	bne.w	800900e <_dtoa_r+0x976>
 8008afc:	ec5b ab19 	vmov	sl, fp, d9
 8008b00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f2c0 8148 	blt.w	8008d98 <_dtoa_r+0x700>
 8008b08:	9a00      	ldr	r2, [sp, #0]
 8008b0a:	2a0e      	cmp	r2, #14
 8008b0c:	f300 8144 	bgt.w	8008d98 <_dtoa_r+0x700>
 8008b10:	4b67      	ldr	r3, [pc, #412]	; (8008cb0 <_dtoa_r+0x618>)
 8008b12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f280 80d5 	bge.w	8008ccc <_dtoa_r+0x634>
 8008b22:	9b03      	ldr	r3, [sp, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f300 80d1 	bgt.w	8008ccc <_dtoa_r+0x634>
 8008b2a:	f040 826f 	bne.w	800900c <_dtoa_r+0x974>
 8008b2e:	4b65      	ldr	r3, [pc, #404]	; (8008cc4 <_dtoa_r+0x62c>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	4640      	mov	r0, r8
 8008b34:	4649      	mov	r1, r9
 8008b36:	f7f7 fd5f 	bl	80005f8 <__aeabi_dmul>
 8008b3a:	4652      	mov	r2, sl
 8008b3c:	465b      	mov	r3, fp
 8008b3e:	f7f7 ffe1 	bl	8000b04 <__aeabi_dcmpge>
 8008b42:	9e03      	ldr	r6, [sp, #12]
 8008b44:	4637      	mov	r7, r6
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f040 8245 	bne.w	8008fd6 <_dtoa_r+0x93e>
 8008b4c:	9d01      	ldr	r5, [sp, #4]
 8008b4e:	2331      	movs	r3, #49	; 0x31
 8008b50:	f805 3b01 	strb.w	r3, [r5], #1
 8008b54:	9b00      	ldr	r3, [sp, #0]
 8008b56:	3301      	adds	r3, #1
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	e240      	b.n	8008fde <_dtoa_r+0x946>
 8008b5c:	07f2      	lsls	r2, r6, #31
 8008b5e:	d505      	bpl.n	8008b6c <_dtoa_r+0x4d4>
 8008b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b64:	f7f7 fd48 	bl	80005f8 <__aeabi_dmul>
 8008b68:	3501      	adds	r5, #1
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	1076      	asrs	r6, r6, #1
 8008b6e:	3708      	adds	r7, #8
 8008b70:	e777      	b.n	8008a62 <_dtoa_r+0x3ca>
 8008b72:	2502      	movs	r5, #2
 8008b74:	e779      	b.n	8008a6a <_dtoa_r+0x3d2>
 8008b76:	9f00      	ldr	r7, [sp, #0]
 8008b78:	9e03      	ldr	r6, [sp, #12]
 8008b7a:	e794      	b.n	8008aa6 <_dtoa_r+0x40e>
 8008b7c:	9901      	ldr	r1, [sp, #4]
 8008b7e:	4b4c      	ldr	r3, [pc, #304]	; (8008cb0 <_dtoa_r+0x618>)
 8008b80:	4431      	add	r1, r6
 8008b82:	910d      	str	r1, [sp, #52]	; 0x34
 8008b84:	9908      	ldr	r1, [sp, #32]
 8008b86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b8e:	2900      	cmp	r1, #0
 8008b90:	d043      	beq.n	8008c1a <_dtoa_r+0x582>
 8008b92:	494d      	ldr	r1, [pc, #308]	; (8008cc8 <_dtoa_r+0x630>)
 8008b94:	2000      	movs	r0, #0
 8008b96:	f7f7 fe59 	bl	800084c <__aeabi_ddiv>
 8008b9a:	4652      	mov	r2, sl
 8008b9c:	465b      	mov	r3, fp
 8008b9e:	f7f7 fb73 	bl	8000288 <__aeabi_dsub>
 8008ba2:	9d01      	ldr	r5, [sp, #4]
 8008ba4:	4682      	mov	sl, r0
 8008ba6:	468b      	mov	fp, r1
 8008ba8:	4649      	mov	r1, r9
 8008baa:	4640      	mov	r0, r8
 8008bac:	f7f7 ffd4 	bl	8000b58 <__aeabi_d2iz>
 8008bb0:	4606      	mov	r6, r0
 8008bb2:	f7f7 fcb7 	bl	8000524 <__aeabi_i2d>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4640      	mov	r0, r8
 8008bbc:	4649      	mov	r1, r9
 8008bbe:	f7f7 fb63 	bl	8000288 <__aeabi_dsub>
 8008bc2:	3630      	adds	r6, #48	; 0x30
 8008bc4:	f805 6b01 	strb.w	r6, [r5], #1
 8008bc8:	4652      	mov	r2, sl
 8008bca:	465b      	mov	r3, fp
 8008bcc:	4680      	mov	r8, r0
 8008bce:	4689      	mov	r9, r1
 8008bd0:	f7f7 ff84 	bl	8000adc <__aeabi_dcmplt>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d163      	bne.n	8008ca0 <_dtoa_r+0x608>
 8008bd8:	4642      	mov	r2, r8
 8008bda:	464b      	mov	r3, r9
 8008bdc:	4936      	ldr	r1, [pc, #216]	; (8008cb8 <_dtoa_r+0x620>)
 8008bde:	2000      	movs	r0, #0
 8008be0:	f7f7 fb52 	bl	8000288 <__aeabi_dsub>
 8008be4:	4652      	mov	r2, sl
 8008be6:	465b      	mov	r3, fp
 8008be8:	f7f7 ff78 	bl	8000adc <__aeabi_dcmplt>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	f040 80b5 	bne.w	8008d5c <_dtoa_r+0x6c4>
 8008bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bf4:	429d      	cmp	r5, r3
 8008bf6:	d081      	beq.n	8008afc <_dtoa_r+0x464>
 8008bf8:	4b30      	ldr	r3, [pc, #192]	; (8008cbc <_dtoa_r+0x624>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	4650      	mov	r0, sl
 8008bfe:	4659      	mov	r1, fp
 8008c00:	f7f7 fcfa 	bl	80005f8 <__aeabi_dmul>
 8008c04:	4b2d      	ldr	r3, [pc, #180]	; (8008cbc <_dtoa_r+0x624>)
 8008c06:	4682      	mov	sl, r0
 8008c08:	468b      	mov	fp, r1
 8008c0a:	4640      	mov	r0, r8
 8008c0c:	4649      	mov	r1, r9
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f7f7 fcf2 	bl	80005f8 <__aeabi_dmul>
 8008c14:	4680      	mov	r8, r0
 8008c16:	4689      	mov	r9, r1
 8008c18:	e7c6      	b.n	8008ba8 <_dtoa_r+0x510>
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	4659      	mov	r1, fp
 8008c1e:	f7f7 fceb 	bl	80005f8 <__aeabi_dmul>
 8008c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c24:	9d01      	ldr	r5, [sp, #4]
 8008c26:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c28:	4682      	mov	sl, r0
 8008c2a:	468b      	mov	fp, r1
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	4640      	mov	r0, r8
 8008c30:	f7f7 ff92 	bl	8000b58 <__aeabi_d2iz>
 8008c34:	4606      	mov	r6, r0
 8008c36:	f7f7 fc75 	bl	8000524 <__aeabi_i2d>
 8008c3a:	3630      	adds	r6, #48	; 0x30
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4640      	mov	r0, r8
 8008c42:	4649      	mov	r1, r9
 8008c44:	f7f7 fb20 	bl	8000288 <__aeabi_dsub>
 8008c48:	f805 6b01 	strb.w	r6, [r5], #1
 8008c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c4e:	429d      	cmp	r5, r3
 8008c50:	4680      	mov	r8, r0
 8008c52:	4689      	mov	r9, r1
 8008c54:	f04f 0200 	mov.w	r2, #0
 8008c58:	d124      	bne.n	8008ca4 <_dtoa_r+0x60c>
 8008c5a:	4b1b      	ldr	r3, [pc, #108]	; (8008cc8 <_dtoa_r+0x630>)
 8008c5c:	4650      	mov	r0, sl
 8008c5e:	4659      	mov	r1, fp
 8008c60:	f7f7 fb14 	bl	800028c <__adddf3>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4640      	mov	r0, r8
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	f7f7 ff54 	bl	8000b18 <__aeabi_dcmpgt>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d173      	bne.n	8008d5c <_dtoa_r+0x6c4>
 8008c74:	4652      	mov	r2, sl
 8008c76:	465b      	mov	r3, fp
 8008c78:	4913      	ldr	r1, [pc, #76]	; (8008cc8 <_dtoa_r+0x630>)
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	f7f7 fb04 	bl	8000288 <__aeabi_dsub>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4640      	mov	r0, r8
 8008c86:	4649      	mov	r1, r9
 8008c88:	f7f7 ff28 	bl	8000adc <__aeabi_dcmplt>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f43f af35 	beq.w	8008afc <_dtoa_r+0x464>
 8008c92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c94:	1e6b      	subs	r3, r5, #1
 8008c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c9c:	2b30      	cmp	r3, #48	; 0x30
 8008c9e:	d0f8      	beq.n	8008c92 <_dtoa_r+0x5fa>
 8008ca0:	9700      	str	r7, [sp, #0]
 8008ca2:	e049      	b.n	8008d38 <_dtoa_r+0x6a0>
 8008ca4:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <_dtoa_r+0x624>)
 8008ca6:	f7f7 fca7 	bl	80005f8 <__aeabi_dmul>
 8008caa:	4680      	mov	r8, r0
 8008cac:	4689      	mov	r9, r1
 8008cae:	e7bd      	b.n	8008c2c <_dtoa_r+0x594>
 8008cb0:	0800b738 	.word	0x0800b738
 8008cb4:	0800b710 	.word	0x0800b710
 8008cb8:	3ff00000 	.word	0x3ff00000
 8008cbc:	40240000 	.word	0x40240000
 8008cc0:	401c0000 	.word	0x401c0000
 8008cc4:	40140000 	.word	0x40140000
 8008cc8:	3fe00000 	.word	0x3fe00000
 8008ccc:	9d01      	ldr	r5, [sp, #4]
 8008cce:	4656      	mov	r6, sl
 8008cd0:	465f      	mov	r7, fp
 8008cd2:	4642      	mov	r2, r8
 8008cd4:	464b      	mov	r3, r9
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	4639      	mov	r1, r7
 8008cda:	f7f7 fdb7 	bl	800084c <__aeabi_ddiv>
 8008cde:	f7f7 ff3b 	bl	8000b58 <__aeabi_d2iz>
 8008ce2:	4682      	mov	sl, r0
 8008ce4:	f7f7 fc1e 	bl	8000524 <__aeabi_i2d>
 8008ce8:	4642      	mov	r2, r8
 8008cea:	464b      	mov	r3, r9
 8008cec:	f7f7 fc84 	bl	80005f8 <__aeabi_dmul>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	4639      	mov	r1, r7
 8008cf8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008cfc:	f7f7 fac4 	bl	8000288 <__aeabi_dsub>
 8008d00:	f805 6b01 	strb.w	r6, [r5], #1
 8008d04:	9e01      	ldr	r6, [sp, #4]
 8008d06:	9f03      	ldr	r7, [sp, #12]
 8008d08:	1bae      	subs	r6, r5, r6
 8008d0a:	42b7      	cmp	r7, r6
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	d135      	bne.n	8008d7e <_dtoa_r+0x6e6>
 8008d12:	f7f7 fabb 	bl	800028c <__adddf3>
 8008d16:	4642      	mov	r2, r8
 8008d18:	464b      	mov	r3, r9
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	460f      	mov	r7, r1
 8008d1e:	f7f7 fefb 	bl	8000b18 <__aeabi_dcmpgt>
 8008d22:	b9d0      	cbnz	r0, 8008d5a <_dtoa_r+0x6c2>
 8008d24:	4642      	mov	r2, r8
 8008d26:	464b      	mov	r3, r9
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	f7f7 fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d30:	b110      	cbz	r0, 8008d38 <_dtoa_r+0x6a0>
 8008d32:	f01a 0f01 	tst.w	sl, #1
 8008d36:	d110      	bne.n	8008d5a <_dtoa_r+0x6c2>
 8008d38:	4620      	mov	r0, r4
 8008d3a:	ee18 1a10 	vmov	r1, s16
 8008d3e:	f000 fae5 	bl	800930c <_Bfree>
 8008d42:	2300      	movs	r3, #0
 8008d44:	9800      	ldr	r0, [sp, #0]
 8008d46:	702b      	strb	r3, [r5, #0]
 8008d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	6018      	str	r0, [r3, #0]
 8008d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f43f acf1 	beq.w	8008738 <_dtoa_r+0xa0>
 8008d56:	601d      	str	r5, [r3, #0]
 8008d58:	e4ee      	b.n	8008738 <_dtoa_r+0xa0>
 8008d5a:	9f00      	ldr	r7, [sp, #0]
 8008d5c:	462b      	mov	r3, r5
 8008d5e:	461d      	mov	r5, r3
 8008d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d64:	2a39      	cmp	r2, #57	; 0x39
 8008d66:	d106      	bne.n	8008d76 <_dtoa_r+0x6de>
 8008d68:	9a01      	ldr	r2, [sp, #4]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d1f7      	bne.n	8008d5e <_dtoa_r+0x6c6>
 8008d6e:	9901      	ldr	r1, [sp, #4]
 8008d70:	2230      	movs	r2, #48	; 0x30
 8008d72:	3701      	adds	r7, #1
 8008d74:	700a      	strb	r2, [r1, #0]
 8008d76:	781a      	ldrb	r2, [r3, #0]
 8008d78:	3201      	adds	r2, #1
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	e790      	b.n	8008ca0 <_dtoa_r+0x608>
 8008d7e:	4ba6      	ldr	r3, [pc, #664]	; (8009018 <_dtoa_r+0x980>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	f7f7 fc39 	bl	80005f8 <__aeabi_dmul>
 8008d86:	2200      	movs	r2, #0
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	460f      	mov	r7, r1
 8008d8e:	f7f7 fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d09d      	beq.n	8008cd2 <_dtoa_r+0x63a>
 8008d96:	e7cf      	b.n	8008d38 <_dtoa_r+0x6a0>
 8008d98:	9a08      	ldr	r2, [sp, #32]
 8008d9a:	2a00      	cmp	r2, #0
 8008d9c:	f000 80d7 	beq.w	8008f4e <_dtoa_r+0x8b6>
 8008da0:	9a06      	ldr	r2, [sp, #24]
 8008da2:	2a01      	cmp	r2, #1
 8008da4:	f300 80ba 	bgt.w	8008f1c <_dtoa_r+0x884>
 8008da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008daa:	2a00      	cmp	r2, #0
 8008dac:	f000 80b2 	beq.w	8008f14 <_dtoa_r+0x87c>
 8008db0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008db4:	9e07      	ldr	r6, [sp, #28]
 8008db6:	9d04      	ldr	r5, [sp, #16]
 8008db8:	9a04      	ldr	r2, [sp, #16]
 8008dba:	441a      	add	r2, r3
 8008dbc:	9204      	str	r2, [sp, #16]
 8008dbe:	9a05      	ldr	r2, [sp, #20]
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	441a      	add	r2, r3
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	9205      	str	r2, [sp, #20]
 8008dc8:	f000 fb58 	bl	800947c <__i2b>
 8008dcc:	4607      	mov	r7, r0
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	dd0c      	ble.n	8008dec <_dtoa_r+0x754>
 8008dd2:	9b05      	ldr	r3, [sp, #20]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	dd09      	ble.n	8008dec <_dtoa_r+0x754>
 8008dd8:	42ab      	cmp	r3, r5
 8008dda:	9a04      	ldr	r2, [sp, #16]
 8008ddc:	bfa8      	it	ge
 8008dde:	462b      	movge	r3, r5
 8008de0:	1ad2      	subs	r2, r2, r3
 8008de2:	9204      	str	r2, [sp, #16]
 8008de4:	9a05      	ldr	r2, [sp, #20]
 8008de6:	1aed      	subs	r5, r5, r3
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	9305      	str	r3, [sp, #20]
 8008dec:	9b07      	ldr	r3, [sp, #28]
 8008dee:	b31b      	cbz	r3, 8008e38 <_dtoa_r+0x7a0>
 8008df0:	9b08      	ldr	r3, [sp, #32]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 80af 	beq.w	8008f56 <_dtoa_r+0x8be>
 8008df8:	2e00      	cmp	r6, #0
 8008dfa:	dd13      	ble.n	8008e24 <_dtoa_r+0x78c>
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	4632      	mov	r2, r6
 8008e00:	4620      	mov	r0, r4
 8008e02:	f000 fbfb 	bl	80095fc <__pow5mult>
 8008e06:	ee18 2a10 	vmov	r2, s16
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 fb4a 	bl	80094a8 <__multiply>
 8008e14:	ee18 1a10 	vmov	r1, s16
 8008e18:	4680      	mov	r8, r0
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f000 fa76 	bl	800930c <_Bfree>
 8008e20:	ee08 8a10 	vmov	s16, r8
 8008e24:	9b07      	ldr	r3, [sp, #28]
 8008e26:	1b9a      	subs	r2, r3, r6
 8008e28:	d006      	beq.n	8008e38 <_dtoa_r+0x7a0>
 8008e2a:	ee18 1a10 	vmov	r1, s16
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f000 fbe4 	bl	80095fc <__pow5mult>
 8008e34:	ee08 0a10 	vmov	s16, r0
 8008e38:	2101      	movs	r1, #1
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fb1e 	bl	800947c <__i2b>
 8008e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	4606      	mov	r6, r0
 8008e46:	f340 8088 	ble.w	8008f5a <_dtoa_r+0x8c2>
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	4601      	mov	r1, r0
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f000 fbd4 	bl	80095fc <__pow5mult>
 8008e54:	9b06      	ldr	r3, [sp, #24]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	4606      	mov	r6, r0
 8008e5a:	f340 8081 	ble.w	8008f60 <_dtoa_r+0x8c8>
 8008e5e:	f04f 0800 	mov.w	r8, #0
 8008e62:	6933      	ldr	r3, [r6, #16]
 8008e64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008e68:	6918      	ldr	r0, [r3, #16]
 8008e6a:	f000 fab7 	bl	80093dc <__hi0bits>
 8008e6e:	f1c0 0020 	rsb	r0, r0, #32
 8008e72:	9b05      	ldr	r3, [sp, #20]
 8008e74:	4418      	add	r0, r3
 8008e76:	f010 001f 	ands.w	r0, r0, #31
 8008e7a:	f000 8092 	beq.w	8008fa2 <_dtoa_r+0x90a>
 8008e7e:	f1c0 0320 	rsb	r3, r0, #32
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	f340 808a 	ble.w	8008f9c <_dtoa_r+0x904>
 8008e88:	f1c0 001c 	rsb	r0, r0, #28
 8008e8c:	9b04      	ldr	r3, [sp, #16]
 8008e8e:	4403      	add	r3, r0
 8008e90:	9304      	str	r3, [sp, #16]
 8008e92:	9b05      	ldr	r3, [sp, #20]
 8008e94:	4403      	add	r3, r0
 8008e96:	4405      	add	r5, r0
 8008e98:	9305      	str	r3, [sp, #20]
 8008e9a:	9b04      	ldr	r3, [sp, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	dd07      	ble.n	8008eb0 <_dtoa_r+0x818>
 8008ea0:	ee18 1a10 	vmov	r1, s16
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f000 fc02 	bl	80096b0 <__lshift>
 8008eac:	ee08 0a10 	vmov	s16, r0
 8008eb0:	9b05      	ldr	r3, [sp, #20]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	dd05      	ble.n	8008ec2 <_dtoa_r+0x82a>
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	461a      	mov	r2, r3
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 fbf8 	bl	80096b0 <__lshift>
 8008ec0:	4606      	mov	r6, r0
 8008ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d06e      	beq.n	8008fa6 <_dtoa_r+0x90e>
 8008ec8:	ee18 0a10 	vmov	r0, s16
 8008ecc:	4631      	mov	r1, r6
 8008ece:	f000 fc5f 	bl	8009790 <__mcmp>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	da67      	bge.n	8008fa6 <_dtoa_r+0x90e>
 8008ed6:	9b00      	ldr	r3, [sp, #0]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	ee18 1a10 	vmov	r1, s16
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	220a      	movs	r2, #10
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f000 fa33 	bl	8009350 <__multadd>
 8008eea:	9b08      	ldr	r3, [sp, #32]
 8008eec:	ee08 0a10 	vmov	s16, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 81b1 	beq.w	8009258 <_dtoa_r+0xbc0>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4639      	mov	r1, r7
 8008efa:	220a      	movs	r2, #10
 8008efc:	4620      	mov	r0, r4
 8008efe:	f000 fa27 	bl	8009350 <__multadd>
 8008f02:	9b02      	ldr	r3, [sp, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	4607      	mov	r7, r0
 8008f08:	f300 808e 	bgt.w	8009028 <_dtoa_r+0x990>
 8008f0c:	9b06      	ldr	r3, [sp, #24]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	dc51      	bgt.n	8008fb6 <_dtoa_r+0x91e>
 8008f12:	e089      	b.n	8009028 <_dtoa_r+0x990>
 8008f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f1a:	e74b      	b.n	8008db4 <_dtoa_r+0x71c>
 8008f1c:	9b03      	ldr	r3, [sp, #12]
 8008f1e:	1e5e      	subs	r6, r3, #1
 8008f20:	9b07      	ldr	r3, [sp, #28]
 8008f22:	42b3      	cmp	r3, r6
 8008f24:	bfbf      	itttt	lt
 8008f26:	9b07      	ldrlt	r3, [sp, #28]
 8008f28:	9607      	strlt	r6, [sp, #28]
 8008f2a:	1af2      	sublt	r2, r6, r3
 8008f2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008f2e:	bfb6      	itet	lt
 8008f30:	189b      	addlt	r3, r3, r2
 8008f32:	1b9e      	subge	r6, r3, r6
 8008f34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008f36:	9b03      	ldr	r3, [sp, #12]
 8008f38:	bfb8      	it	lt
 8008f3a:	2600      	movlt	r6, #0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	bfb7      	itett	lt
 8008f40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008f44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008f48:	1a9d      	sublt	r5, r3, r2
 8008f4a:	2300      	movlt	r3, #0
 8008f4c:	e734      	b.n	8008db8 <_dtoa_r+0x720>
 8008f4e:	9e07      	ldr	r6, [sp, #28]
 8008f50:	9d04      	ldr	r5, [sp, #16]
 8008f52:	9f08      	ldr	r7, [sp, #32]
 8008f54:	e73b      	b.n	8008dce <_dtoa_r+0x736>
 8008f56:	9a07      	ldr	r2, [sp, #28]
 8008f58:	e767      	b.n	8008e2a <_dtoa_r+0x792>
 8008f5a:	9b06      	ldr	r3, [sp, #24]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	dc18      	bgt.n	8008f92 <_dtoa_r+0x8fa>
 8008f60:	f1ba 0f00 	cmp.w	sl, #0
 8008f64:	d115      	bne.n	8008f92 <_dtoa_r+0x8fa>
 8008f66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f6a:	b993      	cbnz	r3, 8008f92 <_dtoa_r+0x8fa>
 8008f6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f70:	0d1b      	lsrs	r3, r3, #20
 8008f72:	051b      	lsls	r3, r3, #20
 8008f74:	b183      	cbz	r3, 8008f98 <_dtoa_r+0x900>
 8008f76:	9b04      	ldr	r3, [sp, #16]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	9304      	str	r3, [sp, #16]
 8008f7c:	9b05      	ldr	r3, [sp, #20]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	9305      	str	r3, [sp, #20]
 8008f82:	f04f 0801 	mov.w	r8, #1
 8008f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f47f af6a 	bne.w	8008e62 <_dtoa_r+0x7ca>
 8008f8e:	2001      	movs	r0, #1
 8008f90:	e76f      	b.n	8008e72 <_dtoa_r+0x7da>
 8008f92:	f04f 0800 	mov.w	r8, #0
 8008f96:	e7f6      	b.n	8008f86 <_dtoa_r+0x8ee>
 8008f98:	4698      	mov	r8, r3
 8008f9a:	e7f4      	b.n	8008f86 <_dtoa_r+0x8ee>
 8008f9c:	f43f af7d 	beq.w	8008e9a <_dtoa_r+0x802>
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	301c      	adds	r0, #28
 8008fa4:	e772      	b.n	8008e8c <_dtoa_r+0x7f4>
 8008fa6:	9b03      	ldr	r3, [sp, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	dc37      	bgt.n	800901c <_dtoa_r+0x984>
 8008fac:	9b06      	ldr	r3, [sp, #24]
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	dd34      	ble.n	800901c <_dtoa_r+0x984>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	9302      	str	r3, [sp, #8]
 8008fb6:	9b02      	ldr	r3, [sp, #8]
 8008fb8:	b96b      	cbnz	r3, 8008fd6 <_dtoa_r+0x93e>
 8008fba:	4631      	mov	r1, r6
 8008fbc:	2205      	movs	r2, #5
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 f9c6 	bl	8009350 <__multadd>
 8008fc4:	4601      	mov	r1, r0
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	ee18 0a10 	vmov	r0, s16
 8008fcc:	f000 fbe0 	bl	8009790 <__mcmp>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	f73f adbb 	bgt.w	8008b4c <_dtoa_r+0x4b4>
 8008fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd8:	9d01      	ldr	r5, [sp, #4]
 8008fda:	43db      	mvns	r3, r3
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	f04f 0800 	mov.w	r8, #0
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f000 f991 	bl	800930c <_Bfree>
 8008fea:	2f00      	cmp	r7, #0
 8008fec:	f43f aea4 	beq.w	8008d38 <_dtoa_r+0x6a0>
 8008ff0:	f1b8 0f00 	cmp.w	r8, #0
 8008ff4:	d005      	beq.n	8009002 <_dtoa_r+0x96a>
 8008ff6:	45b8      	cmp	r8, r7
 8008ff8:	d003      	beq.n	8009002 <_dtoa_r+0x96a>
 8008ffa:	4641      	mov	r1, r8
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f000 f985 	bl	800930c <_Bfree>
 8009002:	4639      	mov	r1, r7
 8009004:	4620      	mov	r0, r4
 8009006:	f000 f981 	bl	800930c <_Bfree>
 800900a:	e695      	b.n	8008d38 <_dtoa_r+0x6a0>
 800900c:	2600      	movs	r6, #0
 800900e:	4637      	mov	r7, r6
 8009010:	e7e1      	b.n	8008fd6 <_dtoa_r+0x93e>
 8009012:	9700      	str	r7, [sp, #0]
 8009014:	4637      	mov	r7, r6
 8009016:	e599      	b.n	8008b4c <_dtoa_r+0x4b4>
 8009018:	40240000 	.word	0x40240000
 800901c:	9b08      	ldr	r3, [sp, #32]
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 80ca 	beq.w	80091b8 <_dtoa_r+0xb20>
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	9302      	str	r3, [sp, #8]
 8009028:	2d00      	cmp	r5, #0
 800902a:	dd05      	ble.n	8009038 <_dtoa_r+0x9a0>
 800902c:	4639      	mov	r1, r7
 800902e:	462a      	mov	r2, r5
 8009030:	4620      	mov	r0, r4
 8009032:	f000 fb3d 	bl	80096b0 <__lshift>
 8009036:	4607      	mov	r7, r0
 8009038:	f1b8 0f00 	cmp.w	r8, #0
 800903c:	d05b      	beq.n	80090f6 <_dtoa_r+0xa5e>
 800903e:	6879      	ldr	r1, [r7, #4]
 8009040:	4620      	mov	r0, r4
 8009042:	f000 f923 	bl	800928c <_Balloc>
 8009046:	4605      	mov	r5, r0
 8009048:	b928      	cbnz	r0, 8009056 <_dtoa_r+0x9be>
 800904a:	4b87      	ldr	r3, [pc, #540]	; (8009268 <_dtoa_r+0xbd0>)
 800904c:	4602      	mov	r2, r0
 800904e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009052:	f7ff bb3b 	b.w	80086cc <_dtoa_r+0x34>
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	3202      	adds	r2, #2
 800905a:	0092      	lsls	r2, r2, #2
 800905c:	f107 010c 	add.w	r1, r7, #12
 8009060:	300c      	adds	r0, #12
 8009062:	f7fe fded 	bl	8007c40 <memcpy>
 8009066:	2201      	movs	r2, #1
 8009068:	4629      	mov	r1, r5
 800906a:	4620      	mov	r0, r4
 800906c:	f000 fb20 	bl	80096b0 <__lshift>
 8009070:	9b01      	ldr	r3, [sp, #4]
 8009072:	f103 0901 	add.w	r9, r3, #1
 8009076:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800907a:	4413      	add	r3, r2
 800907c:	9305      	str	r3, [sp, #20]
 800907e:	f00a 0301 	and.w	r3, sl, #1
 8009082:	46b8      	mov	r8, r7
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	4607      	mov	r7, r0
 8009088:	4631      	mov	r1, r6
 800908a:	ee18 0a10 	vmov	r0, s16
 800908e:	f7ff fa77 	bl	8008580 <quorem>
 8009092:	4641      	mov	r1, r8
 8009094:	9002      	str	r0, [sp, #8]
 8009096:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800909a:	ee18 0a10 	vmov	r0, s16
 800909e:	f000 fb77 	bl	8009790 <__mcmp>
 80090a2:	463a      	mov	r2, r7
 80090a4:	9003      	str	r0, [sp, #12]
 80090a6:	4631      	mov	r1, r6
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 fb8d 	bl	80097c8 <__mdiff>
 80090ae:	68c2      	ldr	r2, [r0, #12]
 80090b0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80090b4:	4605      	mov	r5, r0
 80090b6:	bb02      	cbnz	r2, 80090fa <_dtoa_r+0xa62>
 80090b8:	4601      	mov	r1, r0
 80090ba:	ee18 0a10 	vmov	r0, s16
 80090be:	f000 fb67 	bl	8009790 <__mcmp>
 80090c2:	4602      	mov	r2, r0
 80090c4:	4629      	mov	r1, r5
 80090c6:	4620      	mov	r0, r4
 80090c8:	9207      	str	r2, [sp, #28]
 80090ca:	f000 f91f 	bl	800930c <_Bfree>
 80090ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80090d2:	ea43 0102 	orr.w	r1, r3, r2
 80090d6:	9b04      	ldr	r3, [sp, #16]
 80090d8:	430b      	orrs	r3, r1
 80090da:	464d      	mov	r5, r9
 80090dc:	d10f      	bne.n	80090fe <_dtoa_r+0xa66>
 80090de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090e2:	d02a      	beq.n	800913a <_dtoa_r+0xaa2>
 80090e4:	9b03      	ldr	r3, [sp, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	dd02      	ble.n	80090f0 <_dtoa_r+0xa58>
 80090ea:	9b02      	ldr	r3, [sp, #8]
 80090ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80090f0:	f88b a000 	strb.w	sl, [fp]
 80090f4:	e775      	b.n	8008fe2 <_dtoa_r+0x94a>
 80090f6:	4638      	mov	r0, r7
 80090f8:	e7ba      	b.n	8009070 <_dtoa_r+0x9d8>
 80090fa:	2201      	movs	r2, #1
 80090fc:	e7e2      	b.n	80090c4 <_dtoa_r+0xa2c>
 80090fe:	9b03      	ldr	r3, [sp, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	db04      	blt.n	800910e <_dtoa_r+0xa76>
 8009104:	9906      	ldr	r1, [sp, #24]
 8009106:	430b      	orrs	r3, r1
 8009108:	9904      	ldr	r1, [sp, #16]
 800910a:	430b      	orrs	r3, r1
 800910c:	d122      	bne.n	8009154 <_dtoa_r+0xabc>
 800910e:	2a00      	cmp	r2, #0
 8009110:	ddee      	ble.n	80090f0 <_dtoa_r+0xa58>
 8009112:	ee18 1a10 	vmov	r1, s16
 8009116:	2201      	movs	r2, #1
 8009118:	4620      	mov	r0, r4
 800911a:	f000 fac9 	bl	80096b0 <__lshift>
 800911e:	4631      	mov	r1, r6
 8009120:	ee08 0a10 	vmov	s16, r0
 8009124:	f000 fb34 	bl	8009790 <__mcmp>
 8009128:	2800      	cmp	r0, #0
 800912a:	dc03      	bgt.n	8009134 <_dtoa_r+0xa9c>
 800912c:	d1e0      	bne.n	80090f0 <_dtoa_r+0xa58>
 800912e:	f01a 0f01 	tst.w	sl, #1
 8009132:	d0dd      	beq.n	80090f0 <_dtoa_r+0xa58>
 8009134:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009138:	d1d7      	bne.n	80090ea <_dtoa_r+0xa52>
 800913a:	2339      	movs	r3, #57	; 0x39
 800913c:	f88b 3000 	strb.w	r3, [fp]
 8009140:	462b      	mov	r3, r5
 8009142:	461d      	mov	r5, r3
 8009144:	3b01      	subs	r3, #1
 8009146:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800914a:	2a39      	cmp	r2, #57	; 0x39
 800914c:	d071      	beq.n	8009232 <_dtoa_r+0xb9a>
 800914e:	3201      	adds	r2, #1
 8009150:	701a      	strb	r2, [r3, #0]
 8009152:	e746      	b.n	8008fe2 <_dtoa_r+0x94a>
 8009154:	2a00      	cmp	r2, #0
 8009156:	dd07      	ble.n	8009168 <_dtoa_r+0xad0>
 8009158:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800915c:	d0ed      	beq.n	800913a <_dtoa_r+0xaa2>
 800915e:	f10a 0301 	add.w	r3, sl, #1
 8009162:	f88b 3000 	strb.w	r3, [fp]
 8009166:	e73c      	b.n	8008fe2 <_dtoa_r+0x94a>
 8009168:	9b05      	ldr	r3, [sp, #20]
 800916a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800916e:	4599      	cmp	r9, r3
 8009170:	d047      	beq.n	8009202 <_dtoa_r+0xb6a>
 8009172:	ee18 1a10 	vmov	r1, s16
 8009176:	2300      	movs	r3, #0
 8009178:	220a      	movs	r2, #10
 800917a:	4620      	mov	r0, r4
 800917c:	f000 f8e8 	bl	8009350 <__multadd>
 8009180:	45b8      	cmp	r8, r7
 8009182:	ee08 0a10 	vmov	s16, r0
 8009186:	f04f 0300 	mov.w	r3, #0
 800918a:	f04f 020a 	mov.w	r2, #10
 800918e:	4641      	mov	r1, r8
 8009190:	4620      	mov	r0, r4
 8009192:	d106      	bne.n	80091a2 <_dtoa_r+0xb0a>
 8009194:	f000 f8dc 	bl	8009350 <__multadd>
 8009198:	4680      	mov	r8, r0
 800919a:	4607      	mov	r7, r0
 800919c:	f109 0901 	add.w	r9, r9, #1
 80091a0:	e772      	b.n	8009088 <_dtoa_r+0x9f0>
 80091a2:	f000 f8d5 	bl	8009350 <__multadd>
 80091a6:	4639      	mov	r1, r7
 80091a8:	4680      	mov	r8, r0
 80091aa:	2300      	movs	r3, #0
 80091ac:	220a      	movs	r2, #10
 80091ae:	4620      	mov	r0, r4
 80091b0:	f000 f8ce 	bl	8009350 <__multadd>
 80091b4:	4607      	mov	r7, r0
 80091b6:	e7f1      	b.n	800919c <_dtoa_r+0xb04>
 80091b8:	9b03      	ldr	r3, [sp, #12]
 80091ba:	9302      	str	r3, [sp, #8]
 80091bc:	9d01      	ldr	r5, [sp, #4]
 80091be:	ee18 0a10 	vmov	r0, s16
 80091c2:	4631      	mov	r1, r6
 80091c4:	f7ff f9dc 	bl	8008580 <quorem>
 80091c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80091cc:	9b01      	ldr	r3, [sp, #4]
 80091ce:	f805 ab01 	strb.w	sl, [r5], #1
 80091d2:	1aea      	subs	r2, r5, r3
 80091d4:	9b02      	ldr	r3, [sp, #8]
 80091d6:	4293      	cmp	r3, r2
 80091d8:	dd09      	ble.n	80091ee <_dtoa_r+0xb56>
 80091da:	ee18 1a10 	vmov	r1, s16
 80091de:	2300      	movs	r3, #0
 80091e0:	220a      	movs	r2, #10
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 f8b4 	bl	8009350 <__multadd>
 80091e8:	ee08 0a10 	vmov	s16, r0
 80091ec:	e7e7      	b.n	80091be <_dtoa_r+0xb26>
 80091ee:	9b02      	ldr	r3, [sp, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	bfc8      	it	gt
 80091f4:	461d      	movgt	r5, r3
 80091f6:	9b01      	ldr	r3, [sp, #4]
 80091f8:	bfd8      	it	le
 80091fa:	2501      	movle	r5, #1
 80091fc:	441d      	add	r5, r3
 80091fe:	f04f 0800 	mov.w	r8, #0
 8009202:	ee18 1a10 	vmov	r1, s16
 8009206:	2201      	movs	r2, #1
 8009208:	4620      	mov	r0, r4
 800920a:	f000 fa51 	bl	80096b0 <__lshift>
 800920e:	4631      	mov	r1, r6
 8009210:	ee08 0a10 	vmov	s16, r0
 8009214:	f000 fabc 	bl	8009790 <__mcmp>
 8009218:	2800      	cmp	r0, #0
 800921a:	dc91      	bgt.n	8009140 <_dtoa_r+0xaa8>
 800921c:	d102      	bne.n	8009224 <_dtoa_r+0xb8c>
 800921e:	f01a 0f01 	tst.w	sl, #1
 8009222:	d18d      	bne.n	8009140 <_dtoa_r+0xaa8>
 8009224:	462b      	mov	r3, r5
 8009226:	461d      	mov	r5, r3
 8009228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800922c:	2a30      	cmp	r2, #48	; 0x30
 800922e:	d0fa      	beq.n	8009226 <_dtoa_r+0xb8e>
 8009230:	e6d7      	b.n	8008fe2 <_dtoa_r+0x94a>
 8009232:	9a01      	ldr	r2, [sp, #4]
 8009234:	429a      	cmp	r2, r3
 8009236:	d184      	bne.n	8009142 <_dtoa_r+0xaaa>
 8009238:	9b00      	ldr	r3, [sp, #0]
 800923a:	3301      	adds	r3, #1
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	2331      	movs	r3, #49	; 0x31
 8009240:	7013      	strb	r3, [r2, #0]
 8009242:	e6ce      	b.n	8008fe2 <_dtoa_r+0x94a>
 8009244:	4b09      	ldr	r3, [pc, #36]	; (800926c <_dtoa_r+0xbd4>)
 8009246:	f7ff ba95 	b.w	8008774 <_dtoa_r+0xdc>
 800924a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800924c:	2b00      	cmp	r3, #0
 800924e:	f47f aa6e 	bne.w	800872e <_dtoa_r+0x96>
 8009252:	4b07      	ldr	r3, [pc, #28]	; (8009270 <_dtoa_r+0xbd8>)
 8009254:	f7ff ba8e 	b.w	8008774 <_dtoa_r+0xdc>
 8009258:	9b02      	ldr	r3, [sp, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	dcae      	bgt.n	80091bc <_dtoa_r+0xb24>
 800925e:	9b06      	ldr	r3, [sp, #24]
 8009260:	2b02      	cmp	r3, #2
 8009262:	f73f aea8 	bgt.w	8008fb6 <_dtoa_r+0x91e>
 8009266:	e7a9      	b.n	80091bc <_dtoa_r+0xb24>
 8009268:	0800b6a3 	.word	0x0800b6a3
 800926c:	0800b600 	.word	0x0800b600
 8009270:	0800b624 	.word	0x0800b624

08009274 <_localeconv_r>:
 8009274:	4800      	ldr	r0, [pc, #0]	; (8009278 <_localeconv_r+0x4>)
 8009276:	4770      	bx	lr
 8009278:	20000198 	.word	0x20000198

0800927c <malloc>:
 800927c:	4b02      	ldr	r3, [pc, #8]	; (8009288 <malloc+0xc>)
 800927e:	4601      	mov	r1, r0
 8009280:	6818      	ldr	r0, [r3, #0]
 8009282:	f000 bc09 	b.w	8009a98 <_malloc_r>
 8009286:	bf00      	nop
 8009288:	20000044 	.word	0x20000044

0800928c <_Balloc>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009290:	4604      	mov	r4, r0
 8009292:	460d      	mov	r5, r1
 8009294:	b976      	cbnz	r6, 80092b4 <_Balloc+0x28>
 8009296:	2010      	movs	r0, #16
 8009298:	f7ff fff0 	bl	800927c <malloc>
 800929c:	4602      	mov	r2, r0
 800929e:	6260      	str	r0, [r4, #36]	; 0x24
 80092a0:	b920      	cbnz	r0, 80092ac <_Balloc+0x20>
 80092a2:	4b18      	ldr	r3, [pc, #96]	; (8009304 <_Balloc+0x78>)
 80092a4:	4818      	ldr	r0, [pc, #96]	; (8009308 <_Balloc+0x7c>)
 80092a6:	2166      	movs	r1, #102	; 0x66
 80092a8:	f000 fdd6 	bl	8009e58 <__assert_func>
 80092ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092b0:	6006      	str	r6, [r0, #0]
 80092b2:	60c6      	str	r6, [r0, #12]
 80092b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092b6:	68f3      	ldr	r3, [r6, #12]
 80092b8:	b183      	cbz	r3, 80092dc <_Balloc+0x50>
 80092ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092c2:	b9b8      	cbnz	r0, 80092f4 <_Balloc+0x68>
 80092c4:	2101      	movs	r1, #1
 80092c6:	fa01 f605 	lsl.w	r6, r1, r5
 80092ca:	1d72      	adds	r2, r6, #5
 80092cc:	0092      	lsls	r2, r2, #2
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 fb60 	bl	8009994 <_calloc_r>
 80092d4:	b160      	cbz	r0, 80092f0 <_Balloc+0x64>
 80092d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092da:	e00e      	b.n	80092fa <_Balloc+0x6e>
 80092dc:	2221      	movs	r2, #33	; 0x21
 80092de:	2104      	movs	r1, #4
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fb57 	bl	8009994 <_calloc_r>
 80092e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092e8:	60f0      	str	r0, [r6, #12]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e4      	bne.n	80092ba <_Balloc+0x2e>
 80092f0:	2000      	movs	r0, #0
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
 80092f4:	6802      	ldr	r2, [r0, #0]
 80092f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092fa:	2300      	movs	r3, #0
 80092fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009300:	e7f7      	b.n	80092f2 <_Balloc+0x66>
 8009302:	bf00      	nop
 8009304:	0800b631 	.word	0x0800b631
 8009308:	0800b6b4 	.word	0x0800b6b4

0800930c <_Bfree>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009310:	4605      	mov	r5, r0
 8009312:	460c      	mov	r4, r1
 8009314:	b976      	cbnz	r6, 8009334 <_Bfree+0x28>
 8009316:	2010      	movs	r0, #16
 8009318:	f7ff ffb0 	bl	800927c <malloc>
 800931c:	4602      	mov	r2, r0
 800931e:	6268      	str	r0, [r5, #36]	; 0x24
 8009320:	b920      	cbnz	r0, 800932c <_Bfree+0x20>
 8009322:	4b09      	ldr	r3, [pc, #36]	; (8009348 <_Bfree+0x3c>)
 8009324:	4809      	ldr	r0, [pc, #36]	; (800934c <_Bfree+0x40>)
 8009326:	218a      	movs	r1, #138	; 0x8a
 8009328:	f000 fd96 	bl	8009e58 <__assert_func>
 800932c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009330:	6006      	str	r6, [r0, #0]
 8009332:	60c6      	str	r6, [r0, #12]
 8009334:	b13c      	cbz	r4, 8009346 <_Bfree+0x3a>
 8009336:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009338:	6862      	ldr	r2, [r4, #4]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009340:	6021      	str	r1, [r4, #0]
 8009342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009346:	bd70      	pop	{r4, r5, r6, pc}
 8009348:	0800b631 	.word	0x0800b631
 800934c:	0800b6b4 	.word	0x0800b6b4

08009350 <__multadd>:
 8009350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009354:	690d      	ldr	r5, [r1, #16]
 8009356:	4607      	mov	r7, r0
 8009358:	460c      	mov	r4, r1
 800935a:	461e      	mov	r6, r3
 800935c:	f101 0c14 	add.w	ip, r1, #20
 8009360:	2000      	movs	r0, #0
 8009362:	f8dc 3000 	ldr.w	r3, [ip]
 8009366:	b299      	uxth	r1, r3
 8009368:	fb02 6101 	mla	r1, r2, r1, r6
 800936c:	0c1e      	lsrs	r6, r3, #16
 800936e:	0c0b      	lsrs	r3, r1, #16
 8009370:	fb02 3306 	mla	r3, r2, r6, r3
 8009374:	b289      	uxth	r1, r1
 8009376:	3001      	adds	r0, #1
 8009378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800937c:	4285      	cmp	r5, r0
 800937e:	f84c 1b04 	str.w	r1, [ip], #4
 8009382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009386:	dcec      	bgt.n	8009362 <__multadd+0x12>
 8009388:	b30e      	cbz	r6, 80093ce <__multadd+0x7e>
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	42ab      	cmp	r3, r5
 800938e:	dc19      	bgt.n	80093c4 <__multadd+0x74>
 8009390:	6861      	ldr	r1, [r4, #4]
 8009392:	4638      	mov	r0, r7
 8009394:	3101      	adds	r1, #1
 8009396:	f7ff ff79 	bl	800928c <_Balloc>
 800939a:	4680      	mov	r8, r0
 800939c:	b928      	cbnz	r0, 80093aa <__multadd+0x5a>
 800939e:	4602      	mov	r2, r0
 80093a0:	4b0c      	ldr	r3, [pc, #48]	; (80093d4 <__multadd+0x84>)
 80093a2:	480d      	ldr	r0, [pc, #52]	; (80093d8 <__multadd+0x88>)
 80093a4:	21b5      	movs	r1, #181	; 0xb5
 80093a6:	f000 fd57 	bl	8009e58 <__assert_func>
 80093aa:	6922      	ldr	r2, [r4, #16]
 80093ac:	3202      	adds	r2, #2
 80093ae:	f104 010c 	add.w	r1, r4, #12
 80093b2:	0092      	lsls	r2, r2, #2
 80093b4:	300c      	adds	r0, #12
 80093b6:	f7fe fc43 	bl	8007c40 <memcpy>
 80093ba:	4621      	mov	r1, r4
 80093bc:	4638      	mov	r0, r7
 80093be:	f7ff ffa5 	bl	800930c <_Bfree>
 80093c2:	4644      	mov	r4, r8
 80093c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093c8:	3501      	adds	r5, #1
 80093ca:	615e      	str	r6, [r3, #20]
 80093cc:	6125      	str	r5, [r4, #16]
 80093ce:	4620      	mov	r0, r4
 80093d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d4:	0800b6a3 	.word	0x0800b6a3
 80093d8:	0800b6b4 	.word	0x0800b6b4

080093dc <__hi0bits>:
 80093dc:	0c03      	lsrs	r3, r0, #16
 80093de:	041b      	lsls	r3, r3, #16
 80093e0:	b9d3      	cbnz	r3, 8009418 <__hi0bits+0x3c>
 80093e2:	0400      	lsls	r0, r0, #16
 80093e4:	2310      	movs	r3, #16
 80093e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80093ea:	bf04      	itt	eq
 80093ec:	0200      	lsleq	r0, r0, #8
 80093ee:	3308      	addeq	r3, #8
 80093f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80093f4:	bf04      	itt	eq
 80093f6:	0100      	lsleq	r0, r0, #4
 80093f8:	3304      	addeq	r3, #4
 80093fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80093fe:	bf04      	itt	eq
 8009400:	0080      	lsleq	r0, r0, #2
 8009402:	3302      	addeq	r3, #2
 8009404:	2800      	cmp	r0, #0
 8009406:	db05      	blt.n	8009414 <__hi0bits+0x38>
 8009408:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800940c:	f103 0301 	add.w	r3, r3, #1
 8009410:	bf08      	it	eq
 8009412:	2320      	moveq	r3, #32
 8009414:	4618      	mov	r0, r3
 8009416:	4770      	bx	lr
 8009418:	2300      	movs	r3, #0
 800941a:	e7e4      	b.n	80093e6 <__hi0bits+0xa>

0800941c <__lo0bits>:
 800941c:	6803      	ldr	r3, [r0, #0]
 800941e:	f013 0207 	ands.w	r2, r3, #7
 8009422:	4601      	mov	r1, r0
 8009424:	d00b      	beq.n	800943e <__lo0bits+0x22>
 8009426:	07da      	lsls	r2, r3, #31
 8009428:	d423      	bmi.n	8009472 <__lo0bits+0x56>
 800942a:	0798      	lsls	r0, r3, #30
 800942c:	bf49      	itett	mi
 800942e:	085b      	lsrmi	r3, r3, #1
 8009430:	089b      	lsrpl	r3, r3, #2
 8009432:	2001      	movmi	r0, #1
 8009434:	600b      	strmi	r3, [r1, #0]
 8009436:	bf5c      	itt	pl
 8009438:	600b      	strpl	r3, [r1, #0]
 800943a:	2002      	movpl	r0, #2
 800943c:	4770      	bx	lr
 800943e:	b298      	uxth	r0, r3
 8009440:	b9a8      	cbnz	r0, 800946e <__lo0bits+0x52>
 8009442:	0c1b      	lsrs	r3, r3, #16
 8009444:	2010      	movs	r0, #16
 8009446:	b2da      	uxtb	r2, r3
 8009448:	b90a      	cbnz	r2, 800944e <__lo0bits+0x32>
 800944a:	3008      	adds	r0, #8
 800944c:	0a1b      	lsrs	r3, r3, #8
 800944e:	071a      	lsls	r2, r3, #28
 8009450:	bf04      	itt	eq
 8009452:	091b      	lsreq	r3, r3, #4
 8009454:	3004      	addeq	r0, #4
 8009456:	079a      	lsls	r2, r3, #30
 8009458:	bf04      	itt	eq
 800945a:	089b      	lsreq	r3, r3, #2
 800945c:	3002      	addeq	r0, #2
 800945e:	07da      	lsls	r2, r3, #31
 8009460:	d403      	bmi.n	800946a <__lo0bits+0x4e>
 8009462:	085b      	lsrs	r3, r3, #1
 8009464:	f100 0001 	add.w	r0, r0, #1
 8009468:	d005      	beq.n	8009476 <__lo0bits+0x5a>
 800946a:	600b      	str	r3, [r1, #0]
 800946c:	4770      	bx	lr
 800946e:	4610      	mov	r0, r2
 8009470:	e7e9      	b.n	8009446 <__lo0bits+0x2a>
 8009472:	2000      	movs	r0, #0
 8009474:	4770      	bx	lr
 8009476:	2020      	movs	r0, #32
 8009478:	4770      	bx	lr
	...

0800947c <__i2b>:
 800947c:	b510      	push	{r4, lr}
 800947e:	460c      	mov	r4, r1
 8009480:	2101      	movs	r1, #1
 8009482:	f7ff ff03 	bl	800928c <_Balloc>
 8009486:	4602      	mov	r2, r0
 8009488:	b928      	cbnz	r0, 8009496 <__i2b+0x1a>
 800948a:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <__i2b+0x24>)
 800948c:	4805      	ldr	r0, [pc, #20]	; (80094a4 <__i2b+0x28>)
 800948e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009492:	f000 fce1 	bl	8009e58 <__assert_func>
 8009496:	2301      	movs	r3, #1
 8009498:	6144      	str	r4, [r0, #20]
 800949a:	6103      	str	r3, [r0, #16]
 800949c:	bd10      	pop	{r4, pc}
 800949e:	bf00      	nop
 80094a0:	0800b6a3 	.word	0x0800b6a3
 80094a4:	0800b6b4 	.word	0x0800b6b4

080094a8 <__multiply>:
 80094a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ac:	4691      	mov	r9, r2
 80094ae:	690a      	ldr	r2, [r1, #16]
 80094b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	bfb8      	it	lt
 80094b8:	460b      	movlt	r3, r1
 80094ba:	460c      	mov	r4, r1
 80094bc:	bfbc      	itt	lt
 80094be:	464c      	movlt	r4, r9
 80094c0:	4699      	movlt	r9, r3
 80094c2:	6927      	ldr	r7, [r4, #16]
 80094c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80094c8:	68a3      	ldr	r3, [r4, #8]
 80094ca:	6861      	ldr	r1, [r4, #4]
 80094cc:	eb07 060a 	add.w	r6, r7, sl
 80094d0:	42b3      	cmp	r3, r6
 80094d2:	b085      	sub	sp, #20
 80094d4:	bfb8      	it	lt
 80094d6:	3101      	addlt	r1, #1
 80094d8:	f7ff fed8 	bl	800928c <_Balloc>
 80094dc:	b930      	cbnz	r0, 80094ec <__multiply+0x44>
 80094de:	4602      	mov	r2, r0
 80094e0:	4b44      	ldr	r3, [pc, #272]	; (80095f4 <__multiply+0x14c>)
 80094e2:	4845      	ldr	r0, [pc, #276]	; (80095f8 <__multiply+0x150>)
 80094e4:	f240 115d 	movw	r1, #349	; 0x15d
 80094e8:	f000 fcb6 	bl	8009e58 <__assert_func>
 80094ec:	f100 0514 	add.w	r5, r0, #20
 80094f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094f4:	462b      	mov	r3, r5
 80094f6:	2200      	movs	r2, #0
 80094f8:	4543      	cmp	r3, r8
 80094fa:	d321      	bcc.n	8009540 <__multiply+0x98>
 80094fc:	f104 0314 	add.w	r3, r4, #20
 8009500:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009504:	f109 0314 	add.w	r3, r9, #20
 8009508:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800950c:	9202      	str	r2, [sp, #8]
 800950e:	1b3a      	subs	r2, r7, r4
 8009510:	3a15      	subs	r2, #21
 8009512:	f022 0203 	bic.w	r2, r2, #3
 8009516:	3204      	adds	r2, #4
 8009518:	f104 0115 	add.w	r1, r4, #21
 800951c:	428f      	cmp	r7, r1
 800951e:	bf38      	it	cc
 8009520:	2204      	movcc	r2, #4
 8009522:	9201      	str	r2, [sp, #4]
 8009524:	9a02      	ldr	r2, [sp, #8]
 8009526:	9303      	str	r3, [sp, #12]
 8009528:	429a      	cmp	r2, r3
 800952a:	d80c      	bhi.n	8009546 <__multiply+0x9e>
 800952c:	2e00      	cmp	r6, #0
 800952e:	dd03      	ble.n	8009538 <__multiply+0x90>
 8009530:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009534:	2b00      	cmp	r3, #0
 8009536:	d05a      	beq.n	80095ee <__multiply+0x146>
 8009538:	6106      	str	r6, [r0, #16]
 800953a:	b005      	add	sp, #20
 800953c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009540:	f843 2b04 	str.w	r2, [r3], #4
 8009544:	e7d8      	b.n	80094f8 <__multiply+0x50>
 8009546:	f8b3 a000 	ldrh.w	sl, [r3]
 800954a:	f1ba 0f00 	cmp.w	sl, #0
 800954e:	d024      	beq.n	800959a <__multiply+0xf2>
 8009550:	f104 0e14 	add.w	lr, r4, #20
 8009554:	46a9      	mov	r9, r5
 8009556:	f04f 0c00 	mov.w	ip, #0
 800955a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800955e:	f8d9 1000 	ldr.w	r1, [r9]
 8009562:	fa1f fb82 	uxth.w	fp, r2
 8009566:	b289      	uxth	r1, r1
 8009568:	fb0a 110b 	mla	r1, sl, fp, r1
 800956c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009570:	f8d9 2000 	ldr.w	r2, [r9]
 8009574:	4461      	add	r1, ip
 8009576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800957a:	fb0a c20b 	mla	r2, sl, fp, ip
 800957e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009582:	b289      	uxth	r1, r1
 8009584:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009588:	4577      	cmp	r7, lr
 800958a:	f849 1b04 	str.w	r1, [r9], #4
 800958e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009592:	d8e2      	bhi.n	800955a <__multiply+0xb2>
 8009594:	9a01      	ldr	r2, [sp, #4]
 8009596:	f845 c002 	str.w	ip, [r5, r2]
 800959a:	9a03      	ldr	r2, [sp, #12]
 800959c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095a0:	3304      	adds	r3, #4
 80095a2:	f1b9 0f00 	cmp.w	r9, #0
 80095a6:	d020      	beq.n	80095ea <__multiply+0x142>
 80095a8:	6829      	ldr	r1, [r5, #0]
 80095aa:	f104 0c14 	add.w	ip, r4, #20
 80095ae:	46ae      	mov	lr, r5
 80095b0:	f04f 0a00 	mov.w	sl, #0
 80095b4:	f8bc b000 	ldrh.w	fp, [ip]
 80095b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80095bc:	fb09 220b 	mla	r2, r9, fp, r2
 80095c0:	4492      	add	sl, r2
 80095c2:	b289      	uxth	r1, r1
 80095c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80095c8:	f84e 1b04 	str.w	r1, [lr], #4
 80095cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80095d0:	f8be 1000 	ldrh.w	r1, [lr]
 80095d4:	0c12      	lsrs	r2, r2, #16
 80095d6:	fb09 1102 	mla	r1, r9, r2, r1
 80095da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80095de:	4567      	cmp	r7, ip
 80095e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80095e4:	d8e6      	bhi.n	80095b4 <__multiply+0x10c>
 80095e6:	9a01      	ldr	r2, [sp, #4]
 80095e8:	50a9      	str	r1, [r5, r2]
 80095ea:	3504      	adds	r5, #4
 80095ec:	e79a      	b.n	8009524 <__multiply+0x7c>
 80095ee:	3e01      	subs	r6, #1
 80095f0:	e79c      	b.n	800952c <__multiply+0x84>
 80095f2:	bf00      	nop
 80095f4:	0800b6a3 	.word	0x0800b6a3
 80095f8:	0800b6b4 	.word	0x0800b6b4

080095fc <__pow5mult>:
 80095fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009600:	4615      	mov	r5, r2
 8009602:	f012 0203 	ands.w	r2, r2, #3
 8009606:	4606      	mov	r6, r0
 8009608:	460f      	mov	r7, r1
 800960a:	d007      	beq.n	800961c <__pow5mult+0x20>
 800960c:	4c25      	ldr	r4, [pc, #148]	; (80096a4 <__pow5mult+0xa8>)
 800960e:	3a01      	subs	r2, #1
 8009610:	2300      	movs	r3, #0
 8009612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009616:	f7ff fe9b 	bl	8009350 <__multadd>
 800961a:	4607      	mov	r7, r0
 800961c:	10ad      	asrs	r5, r5, #2
 800961e:	d03d      	beq.n	800969c <__pow5mult+0xa0>
 8009620:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009622:	b97c      	cbnz	r4, 8009644 <__pow5mult+0x48>
 8009624:	2010      	movs	r0, #16
 8009626:	f7ff fe29 	bl	800927c <malloc>
 800962a:	4602      	mov	r2, r0
 800962c:	6270      	str	r0, [r6, #36]	; 0x24
 800962e:	b928      	cbnz	r0, 800963c <__pow5mult+0x40>
 8009630:	4b1d      	ldr	r3, [pc, #116]	; (80096a8 <__pow5mult+0xac>)
 8009632:	481e      	ldr	r0, [pc, #120]	; (80096ac <__pow5mult+0xb0>)
 8009634:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009638:	f000 fc0e 	bl	8009e58 <__assert_func>
 800963c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009640:	6004      	str	r4, [r0, #0]
 8009642:	60c4      	str	r4, [r0, #12]
 8009644:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800964c:	b94c      	cbnz	r4, 8009662 <__pow5mult+0x66>
 800964e:	f240 2171 	movw	r1, #625	; 0x271
 8009652:	4630      	mov	r0, r6
 8009654:	f7ff ff12 	bl	800947c <__i2b>
 8009658:	2300      	movs	r3, #0
 800965a:	f8c8 0008 	str.w	r0, [r8, #8]
 800965e:	4604      	mov	r4, r0
 8009660:	6003      	str	r3, [r0, #0]
 8009662:	f04f 0900 	mov.w	r9, #0
 8009666:	07eb      	lsls	r3, r5, #31
 8009668:	d50a      	bpl.n	8009680 <__pow5mult+0x84>
 800966a:	4639      	mov	r1, r7
 800966c:	4622      	mov	r2, r4
 800966e:	4630      	mov	r0, r6
 8009670:	f7ff ff1a 	bl	80094a8 <__multiply>
 8009674:	4639      	mov	r1, r7
 8009676:	4680      	mov	r8, r0
 8009678:	4630      	mov	r0, r6
 800967a:	f7ff fe47 	bl	800930c <_Bfree>
 800967e:	4647      	mov	r7, r8
 8009680:	106d      	asrs	r5, r5, #1
 8009682:	d00b      	beq.n	800969c <__pow5mult+0xa0>
 8009684:	6820      	ldr	r0, [r4, #0]
 8009686:	b938      	cbnz	r0, 8009698 <__pow5mult+0x9c>
 8009688:	4622      	mov	r2, r4
 800968a:	4621      	mov	r1, r4
 800968c:	4630      	mov	r0, r6
 800968e:	f7ff ff0b 	bl	80094a8 <__multiply>
 8009692:	6020      	str	r0, [r4, #0]
 8009694:	f8c0 9000 	str.w	r9, [r0]
 8009698:	4604      	mov	r4, r0
 800969a:	e7e4      	b.n	8009666 <__pow5mult+0x6a>
 800969c:	4638      	mov	r0, r7
 800969e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096a2:	bf00      	nop
 80096a4:	0800b800 	.word	0x0800b800
 80096a8:	0800b631 	.word	0x0800b631
 80096ac:	0800b6b4 	.word	0x0800b6b4

080096b0 <__lshift>:
 80096b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b4:	460c      	mov	r4, r1
 80096b6:	6849      	ldr	r1, [r1, #4]
 80096b8:	6923      	ldr	r3, [r4, #16]
 80096ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096be:	68a3      	ldr	r3, [r4, #8]
 80096c0:	4607      	mov	r7, r0
 80096c2:	4691      	mov	r9, r2
 80096c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096c8:	f108 0601 	add.w	r6, r8, #1
 80096cc:	42b3      	cmp	r3, r6
 80096ce:	db0b      	blt.n	80096e8 <__lshift+0x38>
 80096d0:	4638      	mov	r0, r7
 80096d2:	f7ff fddb 	bl	800928c <_Balloc>
 80096d6:	4605      	mov	r5, r0
 80096d8:	b948      	cbnz	r0, 80096ee <__lshift+0x3e>
 80096da:	4602      	mov	r2, r0
 80096dc:	4b2a      	ldr	r3, [pc, #168]	; (8009788 <__lshift+0xd8>)
 80096de:	482b      	ldr	r0, [pc, #172]	; (800978c <__lshift+0xdc>)
 80096e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80096e4:	f000 fbb8 	bl	8009e58 <__assert_func>
 80096e8:	3101      	adds	r1, #1
 80096ea:	005b      	lsls	r3, r3, #1
 80096ec:	e7ee      	b.n	80096cc <__lshift+0x1c>
 80096ee:	2300      	movs	r3, #0
 80096f0:	f100 0114 	add.w	r1, r0, #20
 80096f4:	f100 0210 	add.w	r2, r0, #16
 80096f8:	4618      	mov	r0, r3
 80096fa:	4553      	cmp	r3, sl
 80096fc:	db37      	blt.n	800976e <__lshift+0xbe>
 80096fe:	6920      	ldr	r0, [r4, #16]
 8009700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009704:	f104 0314 	add.w	r3, r4, #20
 8009708:	f019 091f 	ands.w	r9, r9, #31
 800970c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009710:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009714:	d02f      	beq.n	8009776 <__lshift+0xc6>
 8009716:	f1c9 0e20 	rsb	lr, r9, #32
 800971a:	468a      	mov	sl, r1
 800971c:	f04f 0c00 	mov.w	ip, #0
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	fa02 f209 	lsl.w	r2, r2, r9
 8009726:	ea42 020c 	orr.w	r2, r2, ip
 800972a:	f84a 2b04 	str.w	r2, [sl], #4
 800972e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009732:	4298      	cmp	r0, r3
 8009734:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009738:	d8f2      	bhi.n	8009720 <__lshift+0x70>
 800973a:	1b03      	subs	r3, r0, r4
 800973c:	3b15      	subs	r3, #21
 800973e:	f023 0303 	bic.w	r3, r3, #3
 8009742:	3304      	adds	r3, #4
 8009744:	f104 0215 	add.w	r2, r4, #21
 8009748:	4290      	cmp	r0, r2
 800974a:	bf38      	it	cc
 800974c:	2304      	movcc	r3, #4
 800974e:	f841 c003 	str.w	ip, [r1, r3]
 8009752:	f1bc 0f00 	cmp.w	ip, #0
 8009756:	d001      	beq.n	800975c <__lshift+0xac>
 8009758:	f108 0602 	add.w	r6, r8, #2
 800975c:	3e01      	subs	r6, #1
 800975e:	4638      	mov	r0, r7
 8009760:	612e      	str	r6, [r5, #16]
 8009762:	4621      	mov	r1, r4
 8009764:	f7ff fdd2 	bl	800930c <_Bfree>
 8009768:	4628      	mov	r0, r5
 800976a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800976e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009772:	3301      	adds	r3, #1
 8009774:	e7c1      	b.n	80096fa <__lshift+0x4a>
 8009776:	3904      	subs	r1, #4
 8009778:	f853 2b04 	ldr.w	r2, [r3], #4
 800977c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009780:	4298      	cmp	r0, r3
 8009782:	d8f9      	bhi.n	8009778 <__lshift+0xc8>
 8009784:	e7ea      	b.n	800975c <__lshift+0xac>
 8009786:	bf00      	nop
 8009788:	0800b6a3 	.word	0x0800b6a3
 800978c:	0800b6b4 	.word	0x0800b6b4

08009790 <__mcmp>:
 8009790:	b530      	push	{r4, r5, lr}
 8009792:	6902      	ldr	r2, [r0, #16]
 8009794:	690c      	ldr	r4, [r1, #16]
 8009796:	1b12      	subs	r2, r2, r4
 8009798:	d10e      	bne.n	80097b8 <__mcmp+0x28>
 800979a:	f100 0314 	add.w	r3, r0, #20
 800979e:	3114      	adds	r1, #20
 80097a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097b0:	42a5      	cmp	r5, r4
 80097b2:	d003      	beq.n	80097bc <__mcmp+0x2c>
 80097b4:	d305      	bcc.n	80097c2 <__mcmp+0x32>
 80097b6:	2201      	movs	r2, #1
 80097b8:	4610      	mov	r0, r2
 80097ba:	bd30      	pop	{r4, r5, pc}
 80097bc:	4283      	cmp	r3, r0
 80097be:	d3f3      	bcc.n	80097a8 <__mcmp+0x18>
 80097c0:	e7fa      	b.n	80097b8 <__mcmp+0x28>
 80097c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097c6:	e7f7      	b.n	80097b8 <__mcmp+0x28>

080097c8 <__mdiff>:
 80097c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	460c      	mov	r4, r1
 80097ce:	4606      	mov	r6, r0
 80097d0:	4611      	mov	r1, r2
 80097d2:	4620      	mov	r0, r4
 80097d4:	4690      	mov	r8, r2
 80097d6:	f7ff ffdb 	bl	8009790 <__mcmp>
 80097da:	1e05      	subs	r5, r0, #0
 80097dc:	d110      	bne.n	8009800 <__mdiff+0x38>
 80097de:	4629      	mov	r1, r5
 80097e0:	4630      	mov	r0, r6
 80097e2:	f7ff fd53 	bl	800928c <_Balloc>
 80097e6:	b930      	cbnz	r0, 80097f6 <__mdiff+0x2e>
 80097e8:	4b3a      	ldr	r3, [pc, #232]	; (80098d4 <__mdiff+0x10c>)
 80097ea:	4602      	mov	r2, r0
 80097ec:	f240 2132 	movw	r1, #562	; 0x232
 80097f0:	4839      	ldr	r0, [pc, #228]	; (80098d8 <__mdiff+0x110>)
 80097f2:	f000 fb31 	bl	8009e58 <__assert_func>
 80097f6:	2301      	movs	r3, #1
 80097f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009800:	bfa4      	itt	ge
 8009802:	4643      	movge	r3, r8
 8009804:	46a0      	movge	r8, r4
 8009806:	4630      	mov	r0, r6
 8009808:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800980c:	bfa6      	itte	ge
 800980e:	461c      	movge	r4, r3
 8009810:	2500      	movge	r5, #0
 8009812:	2501      	movlt	r5, #1
 8009814:	f7ff fd3a 	bl	800928c <_Balloc>
 8009818:	b920      	cbnz	r0, 8009824 <__mdiff+0x5c>
 800981a:	4b2e      	ldr	r3, [pc, #184]	; (80098d4 <__mdiff+0x10c>)
 800981c:	4602      	mov	r2, r0
 800981e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009822:	e7e5      	b.n	80097f0 <__mdiff+0x28>
 8009824:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009828:	6926      	ldr	r6, [r4, #16]
 800982a:	60c5      	str	r5, [r0, #12]
 800982c:	f104 0914 	add.w	r9, r4, #20
 8009830:	f108 0514 	add.w	r5, r8, #20
 8009834:	f100 0e14 	add.w	lr, r0, #20
 8009838:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800983c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009840:	f108 0210 	add.w	r2, r8, #16
 8009844:	46f2      	mov	sl, lr
 8009846:	2100      	movs	r1, #0
 8009848:	f859 3b04 	ldr.w	r3, [r9], #4
 800984c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009850:	fa1f f883 	uxth.w	r8, r3
 8009854:	fa11 f18b 	uxtah	r1, r1, fp
 8009858:	0c1b      	lsrs	r3, r3, #16
 800985a:	eba1 0808 	sub.w	r8, r1, r8
 800985e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009862:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009866:	fa1f f888 	uxth.w	r8, r8
 800986a:	1419      	asrs	r1, r3, #16
 800986c:	454e      	cmp	r6, r9
 800986e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009872:	f84a 3b04 	str.w	r3, [sl], #4
 8009876:	d8e7      	bhi.n	8009848 <__mdiff+0x80>
 8009878:	1b33      	subs	r3, r6, r4
 800987a:	3b15      	subs	r3, #21
 800987c:	f023 0303 	bic.w	r3, r3, #3
 8009880:	3304      	adds	r3, #4
 8009882:	3415      	adds	r4, #21
 8009884:	42a6      	cmp	r6, r4
 8009886:	bf38      	it	cc
 8009888:	2304      	movcc	r3, #4
 800988a:	441d      	add	r5, r3
 800988c:	4473      	add	r3, lr
 800988e:	469e      	mov	lr, r3
 8009890:	462e      	mov	r6, r5
 8009892:	4566      	cmp	r6, ip
 8009894:	d30e      	bcc.n	80098b4 <__mdiff+0xec>
 8009896:	f10c 0203 	add.w	r2, ip, #3
 800989a:	1b52      	subs	r2, r2, r5
 800989c:	f022 0203 	bic.w	r2, r2, #3
 80098a0:	3d03      	subs	r5, #3
 80098a2:	45ac      	cmp	ip, r5
 80098a4:	bf38      	it	cc
 80098a6:	2200      	movcc	r2, #0
 80098a8:	441a      	add	r2, r3
 80098aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80098ae:	b17b      	cbz	r3, 80098d0 <__mdiff+0x108>
 80098b0:	6107      	str	r7, [r0, #16]
 80098b2:	e7a3      	b.n	80097fc <__mdiff+0x34>
 80098b4:	f856 8b04 	ldr.w	r8, [r6], #4
 80098b8:	fa11 f288 	uxtah	r2, r1, r8
 80098bc:	1414      	asrs	r4, r2, #16
 80098be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80098c2:	b292      	uxth	r2, r2
 80098c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80098c8:	f84e 2b04 	str.w	r2, [lr], #4
 80098cc:	1421      	asrs	r1, r4, #16
 80098ce:	e7e0      	b.n	8009892 <__mdiff+0xca>
 80098d0:	3f01      	subs	r7, #1
 80098d2:	e7ea      	b.n	80098aa <__mdiff+0xe2>
 80098d4:	0800b6a3 	.word	0x0800b6a3
 80098d8:	0800b6b4 	.word	0x0800b6b4

080098dc <__d2b>:
 80098dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098e0:	4689      	mov	r9, r1
 80098e2:	2101      	movs	r1, #1
 80098e4:	ec57 6b10 	vmov	r6, r7, d0
 80098e8:	4690      	mov	r8, r2
 80098ea:	f7ff fccf 	bl	800928c <_Balloc>
 80098ee:	4604      	mov	r4, r0
 80098f0:	b930      	cbnz	r0, 8009900 <__d2b+0x24>
 80098f2:	4602      	mov	r2, r0
 80098f4:	4b25      	ldr	r3, [pc, #148]	; (800998c <__d2b+0xb0>)
 80098f6:	4826      	ldr	r0, [pc, #152]	; (8009990 <__d2b+0xb4>)
 80098f8:	f240 310a 	movw	r1, #778	; 0x30a
 80098fc:	f000 faac 	bl	8009e58 <__assert_func>
 8009900:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009904:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009908:	bb35      	cbnz	r5, 8009958 <__d2b+0x7c>
 800990a:	2e00      	cmp	r6, #0
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	d028      	beq.n	8009962 <__d2b+0x86>
 8009910:	4668      	mov	r0, sp
 8009912:	9600      	str	r6, [sp, #0]
 8009914:	f7ff fd82 	bl	800941c <__lo0bits>
 8009918:	9900      	ldr	r1, [sp, #0]
 800991a:	b300      	cbz	r0, 800995e <__d2b+0x82>
 800991c:	9a01      	ldr	r2, [sp, #4]
 800991e:	f1c0 0320 	rsb	r3, r0, #32
 8009922:	fa02 f303 	lsl.w	r3, r2, r3
 8009926:	430b      	orrs	r3, r1
 8009928:	40c2      	lsrs	r2, r0
 800992a:	6163      	str	r3, [r4, #20]
 800992c:	9201      	str	r2, [sp, #4]
 800992e:	9b01      	ldr	r3, [sp, #4]
 8009930:	61a3      	str	r3, [r4, #24]
 8009932:	2b00      	cmp	r3, #0
 8009934:	bf14      	ite	ne
 8009936:	2202      	movne	r2, #2
 8009938:	2201      	moveq	r2, #1
 800993a:	6122      	str	r2, [r4, #16]
 800993c:	b1d5      	cbz	r5, 8009974 <__d2b+0x98>
 800993e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009942:	4405      	add	r5, r0
 8009944:	f8c9 5000 	str.w	r5, [r9]
 8009948:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800994c:	f8c8 0000 	str.w	r0, [r8]
 8009950:	4620      	mov	r0, r4
 8009952:	b003      	add	sp, #12
 8009954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800995c:	e7d5      	b.n	800990a <__d2b+0x2e>
 800995e:	6161      	str	r1, [r4, #20]
 8009960:	e7e5      	b.n	800992e <__d2b+0x52>
 8009962:	a801      	add	r0, sp, #4
 8009964:	f7ff fd5a 	bl	800941c <__lo0bits>
 8009968:	9b01      	ldr	r3, [sp, #4]
 800996a:	6163      	str	r3, [r4, #20]
 800996c:	2201      	movs	r2, #1
 800996e:	6122      	str	r2, [r4, #16]
 8009970:	3020      	adds	r0, #32
 8009972:	e7e3      	b.n	800993c <__d2b+0x60>
 8009974:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009978:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800997c:	f8c9 0000 	str.w	r0, [r9]
 8009980:	6918      	ldr	r0, [r3, #16]
 8009982:	f7ff fd2b 	bl	80093dc <__hi0bits>
 8009986:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800998a:	e7df      	b.n	800994c <__d2b+0x70>
 800998c:	0800b6a3 	.word	0x0800b6a3
 8009990:	0800b6b4 	.word	0x0800b6b4

08009994 <_calloc_r>:
 8009994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009996:	fba1 2402 	umull	r2, r4, r1, r2
 800999a:	b94c      	cbnz	r4, 80099b0 <_calloc_r+0x1c>
 800999c:	4611      	mov	r1, r2
 800999e:	9201      	str	r2, [sp, #4]
 80099a0:	f000 f87a 	bl	8009a98 <_malloc_r>
 80099a4:	9a01      	ldr	r2, [sp, #4]
 80099a6:	4605      	mov	r5, r0
 80099a8:	b930      	cbnz	r0, 80099b8 <_calloc_r+0x24>
 80099aa:	4628      	mov	r0, r5
 80099ac:	b003      	add	sp, #12
 80099ae:	bd30      	pop	{r4, r5, pc}
 80099b0:	220c      	movs	r2, #12
 80099b2:	6002      	str	r2, [r0, #0]
 80099b4:	2500      	movs	r5, #0
 80099b6:	e7f8      	b.n	80099aa <_calloc_r+0x16>
 80099b8:	4621      	mov	r1, r4
 80099ba:	f7fe f94f 	bl	8007c5c <memset>
 80099be:	e7f4      	b.n	80099aa <_calloc_r+0x16>

080099c0 <_free_r>:
 80099c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099c2:	2900      	cmp	r1, #0
 80099c4:	d044      	beq.n	8009a50 <_free_r+0x90>
 80099c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099ca:	9001      	str	r0, [sp, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f1a1 0404 	sub.w	r4, r1, #4
 80099d2:	bfb8      	it	lt
 80099d4:	18e4      	addlt	r4, r4, r3
 80099d6:	f000 fa9b 	bl	8009f10 <__malloc_lock>
 80099da:	4a1e      	ldr	r2, [pc, #120]	; (8009a54 <_free_r+0x94>)
 80099dc:	9801      	ldr	r0, [sp, #4]
 80099de:	6813      	ldr	r3, [r2, #0]
 80099e0:	b933      	cbnz	r3, 80099f0 <_free_r+0x30>
 80099e2:	6063      	str	r3, [r4, #4]
 80099e4:	6014      	str	r4, [r2, #0]
 80099e6:	b003      	add	sp, #12
 80099e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099ec:	f000 ba96 	b.w	8009f1c <__malloc_unlock>
 80099f0:	42a3      	cmp	r3, r4
 80099f2:	d908      	bls.n	8009a06 <_free_r+0x46>
 80099f4:	6825      	ldr	r5, [r4, #0]
 80099f6:	1961      	adds	r1, r4, r5
 80099f8:	428b      	cmp	r3, r1
 80099fa:	bf01      	itttt	eq
 80099fc:	6819      	ldreq	r1, [r3, #0]
 80099fe:	685b      	ldreq	r3, [r3, #4]
 8009a00:	1949      	addeq	r1, r1, r5
 8009a02:	6021      	streq	r1, [r4, #0]
 8009a04:	e7ed      	b.n	80099e2 <_free_r+0x22>
 8009a06:	461a      	mov	r2, r3
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	b10b      	cbz	r3, 8009a10 <_free_r+0x50>
 8009a0c:	42a3      	cmp	r3, r4
 8009a0e:	d9fa      	bls.n	8009a06 <_free_r+0x46>
 8009a10:	6811      	ldr	r1, [r2, #0]
 8009a12:	1855      	adds	r5, r2, r1
 8009a14:	42a5      	cmp	r5, r4
 8009a16:	d10b      	bne.n	8009a30 <_free_r+0x70>
 8009a18:	6824      	ldr	r4, [r4, #0]
 8009a1a:	4421      	add	r1, r4
 8009a1c:	1854      	adds	r4, r2, r1
 8009a1e:	42a3      	cmp	r3, r4
 8009a20:	6011      	str	r1, [r2, #0]
 8009a22:	d1e0      	bne.n	80099e6 <_free_r+0x26>
 8009a24:	681c      	ldr	r4, [r3, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	6053      	str	r3, [r2, #4]
 8009a2a:	4421      	add	r1, r4
 8009a2c:	6011      	str	r1, [r2, #0]
 8009a2e:	e7da      	b.n	80099e6 <_free_r+0x26>
 8009a30:	d902      	bls.n	8009a38 <_free_r+0x78>
 8009a32:	230c      	movs	r3, #12
 8009a34:	6003      	str	r3, [r0, #0]
 8009a36:	e7d6      	b.n	80099e6 <_free_r+0x26>
 8009a38:	6825      	ldr	r5, [r4, #0]
 8009a3a:	1961      	adds	r1, r4, r5
 8009a3c:	428b      	cmp	r3, r1
 8009a3e:	bf04      	itt	eq
 8009a40:	6819      	ldreq	r1, [r3, #0]
 8009a42:	685b      	ldreq	r3, [r3, #4]
 8009a44:	6063      	str	r3, [r4, #4]
 8009a46:	bf04      	itt	eq
 8009a48:	1949      	addeq	r1, r1, r5
 8009a4a:	6021      	streq	r1, [r4, #0]
 8009a4c:	6054      	str	r4, [r2, #4]
 8009a4e:	e7ca      	b.n	80099e6 <_free_r+0x26>
 8009a50:	b003      	add	sp, #12
 8009a52:	bd30      	pop	{r4, r5, pc}
 8009a54:	2000082c 	.word	0x2000082c

08009a58 <sbrk_aligned>:
 8009a58:	b570      	push	{r4, r5, r6, lr}
 8009a5a:	4e0e      	ldr	r6, [pc, #56]	; (8009a94 <sbrk_aligned+0x3c>)
 8009a5c:	460c      	mov	r4, r1
 8009a5e:	6831      	ldr	r1, [r6, #0]
 8009a60:	4605      	mov	r5, r0
 8009a62:	b911      	cbnz	r1, 8009a6a <sbrk_aligned+0x12>
 8009a64:	f000 f9e8 	bl	8009e38 <_sbrk_r>
 8009a68:	6030      	str	r0, [r6, #0]
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	f000 f9e3 	bl	8009e38 <_sbrk_r>
 8009a72:	1c43      	adds	r3, r0, #1
 8009a74:	d00a      	beq.n	8009a8c <sbrk_aligned+0x34>
 8009a76:	1cc4      	adds	r4, r0, #3
 8009a78:	f024 0403 	bic.w	r4, r4, #3
 8009a7c:	42a0      	cmp	r0, r4
 8009a7e:	d007      	beq.n	8009a90 <sbrk_aligned+0x38>
 8009a80:	1a21      	subs	r1, r4, r0
 8009a82:	4628      	mov	r0, r5
 8009a84:	f000 f9d8 	bl	8009e38 <_sbrk_r>
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d101      	bne.n	8009a90 <sbrk_aligned+0x38>
 8009a8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009a90:	4620      	mov	r0, r4
 8009a92:	bd70      	pop	{r4, r5, r6, pc}
 8009a94:	20000830 	.word	0x20000830

08009a98 <_malloc_r>:
 8009a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9c:	1ccd      	adds	r5, r1, #3
 8009a9e:	f025 0503 	bic.w	r5, r5, #3
 8009aa2:	3508      	adds	r5, #8
 8009aa4:	2d0c      	cmp	r5, #12
 8009aa6:	bf38      	it	cc
 8009aa8:	250c      	movcc	r5, #12
 8009aaa:	2d00      	cmp	r5, #0
 8009aac:	4607      	mov	r7, r0
 8009aae:	db01      	blt.n	8009ab4 <_malloc_r+0x1c>
 8009ab0:	42a9      	cmp	r1, r5
 8009ab2:	d905      	bls.n	8009ac0 <_malloc_r+0x28>
 8009ab4:	230c      	movs	r3, #12
 8009ab6:	603b      	str	r3, [r7, #0]
 8009ab8:	2600      	movs	r6, #0
 8009aba:	4630      	mov	r0, r6
 8009abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac0:	4e2e      	ldr	r6, [pc, #184]	; (8009b7c <_malloc_r+0xe4>)
 8009ac2:	f000 fa25 	bl	8009f10 <__malloc_lock>
 8009ac6:	6833      	ldr	r3, [r6, #0]
 8009ac8:	461c      	mov	r4, r3
 8009aca:	bb34      	cbnz	r4, 8009b1a <_malloc_r+0x82>
 8009acc:	4629      	mov	r1, r5
 8009ace:	4638      	mov	r0, r7
 8009ad0:	f7ff ffc2 	bl	8009a58 <sbrk_aligned>
 8009ad4:	1c43      	adds	r3, r0, #1
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	d14d      	bne.n	8009b76 <_malloc_r+0xde>
 8009ada:	6834      	ldr	r4, [r6, #0]
 8009adc:	4626      	mov	r6, r4
 8009ade:	2e00      	cmp	r6, #0
 8009ae0:	d140      	bne.n	8009b64 <_malloc_r+0xcc>
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	4631      	mov	r1, r6
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	eb04 0803 	add.w	r8, r4, r3
 8009aec:	f000 f9a4 	bl	8009e38 <_sbrk_r>
 8009af0:	4580      	cmp	r8, r0
 8009af2:	d13a      	bne.n	8009b6a <_malloc_r+0xd2>
 8009af4:	6821      	ldr	r1, [r4, #0]
 8009af6:	3503      	adds	r5, #3
 8009af8:	1a6d      	subs	r5, r5, r1
 8009afa:	f025 0503 	bic.w	r5, r5, #3
 8009afe:	3508      	adds	r5, #8
 8009b00:	2d0c      	cmp	r5, #12
 8009b02:	bf38      	it	cc
 8009b04:	250c      	movcc	r5, #12
 8009b06:	4629      	mov	r1, r5
 8009b08:	4638      	mov	r0, r7
 8009b0a:	f7ff ffa5 	bl	8009a58 <sbrk_aligned>
 8009b0e:	3001      	adds	r0, #1
 8009b10:	d02b      	beq.n	8009b6a <_malloc_r+0xd2>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	442b      	add	r3, r5
 8009b16:	6023      	str	r3, [r4, #0]
 8009b18:	e00e      	b.n	8009b38 <_malloc_r+0xa0>
 8009b1a:	6822      	ldr	r2, [r4, #0]
 8009b1c:	1b52      	subs	r2, r2, r5
 8009b1e:	d41e      	bmi.n	8009b5e <_malloc_r+0xc6>
 8009b20:	2a0b      	cmp	r2, #11
 8009b22:	d916      	bls.n	8009b52 <_malloc_r+0xba>
 8009b24:	1961      	adds	r1, r4, r5
 8009b26:	42a3      	cmp	r3, r4
 8009b28:	6025      	str	r5, [r4, #0]
 8009b2a:	bf18      	it	ne
 8009b2c:	6059      	strne	r1, [r3, #4]
 8009b2e:	6863      	ldr	r3, [r4, #4]
 8009b30:	bf08      	it	eq
 8009b32:	6031      	streq	r1, [r6, #0]
 8009b34:	5162      	str	r2, [r4, r5]
 8009b36:	604b      	str	r3, [r1, #4]
 8009b38:	4638      	mov	r0, r7
 8009b3a:	f104 060b 	add.w	r6, r4, #11
 8009b3e:	f000 f9ed 	bl	8009f1c <__malloc_unlock>
 8009b42:	f026 0607 	bic.w	r6, r6, #7
 8009b46:	1d23      	adds	r3, r4, #4
 8009b48:	1af2      	subs	r2, r6, r3
 8009b4a:	d0b6      	beq.n	8009aba <_malloc_r+0x22>
 8009b4c:	1b9b      	subs	r3, r3, r6
 8009b4e:	50a3      	str	r3, [r4, r2]
 8009b50:	e7b3      	b.n	8009aba <_malloc_r+0x22>
 8009b52:	6862      	ldr	r2, [r4, #4]
 8009b54:	42a3      	cmp	r3, r4
 8009b56:	bf0c      	ite	eq
 8009b58:	6032      	streq	r2, [r6, #0]
 8009b5a:	605a      	strne	r2, [r3, #4]
 8009b5c:	e7ec      	b.n	8009b38 <_malloc_r+0xa0>
 8009b5e:	4623      	mov	r3, r4
 8009b60:	6864      	ldr	r4, [r4, #4]
 8009b62:	e7b2      	b.n	8009aca <_malloc_r+0x32>
 8009b64:	4634      	mov	r4, r6
 8009b66:	6876      	ldr	r6, [r6, #4]
 8009b68:	e7b9      	b.n	8009ade <_malloc_r+0x46>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	603b      	str	r3, [r7, #0]
 8009b6e:	4638      	mov	r0, r7
 8009b70:	f000 f9d4 	bl	8009f1c <__malloc_unlock>
 8009b74:	e7a1      	b.n	8009aba <_malloc_r+0x22>
 8009b76:	6025      	str	r5, [r4, #0]
 8009b78:	e7de      	b.n	8009b38 <_malloc_r+0xa0>
 8009b7a:	bf00      	nop
 8009b7c:	2000082c 	.word	0x2000082c

08009b80 <__ssputs_r>:
 8009b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b84:	688e      	ldr	r6, [r1, #8]
 8009b86:	429e      	cmp	r6, r3
 8009b88:	4682      	mov	sl, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	4690      	mov	r8, r2
 8009b8e:	461f      	mov	r7, r3
 8009b90:	d838      	bhi.n	8009c04 <__ssputs_r+0x84>
 8009b92:	898a      	ldrh	r2, [r1, #12]
 8009b94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b98:	d032      	beq.n	8009c00 <__ssputs_r+0x80>
 8009b9a:	6825      	ldr	r5, [r4, #0]
 8009b9c:	6909      	ldr	r1, [r1, #16]
 8009b9e:	eba5 0901 	sub.w	r9, r5, r1
 8009ba2:	6965      	ldr	r5, [r4, #20]
 8009ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ba8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bac:	3301      	adds	r3, #1
 8009bae:	444b      	add	r3, r9
 8009bb0:	106d      	asrs	r5, r5, #1
 8009bb2:	429d      	cmp	r5, r3
 8009bb4:	bf38      	it	cc
 8009bb6:	461d      	movcc	r5, r3
 8009bb8:	0553      	lsls	r3, r2, #21
 8009bba:	d531      	bpl.n	8009c20 <__ssputs_r+0xa0>
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	f7ff ff6b 	bl	8009a98 <_malloc_r>
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	b950      	cbnz	r0, 8009bdc <__ssputs_r+0x5c>
 8009bc6:	230c      	movs	r3, #12
 8009bc8:	f8ca 3000 	str.w	r3, [sl]
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bd2:	81a3      	strh	r3, [r4, #12]
 8009bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bdc:	6921      	ldr	r1, [r4, #16]
 8009bde:	464a      	mov	r2, r9
 8009be0:	f7fe f82e 	bl	8007c40 <memcpy>
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bee:	81a3      	strh	r3, [r4, #12]
 8009bf0:	6126      	str	r6, [r4, #16]
 8009bf2:	6165      	str	r5, [r4, #20]
 8009bf4:	444e      	add	r6, r9
 8009bf6:	eba5 0509 	sub.w	r5, r5, r9
 8009bfa:	6026      	str	r6, [r4, #0]
 8009bfc:	60a5      	str	r5, [r4, #8]
 8009bfe:	463e      	mov	r6, r7
 8009c00:	42be      	cmp	r6, r7
 8009c02:	d900      	bls.n	8009c06 <__ssputs_r+0x86>
 8009c04:	463e      	mov	r6, r7
 8009c06:	6820      	ldr	r0, [r4, #0]
 8009c08:	4632      	mov	r2, r6
 8009c0a:	4641      	mov	r1, r8
 8009c0c:	f000 f966 	bl	8009edc <memmove>
 8009c10:	68a3      	ldr	r3, [r4, #8]
 8009c12:	1b9b      	subs	r3, r3, r6
 8009c14:	60a3      	str	r3, [r4, #8]
 8009c16:	6823      	ldr	r3, [r4, #0]
 8009c18:	4433      	add	r3, r6
 8009c1a:	6023      	str	r3, [r4, #0]
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e7db      	b.n	8009bd8 <__ssputs_r+0x58>
 8009c20:	462a      	mov	r2, r5
 8009c22:	f000 f981 	bl	8009f28 <_realloc_r>
 8009c26:	4606      	mov	r6, r0
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d1e1      	bne.n	8009bf0 <__ssputs_r+0x70>
 8009c2c:	6921      	ldr	r1, [r4, #16]
 8009c2e:	4650      	mov	r0, sl
 8009c30:	f7ff fec6 	bl	80099c0 <_free_r>
 8009c34:	e7c7      	b.n	8009bc6 <__ssputs_r+0x46>
	...

08009c38 <_svfiprintf_r>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	4698      	mov	r8, r3
 8009c3e:	898b      	ldrh	r3, [r1, #12]
 8009c40:	061b      	lsls	r3, r3, #24
 8009c42:	b09d      	sub	sp, #116	; 0x74
 8009c44:	4607      	mov	r7, r0
 8009c46:	460d      	mov	r5, r1
 8009c48:	4614      	mov	r4, r2
 8009c4a:	d50e      	bpl.n	8009c6a <_svfiprintf_r+0x32>
 8009c4c:	690b      	ldr	r3, [r1, #16]
 8009c4e:	b963      	cbnz	r3, 8009c6a <_svfiprintf_r+0x32>
 8009c50:	2140      	movs	r1, #64	; 0x40
 8009c52:	f7ff ff21 	bl	8009a98 <_malloc_r>
 8009c56:	6028      	str	r0, [r5, #0]
 8009c58:	6128      	str	r0, [r5, #16]
 8009c5a:	b920      	cbnz	r0, 8009c66 <_svfiprintf_r+0x2e>
 8009c5c:	230c      	movs	r3, #12
 8009c5e:	603b      	str	r3, [r7, #0]
 8009c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c64:	e0d1      	b.n	8009e0a <_svfiprintf_r+0x1d2>
 8009c66:	2340      	movs	r3, #64	; 0x40
 8009c68:	616b      	str	r3, [r5, #20]
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c6e:	2320      	movs	r3, #32
 8009c70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c74:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c78:	2330      	movs	r3, #48	; 0x30
 8009c7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e24 <_svfiprintf_r+0x1ec>
 8009c7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c82:	f04f 0901 	mov.w	r9, #1
 8009c86:	4623      	mov	r3, r4
 8009c88:	469a      	mov	sl, r3
 8009c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c8e:	b10a      	cbz	r2, 8009c94 <_svfiprintf_r+0x5c>
 8009c90:	2a25      	cmp	r2, #37	; 0x25
 8009c92:	d1f9      	bne.n	8009c88 <_svfiprintf_r+0x50>
 8009c94:	ebba 0b04 	subs.w	fp, sl, r4
 8009c98:	d00b      	beq.n	8009cb2 <_svfiprintf_r+0x7a>
 8009c9a:	465b      	mov	r3, fp
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	f7ff ff6d 	bl	8009b80 <__ssputs_r>
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	f000 80aa 	beq.w	8009e00 <_svfiprintf_r+0x1c8>
 8009cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cae:	445a      	add	r2, fp
 8009cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8009cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 80a2 	beq.w	8009e00 <_svfiprintf_r+0x1c8>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cc6:	f10a 0a01 	add.w	sl, sl, #1
 8009cca:	9304      	str	r3, [sp, #16]
 8009ccc:	9307      	str	r3, [sp, #28]
 8009cce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cd2:	931a      	str	r3, [sp, #104]	; 0x68
 8009cd4:	4654      	mov	r4, sl
 8009cd6:	2205      	movs	r2, #5
 8009cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cdc:	4851      	ldr	r0, [pc, #324]	; (8009e24 <_svfiprintf_r+0x1ec>)
 8009cde:	f7f6 fa7f 	bl	80001e0 <memchr>
 8009ce2:	9a04      	ldr	r2, [sp, #16]
 8009ce4:	b9d8      	cbnz	r0, 8009d1e <_svfiprintf_r+0xe6>
 8009ce6:	06d0      	lsls	r0, r2, #27
 8009ce8:	bf44      	itt	mi
 8009cea:	2320      	movmi	r3, #32
 8009cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cf0:	0711      	lsls	r1, r2, #28
 8009cf2:	bf44      	itt	mi
 8009cf4:	232b      	movmi	r3, #43	; 0x2b
 8009cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8009cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8009d00:	d015      	beq.n	8009d2e <_svfiprintf_r+0xf6>
 8009d02:	9a07      	ldr	r2, [sp, #28]
 8009d04:	4654      	mov	r4, sl
 8009d06:	2000      	movs	r0, #0
 8009d08:	f04f 0c0a 	mov.w	ip, #10
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d12:	3b30      	subs	r3, #48	; 0x30
 8009d14:	2b09      	cmp	r3, #9
 8009d16:	d94e      	bls.n	8009db6 <_svfiprintf_r+0x17e>
 8009d18:	b1b0      	cbz	r0, 8009d48 <_svfiprintf_r+0x110>
 8009d1a:	9207      	str	r2, [sp, #28]
 8009d1c:	e014      	b.n	8009d48 <_svfiprintf_r+0x110>
 8009d1e:	eba0 0308 	sub.w	r3, r0, r8
 8009d22:	fa09 f303 	lsl.w	r3, r9, r3
 8009d26:	4313      	orrs	r3, r2
 8009d28:	9304      	str	r3, [sp, #16]
 8009d2a:	46a2      	mov	sl, r4
 8009d2c:	e7d2      	b.n	8009cd4 <_svfiprintf_r+0x9c>
 8009d2e:	9b03      	ldr	r3, [sp, #12]
 8009d30:	1d19      	adds	r1, r3, #4
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	9103      	str	r1, [sp, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	bfbb      	ittet	lt
 8009d3a:	425b      	neglt	r3, r3
 8009d3c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d40:	9307      	strge	r3, [sp, #28]
 8009d42:	9307      	strlt	r3, [sp, #28]
 8009d44:	bfb8      	it	lt
 8009d46:	9204      	strlt	r2, [sp, #16]
 8009d48:	7823      	ldrb	r3, [r4, #0]
 8009d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d4c:	d10c      	bne.n	8009d68 <_svfiprintf_r+0x130>
 8009d4e:	7863      	ldrb	r3, [r4, #1]
 8009d50:	2b2a      	cmp	r3, #42	; 0x2a
 8009d52:	d135      	bne.n	8009dc0 <_svfiprintf_r+0x188>
 8009d54:	9b03      	ldr	r3, [sp, #12]
 8009d56:	1d1a      	adds	r2, r3, #4
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	9203      	str	r2, [sp, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	bfb8      	it	lt
 8009d60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d64:	3402      	adds	r4, #2
 8009d66:	9305      	str	r3, [sp, #20]
 8009d68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e34 <_svfiprintf_r+0x1fc>
 8009d6c:	7821      	ldrb	r1, [r4, #0]
 8009d6e:	2203      	movs	r2, #3
 8009d70:	4650      	mov	r0, sl
 8009d72:	f7f6 fa35 	bl	80001e0 <memchr>
 8009d76:	b140      	cbz	r0, 8009d8a <_svfiprintf_r+0x152>
 8009d78:	2340      	movs	r3, #64	; 0x40
 8009d7a:	eba0 000a 	sub.w	r0, r0, sl
 8009d7e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	4303      	orrs	r3, r0
 8009d86:	3401      	adds	r4, #1
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8e:	4826      	ldr	r0, [pc, #152]	; (8009e28 <_svfiprintf_r+0x1f0>)
 8009d90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d94:	2206      	movs	r2, #6
 8009d96:	f7f6 fa23 	bl	80001e0 <memchr>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d038      	beq.n	8009e10 <_svfiprintf_r+0x1d8>
 8009d9e:	4b23      	ldr	r3, [pc, #140]	; (8009e2c <_svfiprintf_r+0x1f4>)
 8009da0:	bb1b      	cbnz	r3, 8009dea <_svfiprintf_r+0x1b2>
 8009da2:	9b03      	ldr	r3, [sp, #12]
 8009da4:	3307      	adds	r3, #7
 8009da6:	f023 0307 	bic.w	r3, r3, #7
 8009daa:	3308      	adds	r3, #8
 8009dac:	9303      	str	r3, [sp, #12]
 8009dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db0:	4433      	add	r3, r6
 8009db2:	9309      	str	r3, [sp, #36]	; 0x24
 8009db4:	e767      	b.n	8009c86 <_svfiprintf_r+0x4e>
 8009db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dba:	460c      	mov	r4, r1
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	e7a5      	b.n	8009d0c <_svfiprintf_r+0xd4>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	3401      	adds	r4, #1
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	f04f 0c0a 	mov.w	ip, #10
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dd2:	3a30      	subs	r2, #48	; 0x30
 8009dd4:	2a09      	cmp	r2, #9
 8009dd6:	d903      	bls.n	8009de0 <_svfiprintf_r+0x1a8>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0c5      	beq.n	8009d68 <_svfiprintf_r+0x130>
 8009ddc:	9105      	str	r1, [sp, #20]
 8009dde:	e7c3      	b.n	8009d68 <_svfiprintf_r+0x130>
 8009de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009de4:	4604      	mov	r4, r0
 8009de6:	2301      	movs	r3, #1
 8009de8:	e7f0      	b.n	8009dcc <_svfiprintf_r+0x194>
 8009dea:	ab03      	add	r3, sp, #12
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	462a      	mov	r2, r5
 8009df0:	4b0f      	ldr	r3, [pc, #60]	; (8009e30 <_svfiprintf_r+0x1f8>)
 8009df2:	a904      	add	r1, sp, #16
 8009df4:	4638      	mov	r0, r7
 8009df6:	f7fd ffd9 	bl	8007dac <_printf_float>
 8009dfa:	1c42      	adds	r2, r0, #1
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	d1d6      	bne.n	8009dae <_svfiprintf_r+0x176>
 8009e00:	89ab      	ldrh	r3, [r5, #12]
 8009e02:	065b      	lsls	r3, r3, #25
 8009e04:	f53f af2c 	bmi.w	8009c60 <_svfiprintf_r+0x28>
 8009e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e0a:	b01d      	add	sp, #116	; 0x74
 8009e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e10:	ab03      	add	r3, sp, #12
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	462a      	mov	r2, r5
 8009e16:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <_svfiprintf_r+0x1f8>)
 8009e18:	a904      	add	r1, sp, #16
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	f7fe fa6a 	bl	80082f4 <_printf_i>
 8009e20:	e7eb      	b.n	8009dfa <_svfiprintf_r+0x1c2>
 8009e22:	bf00      	nop
 8009e24:	0800b80c 	.word	0x0800b80c
 8009e28:	0800b816 	.word	0x0800b816
 8009e2c:	08007dad 	.word	0x08007dad
 8009e30:	08009b81 	.word	0x08009b81
 8009e34:	0800b812 	.word	0x0800b812

08009e38 <_sbrk_r>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	4d06      	ldr	r5, [pc, #24]	; (8009e54 <_sbrk_r+0x1c>)
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	4604      	mov	r4, r0
 8009e40:	4608      	mov	r0, r1
 8009e42:	602b      	str	r3, [r5, #0]
 8009e44:	f7f9 f86a 	bl	8002f1c <_sbrk>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_sbrk_r+0x1a>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_sbrk_r+0x1a>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	20000834 	.word	0x20000834

08009e58 <__assert_func>:
 8009e58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e5a:	4614      	mov	r4, r2
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	4b09      	ldr	r3, [pc, #36]	; (8009e84 <__assert_func+0x2c>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4605      	mov	r5, r0
 8009e64:	68d8      	ldr	r0, [r3, #12]
 8009e66:	b14c      	cbz	r4, 8009e7c <__assert_func+0x24>
 8009e68:	4b07      	ldr	r3, [pc, #28]	; (8009e88 <__assert_func+0x30>)
 8009e6a:	9100      	str	r1, [sp, #0]
 8009e6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e70:	4906      	ldr	r1, [pc, #24]	; (8009e8c <__assert_func+0x34>)
 8009e72:	462b      	mov	r3, r5
 8009e74:	f000 f80e 	bl	8009e94 <fiprintf>
 8009e78:	f000 faac 	bl	800a3d4 <abort>
 8009e7c:	4b04      	ldr	r3, [pc, #16]	; (8009e90 <__assert_func+0x38>)
 8009e7e:	461c      	mov	r4, r3
 8009e80:	e7f3      	b.n	8009e6a <__assert_func+0x12>
 8009e82:	bf00      	nop
 8009e84:	20000044 	.word	0x20000044
 8009e88:	0800b81d 	.word	0x0800b81d
 8009e8c:	0800b82a 	.word	0x0800b82a
 8009e90:	0800b858 	.word	0x0800b858

08009e94 <fiprintf>:
 8009e94:	b40e      	push	{r1, r2, r3}
 8009e96:	b503      	push	{r0, r1, lr}
 8009e98:	4601      	mov	r1, r0
 8009e9a:	ab03      	add	r3, sp, #12
 8009e9c:	4805      	ldr	r0, [pc, #20]	; (8009eb4 <fiprintf+0x20>)
 8009e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea2:	6800      	ldr	r0, [r0, #0]
 8009ea4:	9301      	str	r3, [sp, #4]
 8009ea6:	f000 f897 	bl	8009fd8 <_vfiprintf_r>
 8009eaa:	b002      	add	sp, #8
 8009eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eb0:	b003      	add	sp, #12
 8009eb2:	4770      	bx	lr
 8009eb4:	20000044 	.word	0x20000044

08009eb8 <__ascii_mbtowc>:
 8009eb8:	b082      	sub	sp, #8
 8009eba:	b901      	cbnz	r1, 8009ebe <__ascii_mbtowc+0x6>
 8009ebc:	a901      	add	r1, sp, #4
 8009ebe:	b142      	cbz	r2, 8009ed2 <__ascii_mbtowc+0x1a>
 8009ec0:	b14b      	cbz	r3, 8009ed6 <__ascii_mbtowc+0x1e>
 8009ec2:	7813      	ldrb	r3, [r2, #0]
 8009ec4:	600b      	str	r3, [r1, #0]
 8009ec6:	7812      	ldrb	r2, [r2, #0]
 8009ec8:	1e10      	subs	r0, r2, #0
 8009eca:	bf18      	it	ne
 8009ecc:	2001      	movne	r0, #1
 8009ece:	b002      	add	sp, #8
 8009ed0:	4770      	bx	lr
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	e7fb      	b.n	8009ece <__ascii_mbtowc+0x16>
 8009ed6:	f06f 0001 	mvn.w	r0, #1
 8009eda:	e7f8      	b.n	8009ece <__ascii_mbtowc+0x16>

08009edc <memmove>:
 8009edc:	4288      	cmp	r0, r1
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	eb01 0402 	add.w	r4, r1, r2
 8009ee4:	d902      	bls.n	8009eec <memmove+0x10>
 8009ee6:	4284      	cmp	r4, r0
 8009ee8:	4623      	mov	r3, r4
 8009eea:	d807      	bhi.n	8009efc <memmove+0x20>
 8009eec:	1e43      	subs	r3, r0, #1
 8009eee:	42a1      	cmp	r1, r4
 8009ef0:	d008      	beq.n	8009f04 <memmove+0x28>
 8009ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009efa:	e7f8      	b.n	8009eee <memmove+0x12>
 8009efc:	4402      	add	r2, r0
 8009efe:	4601      	mov	r1, r0
 8009f00:	428a      	cmp	r2, r1
 8009f02:	d100      	bne.n	8009f06 <memmove+0x2a>
 8009f04:	bd10      	pop	{r4, pc}
 8009f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f0e:	e7f7      	b.n	8009f00 <memmove+0x24>

08009f10 <__malloc_lock>:
 8009f10:	4801      	ldr	r0, [pc, #4]	; (8009f18 <__malloc_lock+0x8>)
 8009f12:	f000 bc1f 	b.w	800a754 <__retarget_lock_acquire_recursive>
 8009f16:	bf00      	nop
 8009f18:	20000838 	.word	0x20000838

08009f1c <__malloc_unlock>:
 8009f1c:	4801      	ldr	r0, [pc, #4]	; (8009f24 <__malloc_unlock+0x8>)
 8009f1e:	f000 bc1a 	b.w	800a756 <__retarget_lock_release_recursive>
 8009f22:	bf00      	nop
 8009f24:	20000838 	.word	0x20000838

08009f28 <_realloc_r>:
 8009f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2c:	4680      	mov	r8, r0
 8009f2e:	4614      	mov	r4, r2
 8009f30:	460e      	mov	r6, r1
 8009f32:	b921      	cbnz	r1, 8009f3e <_realloc_r+0x16>
 8009f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f38:	4611      	mov	r1, r2
 8009f3a:	f7ff bdad 	b.w	8009a98 <_malloc_r>
 8009f3e:	b92a      	cbnz	r2, 8009f4c <_realloc_r+0x24>
 8009f40:	f7ff fd3e 	bl	80099c0 <_free_r>
 8009f44:	4625      	mov	r5, r4
 8009f46:	4628      	mov	r0, r5
 8009f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f4c:	f000 fc6a 	bl	800a824 <_malloc_usable_size_r>
 8009f50:	4284      	cmp	r4, r0
 8009f52:	4607      	mov	r7, r0
 8009f54:	d802      	bhi.n	8009f5c <_realloc_r+0x34>
 8009f56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f5a:	d812      	bhi.n	8009f82 <_realloc_r+0x5a>
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	4640      	mov	r0, r8
 8009f60:	f7ff fd9a 	bl	8009a98 <_malloc_r>
 8009f64:	4605      	mov	r5, r0
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d0ed      	beq.n	8009f46 <_realloc_r+0x1e>
 8009f6a:	42bc      	cmp	r4, r7
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	4631      	mov	r1, r6
 8009f70:	bf28      	it	cs
 8009f72:	463a      	movcs	r2, r7
 8009f74:	f7fd fe64 	bl	8007c40 <memcpy>
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	f7ff fd20 	bl	80099c0 <_free_r>
 8009f80:	e7e1      	b.n	8009f46 <_realloc_r+0x1e>
 8009f82:	4635      	mov	r5, r6
 8009f84:	e7df      	b.n	8009f46 <_realloc_r+0x1e>

08009f86 <__sfputc_r>:
 8009f86:	6893      	ldr	r3, [r2, #8]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	b410      	push	{r4}
 8009f8e:	6093      	str	r3, [r2, #8]
 8009f90:	da08      	bge.n	8009fa4 <__sfputc_r+0x1e>
 8009f92:	6994      	ldr	r4, [r2, #24]
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	db01      	blt.n	8009f9c <__sfputc_r+0x16>
 8009f98:	290a      	cmp	r1, #10
 8009f9a:	d103      	bne.n	8009fa4 <__sfputc_r+0x1e>
 8009f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fa0:	f000 b94a 	b.w	800a238 <__swbuf_r>
 8009fa4:	6813      	ldr	r3, [r2, #0]
 8009fa6:	1c58      	adds	r0, r3, #1
 8009fa8:	6010      	str	r0, [r2, #0]
 8009faa:	7019      	strb	r1, [r3, #0]
 8009fac:	4608      	mov	r0, r1
 8009fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <__sfputs_r>:
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	460f      	mov	r7, r1
 8009fba:	4614      	mov	r4, r2
 8009fbc:	18d5      	adds	r5, r2, r3
 8009fbe:	42ac      	cmp	r4, r5
 8009fc0:	d101      	bne.n	8009fc6 <__sfputs_r+0x12>
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	e007      	b.n	8009fd6 <__sfputs_r+0x22>
 8009fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fca:	463a      	mov	r2, r7
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f7ff ffda 	bl	8009f86 <__sfputc_r>
 8009fd2:	1c43      	adds	r3, r0, #1
 8009fd4:	d1f3      	bne.n	8009fbe <__sfputs_r+0xa>
 8009fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fd8 <_vfiprintf_r>:
 8009fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	460d      	mov	r5, r1
 8009fde:	b09d      	sub	sp, #116	; 0x74
 8009fe0:	4614      	mov	r4, r2
 8009fe2:	4698      	mov	r8, r3
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	b118      	cbz	r0, 8009ff0 <_vfiprintf_r+0x18>
 8009fe8:	6983      	ldr	r3, [r0, #24]
 8009fea:	b90b      	cbnz	r3, 8009ff0 <_vfiprintf_r+0x18>
 8009fec:	f000 fb14 	bl	800a618 <__sinit>
 8009ff0:	4b89      	ldr	r3, [pc, #548]	; (800a218 <_vfiprintf_r+0x240>)
 8009ff2:	429d      	cmp	r5, r3
 8009ff4:	d11b      	bne.n	800a02e <_vfiprintf_r+0x56>
 8009ff6:	6875      	ldr	r5, [r6, #4]
 8009ff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ffa:	07d9      	lsls	r1, r3, #31
 8009ffc:	d405      	bmi.n	800a00a <_vfiprintf_r+0x32>
 8009ffe:	89ab      	ldrh	r3, [r5, #12]
 800a000:	059a      	lsls	r2, r3, #22
 800a002:	d402      	bmi.n	800a00a <_vfiprintf_r+0x32>
 800a004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a006:	f000 fba5 	bl	800a754 <__retarget_lock_acquire_recursive>
 800a00a:	89ab      	ldrh	r3, [r5, #12]
 800a00c:	071b      	lsls	r3, r3, #28
 800a00e:	d501      	bpl.n	800a014 <_vfiprintf_r+0x3c>
 800a010:	692b      	ldr	r3, [r5, #16]
 800a012:	b9eb      	cbnz	r3, 800a050 <_vfiprintf_r+0x78>
 800a014:	4629      	mov	r1, r5
 800a016:	4630      	mov	r0, r6
 800a018:	f000 f96e 	bl	800a2f8 <__swsetup_r>
 800a01c:	b1c0      	cbz	r0, 800a050 <_vfiprintf_r+0x78>
 800a01e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a020:	07dc      	lsls	r4, r3, #31
 800a022:	d50e      	bpl.n	800a042 <_vfiprintf_r+0x6a>
 800a024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a028:	b01d      	add	sp, #116	; 0x74
 800a02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02e:	4b7b      	ldr	r3, [pc, #492]	; (800a21c <_vfiprintf_r+0x244>)
 800a030:	429d      	cmp	r5, r3
 800a032:	d101      	bne.n	800a038 <_vfiprintf_r+0x60>
 800a034:	68b5      	ldr	r5, [r6, #8]
 800a036:	e7df      	b.n	8009ff8 <_vfiprintf_r+0x20>
 800a038:	4b79      	ldr	r3, [pc, #484]	; (800a220 <_vfiprintf_r+0x248>)
 800a03a:	429d      	cmp	r5, r3
 800a03c:	bf08      	it	eq
 800a03e:	68f5      	ldreq	r5, [r6, #12]
 800a040:	e7da      	b.n	8009ff8 <_vfiprintf_r+0x20>
 800a042:	89ab      	ldrh	r3, [r5, #12]
 800a044:	0598      	lsls	r0, r3, #22
 800a046:	d4ed      	bmi.n	800a024 <_vfiprintf_r+0x4c>
 800a048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a04a:	f000 fb84 	bl	800a756 <__retarget_lock_release_recursive>
 800a04e:	e7e9      	b.n	800a024 <_vfiprintf_r+0x4c>
 800a050:	2300      	movs	r3, #0
 800a052:	9309      	str	r3, [sp, #36]	; 0x24
 800a054:	2320      	movs	r3, #32
 800a056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a05a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a05e:	2330      	movs	r3, #48	; 0x30
 800a060:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a224 <_vfiprintf_r+0x24c>
 800a064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a068:	f04f 0901 	mov.w	r9, #1
 800a06c:	4623      	mov	r3, r4
 800a06e:	469a      	mov	sl, r3
 800a070:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a074:	b10a      	cbz	r2, 800a07a <_vfiprintf_r+0xa2>
 800a076:	2a25      	cmp	r2, #37	; 0x25
 800a078:	d1f9      	bne.n	800a06e <_vfiprintf_r+0x96>
 800a07a:	ebba 0b04 	subs.w	fp, sl, r4
 800a07e:	d00b      	beq.n	800a098 <_vfiprintf_r+0xc0>
 800a080:	465b      	mov	r3, fp
 800a082:	4622      	mov	r2, r4
 800a084:	4629      	mov	r1, r5
 800a086:	4630      	mov	r0, r6
 800a088:	f7ff ff94 	bl	8009fb4 <__sfputs_r>
 800a08c:	3001      	adds	r0, #1
 800a08e:	f000 80aa 	beq.w	800a1e6 <_vfiprintf_r+0x20e>
 800a092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a094:	445a      	add	r2, fp
 800a096:	9209      	str	r2, [sp, #36]	; 0x24
 800a098:	f89a 3000 	ldrb.w	r3, [sl]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 80a2 	beq.w	800a1e6 <_vfiprintf_r+0x20e>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ac:	f10a 0a01 	add.w	sl, sl, #1
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	9307      	str	r3, [sp, #28]
 800a0b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ba:	4654      	mov	r4, sl
 800a0bc:	2205      	movs	r2, #5
 800a0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c2:	4858      	ldr	r0, [pc, #352]	; (800a224 <_vfiprintf_r+0x24c>)
 800a0c4:	f7f6 f88c 	bl	80001e0 <memchr>
 800a0c8:	9a04      	ldr	r2, [sp, #16]
 800a0ca:	b9d8      	cbnz	r0, 800a104 <_vfiprintf_r+0x12c>
 800a0cc:	06d1      	lsls	r1, r2, #27
 800a0ce:	bf44      	itt	mi
 800a0d0:	2320      	movmi	r3, #32
 800a0d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d6:	0713      	lsls	r3, r2, #28
 800a0d8:	bf44      	itt	mi
 800a0da:	232b      	movmi	r3, #43	; 0x2b
 800a0dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e6:	d015      	beq.n	800a114 <_vfiprintf_r+0x13c>
 800a0e8:	9a07      	ldr	r2, [sp, #28]
 800a0ea:	4654      	mov	r4, sl
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	f04f 0c0a 	mov.w	ip, #10
 800a0f2:	4621      	mov	r1, r4
 800a0f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0f8:	3b30      	subs	r3, #48	; 0x30
 800a0fa:	2b09      	cmp	r3, #9
 800a0fc:	d94e      	bls.n	800a19c <_vfiprintf_r+0x1c4>
 800a0fe:	b1b0      	cbz	r0, 800a12e <_vfiprintf_r+0x156>
 800a100:	9207      	str	r2, [sp, #28]
 800a102:	e014      	b.n	800a12e <_vfiprintf_r+0x156>
 800a104:	eba0 0308 	sub.w	r3, r0, r8
 800a108:	fa09 f303 	lsl.w	r3, r9, r3
 800a10c:	4313      	orrs	r3, r2
 800a10e:	9304      	str	r3, [sp, #16]
 800a110:	46a2      	mov	sl, r4
 800a112:	e7d2      	b.n	800a0ba <_vfiprintf_r+0xe2>
 800a114:	9b03      	ldr	r3, [sp, #12]
 800a116:	1d19      	adds	r1, r3, #4
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	9103      	str	r1, [sp, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bfbb      	ittet	lt
 800a120:	425b      	neglt	r3, r3
 800a122:	f042 0202 	orrlt.w	r2, r2, #2
 800a126:	9307      	strge	r3, [sp, #28]
 800a128:	9307      	strlt	r3, [sp, #28]
 800a12a:	bfb8      	it	lt
 800a12c:	9204      	strlt	r2, [sp, #16]
 800a12e:	7823      	ldrb	r3, [r4, #0]
 800a130:	2b2e      	cmp	r3, #46	; 0x2e
 800a132:	d10c      	bne.n	800a14e <_vfiprintf_r+0x176>
 800a134:	7863      	ldrb	r3, [r4, #1]
 800a136:	2b2a      	cmp	r3, #42	; 0x2a
 800a138:	d135      	bne.n	800a1a6 <_vfiprintf_r+0x1ce>
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	1d1a      	adds	r2, r3, #4
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	9203      	str	r2, [sp, #12]
 800a142:	2b00      	cmp	r3, #0
 800a144:	bfb8      	it	lt
 800a146:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a14a:	3402      	adds	r4, #2
 800a14c:	9305      	str	r3, [sp, #20]
 800a14e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a234 <_vfiprintf_r+0x25c>
 800a152:	7821      	ldrb	r1, [r4, #0]
 800a154:	2203      	movs	r2, #3
 800a156:	4650      	mov	r0, sl
 800a158:	f7f6 f842 	bl	80001e0 <memchr>
 800a15c:	b140      	cbz	r0, 800a170 <_vfiprintf_r+0x198>
 800a15e:	2340      	movs	r3, #64	; 0x40
 800a160:	eba0 000a 	sub.w	r0, r0, sl
 800a164:	fa03 f000 	lsl.w	r0, r3, r0
 800a168:	9b04      	ldr	r3, [sp, #16]
 800a16a:	4303      	orrs	r3, r0
 800a16c:	3401      	adds	r4, #1
 800a16e:	9304      	str	r3, [sp, #16]
 800a170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a174:	482c      	ldr	r0, [pc, #176]	; (800a228 <_vfiprintf_r+0x250>)
 800a176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a17a:	2206      	movs	r2, #6
 800a17c:	f7f6 f830 	bl	80001e0 <memchr>
 800a180:	2800      	cmp	r0, #0
 800a182:	d03f      	beq.n	800a204 <_vfiprintf_r+0x22c>
 800a184:	4b29      	ldr	r3, [pc, #164]	; (800a22c <_vfiprintf_r+0x254>)
 800a186:	bb1b      	cbnz	r3, 800a1d0 <_vfiprintf_r+0x1f8>
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	3307      	adds	r3, #7
 800a18c:	f023 0307 	bic.w	r3, r3, #7
 800a190:	3308      	adds	r3, #8
 800a192:	9303      	str	r3, [sp, #12]
 800a194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a196:	443b      	add	r3, r7
 800a198:	9309      	str	r3, [sp, #36]	; 0x24
 800a19a:	e767      	b.n	800a06c <_vfiprintf_r+0x94>
 800a19c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	e7a5      	b.n	800a0f2 <_vfiprintf_r+0x11a>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	3401      	adds	r4, #1
 800a1aa:	9305      	str	r3, [sp, #20]
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	f04f 0c0a 	mov.w	ip, #10
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1b8:	3a30      	subs	r2, #48	; 0x30
 800a1ba:	2a09      	cmp	r2, #9
 800a1bc:	d903      	bls.n	800a1c6 <_vfiprintf_r+0x1ee>
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0c5      	beq.n	800a14e <_vfiprintf_r+0x176>
 800a1c2:	9105      	str	r1, [sp, #20]
 800a1c4:	e7c3      	b.n	800a14e <_vfiprintf_r+0x176>
 800a1c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e7f0      	b.n	800a1b2 <_vfiprintf_r+0x1da>
 800a1d0:	ab03      	add	r3, sp, #12
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4b16      	ldr	r3, [pc, #88]	; (800a230 <_vfiprintf_r+0x258>)
 800a1d8:	a904      	add	r1, sp, #16
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7fd fde6 	bl	8007dac <_printf_float>
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	1c78      	adds	r0, r7, #1
 800a1e4:	d1d6      	bne.n	800a194 <_vfiprintf_r+0x1bc>
 800a1e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1e8:	07d9      	lsls	r1, r3, #31
 800a1ea:	d405      	bmi.n	800a1f8 <_vfiprintf_r+0x220>
 800a1ec:	89ab      	ldrh	r3, [r5, #12]
 800a1ee:	059a      	lsls	r2, r3, #22
 800a1f0:	d402      	bmi.n	800a1f8 <_vfiprintf_r+0x220>
 800a1f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1f4:	f000 faaf 	bl	800a756 <__retarget_lock_release_recursive>
 800a1f8:	89ab      	ldrh	r3, [r5, #12]
 800a1fa:	065b      	lsls	r3, r3, #25
 800a1fc:	f53f af12 	bmi.w	800a024 <_vfiprintf_r+0x4c>
 800a200:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a202:	e711      	b.n	800a028 <_vfiprintf_r+0x50>
 800a204:	ab03      	add	r3, sp, #12
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	462a      	mov	r2, r5
 800a20a:	4b09      	ldr	r3, [pc, #36]	; (800a230 <_vfiprintf_r+0x258>)
 800a20c:	a904      	add	r1, sp, #16
 800a20e:	4630      	mov	r0, r6
 800a210:	f7fe f870 	bl	80082f4 <_printf_i>
 800a214:	e7e4      	b.n	800a1e0 <_vfiprintf_r+0x208>
 800a216:	bf00      	nop
 800a218:	0800b984 	.word	0x0800b984
 800a21c:	0800b9a4 	.word	0x0800b9a4
 800a220:	0800b964 	.word	0x0800b964
 800a224:	0800b80c 	.word	0x0800b80c
 800a228:	0800b816 	.word	0x0800b816
 800a22c:	08007dad 	.word	0x08007dad
 800a230:	08009fb5 	.word	0x08009fb5
 800a234:	0800b812 	.word	0x0800b812

0800a238 <__swbuf_r>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	460e      	mov	r6, r1
 800a23c:	4614      	mov	r4, r2
 800a23e:	4605      	mov	r5, r0
 800a240:	b118      	cbz	r0, 800a24a <__swbuf_r+0x12>
 800a242:	6983      	ldr	r3, [r0, #24]
 800a244:	b90b      	cbnz	r3, 800a24a <__swbuf_r+0x12>
 800a246:	f000 f9e7 	bl	800a618 <__sinit>
 800a24a:	4b21      	ldr	r3, [pc, #132]	; (800a2d0 <__swbuf_r+0x98>)
 800a24c:	429c      	cmp	r4, r3
 800a24e:	d12b      	bne.n	800a2a8 <__swbuf_r+0x70>
 800a250:	686c      	ldr	r4, [r5, #4]
 800a252:	69a3      	ldr	r3, [r4, #24]
 800a254:	60a3      	str	r3, [r4, #8]
 800a256:	89a3      	ldrh	r3, [r4, #12]
 800a258:	071a      	lsls	r2, r3, #28
 800a25a:	d52f      	bpl.n	800a2bc <__swbuf_r+0x84>
 800a25c:	6923      	ldr	r3, [r4, #16]
 800a25e:	b36b      	cbz	r3, 800a2bc <__swbuf_r+0x84>
 800a260:	6923      	ldr	r3, [r4, #16]
 800a262:	6820      	ldr	r0, [r4, #0]
 800a264:	1ac0      	subs	r0, r0, r3
 800a266:	6963      	ldr	r3, [r4, #20]
 800a268:	b2f6      	uxtb	r6, r6
 800a26a:	4283      	cmp	r3, r0
 800a26c:	4637      	mov	r7, r6
 800a26e:	dc04      	bgt.n	800a27a <__swbuf_r+0x42>
 800a270:	4621      	mov	r1, r4
 800a272:	4628      	mov	r0, r5
 800a274:	f000 f93c 	bl	800a4f0 <_fflush_r>
 800a278:	bb30      	cbnz	r0, 800a2c8 <__swbuf_r+0x90>
 800a27a:	68a3      	ldr	r3, [r4, #8]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	60a3      	str	r3, [r4, #8]
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	1c5a      	adds	r2, r3, #1
 800a284:	6022      	str	r2, [r4, #0]
 800a286:	701e      	strb	r6, [r3, #0]
 800a288:	6963      	ldr	r3, [r4, #20]
 800a28a:	3001      	adds	r0, #1
 800a28c:	4283      	cmp	r3, r0
 800a28e:	d004      	beq.n	800a29a <__swbuf_r+0x62>
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	07db      	lsls	r3, r3, #31
 800a294:	d506      	bpl.n	800a2a4 <__swbuf_r+0x6c>
 800a296:	2e0a      	cmp	r6, #10
 800a298:	d104      	bne.n	800a2a4 <__swbuf_r+0x6c>
 800a29a:	4621      	mov	r1, r4
 800a29c:	4628      	mov	r0, r5
 800a29e:	f000 f927 	bl	800a4f0 <_fflush_r>
 800a2a2:	b988      	cbnz	r0, 800a2c8 <__swbuf_r+0x90>
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a8:	4b0a      	ldr	r3, [pc, #40]	; (800a2d4 <__swbuf_r+0x9c>)
 800a2aa:	429c      	cmp	r4, r3
 800a2ac:	d101      	bne.n	800a2b2 <__swbuf_r+0x7a>
 800a2ae:	68ac      	ldr	r4, [r5, #8]
 800a2b0:	e7cf      	b.n	800a252 <__swbuf_r+0x1a>
 800a2b2:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <__swbuf_r+0xa0>)
 800a2b4:	429c      	cmp	r4, r3
 800a2b6:	bf08      	it	eq
 800a2b8:	68ec      	ldreq	r4, [r5, #12]
 800a2ba:	e7ca      	b.n	800a252 <__swbuf_r+0x1a>
 800a2bc:	4621      	mov	r1, r4
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f000 f81a 	bl	800a2f8 <__swsetup_r>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d0cb      	beq.n	800a260 <__swbuf_r+0x28>
 800a2c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a2cc:	e7ea      	b.n	800a2a4 <__swbuf_r+0x6c>
 800a2ce:	bf00      	nop
 800a2d0:	0800b984 	.word	0x0800b984
 800a2d4:	0800b9a4 	.word	0x0800b9a4
 800a2d8:	0800b964 	.word	0x0800b964

0800a2dc <__ascii_wctomb>:
 800a2dc:	b149      	cbz	r1, 800a2f2 <__ascii_wctomb+0x16>
 800a2de:	2aff      	cmp	r2, #255	; 0xff
 800a2e0:	bf85      	ittet	hi
 800a2e2:	238a      	movhi	r3, #138	; 0x8a
 800a2e4:	6003      	strhi	r3, [r0, #0]
 800a2e6:	700a      	strbls	r2, [r1, #0]
 800a2e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a2ec:	bf98      	it	ls
 800a2ee:	2001      	movls	r0, #1
 800a2f0:	4770      	bx	lr
 800a2f2:	4608      	mov	r0, r1
 800a2f4:	4770      	bx	lr
	...

0800a2f8 <__swsetup_r>:
 800a2f8:	4b32      	ldr	r3, [pc, #200]	; (800a3c4 <__swsetup_r+0xcc>)
 800a2fa:	b570      	push	{r4, r5, r6, lr}
 800a2fc:	681d      	ldr	r5, [r3, #0]
 800a2fe:	4606      	mov	r6, r0
 800a300:	460c      	mov	r4, r1
 800a302:	b125      	cbz	r5, 800a30e <__swsetup_r+0x16>
 800a304:	69ab      	ldr	r3, [r5, #24]
 800a306:	b913      	cbnz	r3, 800a30e <__swsetup_r+0x16>
 800a308:	4628      	mov	r0, r5
 800a30a:	f000 f985 	bl	800a618 <__sinit>
 800a30e:	4b2e      	ldr	r3, [pc, #184]	; (800a3c8 <__swsetup_r+0xd0>)
 800a310:	429c      	cmp	r4, r3
 800a312:	d10f      	bne.n	800a334 <__swsetup_r+0x3c>
 800a314:	686c      	ldr	r4, [r5, #4]
 800a316:	89a3      	ldrh	r3, [r4, #12]
 800a318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a31c:	0719      	lsls	r1, r3, #28
 800a31e:	d42c      	bmi.n	800a37a <__swsetup_r+0x82>
 800a320:	06dd      	lsls	r5, r3, #27
 800a322:	d411      	bmi.n	800a348 <__swsetup_r+0x50>
 800a324:	2309      	movs	r3, #9
 800a326:	6033      	str	r3, [r6, #0]
 800a328:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a32c:	81a3      	strh	r3, [r4, #12]
 800a32e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a332:	e03e      	b.n	800a3b2 <__swsetup_r+0xba>
 800a334:	4b25      	ldr	r3, [pc, #148]	; (800a3cc <__swsetup_r+0xd4>)
 800a336:	429c      	cmp	r4, r3
 800a338:	d101      	bne.n	800a33e <__swsetup_r+0x46>
 800a33a:	68ac      	ldr	r4, [r5, #8]
 800a33c:	e7eb      	b.n	800a316 <__swsetup_r+0x1e>
 800a33e:	4b24      	ldr	r3, [pc, #144]	; (800a3d0 <__swsetup_r+0xd8>)
 800a340:	429c      	cmp	r4, r3
 800a342:	bf08      	it	eq
 800a344:	68ec      	ldreq	r4, [r5, #12]
 800a346:	e7e6      	b.n	800a316 <__swsetup_r+0x1e>
 800a348:	0758      	lsls	r0, r3, #29
 800a34a:	d512      	bpl.n	800a372 <__swsetup_r+0x7a>
 800a34c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a34e:	b141      	cbz	r1, 800a362 <__swsetup_r+0x6a>
 800a350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a354:	4299      	cmp	r1, r3
 800a356:	d002      	beq.n	800a35e <__swsetup_r+0x66>
 800a358:	4630      	mov	r0, r6
 800a35a:	f7ff fb31 	bl	80099c0 <_free_r>
 800a35e:	2300      	movs	r3, #0
 800a360:	6363      	str	r3, [r4, #52]	; 0x34
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a368:	81a3      	strh	r3, [r4, #12]
 800a36a:	2300      	movs	r3, #0
 800a36c:	6063      	str	r3, [r4, #4]
 800a36e:	6923      	ldr	r3, [r4, #16]
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	f043 0308 	orr.w	r3, r3, #8
 800a378:	81a3      	strh	r3, [r4, #12]
 800a37a:	6923      	ldr	r3, [r4, #16]
 800a37c:	b94b      	cbnz	r3, 800a392 <__swsetup_r+0x9a>
 800a37e:	89a3      	ldrh	r3, [r4, #12]
 800a380:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a388:	d003      	beq.n	800a392 <__swsetup_r+0x9a>
 800a38a:	4621      	mov	r1, r4
 800a38c:	4630      	mov	r0, r6
 800a38e:	f000 fa09 	bl	800a7a4 <__smakebuf_r>
 800a392:	89a0      	ldrh	r0, [r4, #12]
 800a394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a398:	f010 0301 	ands.w	r3, r0, #1
 800a39c:	d00a      	beq.n	800a3b4 <__swsetup_r+0xbc>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	60a3      	str	r3, [r4, #8]
 800a3a2:	6963      	ldr	r3, [r4, #20]
 800a3a4:	425b      	negs	r3, r3
 800a3a6:	61a3      	str	r3, [r4, #24]
 800a3a8:	6923      	ldr	r3, [r4, #16]
 800a3aa:	b943      	cbnz	r3, 800a3be <__swsetup_r+0xc6>
 800a3ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3b0:	d1ba      	bne.n	800a328 <__swsetup_r+0x30>
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	0781      	lsls	r1, r0, #30
 800a3b6:	bf58      	it	pl
 800a3b8:	6963      	ldrpl	r3, [r4, #20]
 800a3ba:	60a3      	str	r3, [r4, #8]
 800a3bc:	e7f4      	b.n	800a3a8 <__swsetup_r+0xb0>
 800a3be:	2000      	movs	r0, #0
 800a3c0:	e7f7      	b.n	800a3b2 <__swsetup_r+0xba>
 800a3c2:	bf00      	nop
 800a3c4:	20000044 	.word	0x20000044
 800a3c8:	0800b984 	.word	0x0800b984
 800a3cc:	0800b9a4 	.word	0x0800b9a4
 800a3d0:	0800b964 	.word	0x0800b964

0800a3d4 <abort>:
 800a3d4:	b508      	push	{r3, lr}
 800a3d6:	2006      	movs	r0, #6
 800a3d8:	f000 fa54 	bl	800a884 <raise>
 800a3dc:	2001      	movs	r0, #1
 800a3de:	f7f8 fd25 	bl	8002e2c <_exit>
	...

0800a3e4 <__sflush_r>:
 800a3e4:	898a      	ldrh	r2, [r1, #12]
 800a3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	0710      	lsls	r0, r2, #28
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	d458      	bmi.n	800a4a4 <__sflush_r+0xc0>
 800a3f2:	684b      	ldr	r3, [r1, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dc05      	bgt.n	800a404 <__sflush_r+0x20>
 800a3f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	dc02      	bgt.n	800a404 <__sflush_r+0x20>
 800a3fe:	2000      	movs	r0, #0
 800a400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a406:	2e00      	cmp	r6, #0
 800a408:	d0f9      	beq.n	800a3fe <__sflush_r+0x1a>
 800a40a:	2300      	movs	r3, #0
 800a40c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a410:	682f      	ldr	r7, [r5, #0]
 800a412:	602b      	str	r3, [r5, #0]
 800a414:	d032      	beq.n	800a47c <__sflush_r+0x98>
 800a416:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	075a      	lsls	r2, r3, #29
 800a41c:	d505      	bpl.n	800a42a <__sflush_r+0x46>
 800a41e:	6863      	ldr	r3, [r4, #4]
 800a420:	1ac0      	subs	r0, r0, r3
 800a422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a424:	b10b      	cbz	r3, 800a42a <__sflush_r+0x46>
 800a426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a428:	1ac0      	subs	r0, r0, r3
 800a42a:	2300      	movs	r3, #0
 800a42c:	4602      	mov	r2, r0
 800a42e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a430:	6a21      	ldr	r1, [r4, #32]
 800a432:	4628      	mov	r0, r5
 800a434:	47b0      	blx	r6
 800a436:	1c43      	adds	r3, r0, #1
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	d106      	bne.n	800a44a <__sflush_r+0x66>
 800a43c:	6829      	ldr	r1, [r5, #0]
 800a43e:	291d      	cmp	r1, #29
 800a440:	d82c      	bhi.n	800a49c <__sflush_r+0xb8>
 800a442:	4a2a      	ldr	r2, [pc, #168]	; (800a4ec <__sflush_r+0x108>)
 800a444:	40ca      	lsrs	r2, r1
 800a446:	07d6      	lsls	r6, r2, #31
 800a448:	d528      	bpl.n	800a49c <__sflush_r+0xb8>
 800a44a:	2200      	movs	r2, #0
 800a44c:	6062      	str	r2, [r4, #4]
 800a44e:	04d9      	lsls	r1, r3, #19
 800a450:	6922      	ldr	r2, [r4, #16]
 800a452:	6022      	str	r2, [r4, #0]
 800a454:	d504      	bpl.n	800a460 <__sflush_r+0x7c>
 800a456:	1c42      	adds	r2, r0, #1
 800a458:	d101      	bne.n	800a45e <__sflush_r+0x7a>
 800a45a:	682b      	ldr	r3, [r5, #0]
 800a45c:	b903      	cbnz	r3, 800a460 <__sflush_r+0x7c>
 800a45e:	6560      	str	r0, [r4, #84]	; 0x54
 800a460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a462:	602f      	str	r7, [r5, #0]
 800a464:	2900      	cmp	r1, #0
 800a466:	d0ca      	beq.n	800a3fe <__sflush_r+0x1a>
 800a468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a46c:	4299      	cmp	r1, r3
 800a46e:	d002      	beq.n	800a476 <__sflush_r+0x92>
 800a470:	4628      	mov	r0, r5
 800a472:	f7ff faa5 	bl	80099c0 <_free_r>
 800a476:	2000      	movs	r0, #0
 800a478:	6360      	str	r0, [r4, #52]	; 0x34
 800a47a:	e7c1      	b.n	800a400 <__sflush_r+0x1c>
 800a47c:	6a21      	ldr	r1, [r4, #32]
 800a47e:	2301      	movs	r3, #1
 800a480:	4628      	mov	r0, r5
 800a482:	47b0      	blx	r6
 800a484:	1c41      	adds	r1, r0, #1
 800a486:	d1c7      	bne.n	800a418 <__sflush_r+0x34>
 800a488:	682b      	ldr	r3, [r5, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d0c4      	beq.n	800a418 <__sflush_r+0x34>
 800a48e:	2b1d      	cmp	r3, #29
 800a490:	d001      	beq.n	800a496 <__sflush_r+0xb2>
 800a492:	2b16      	cmp	r3, #22
 800a494:	d101      	bne.n	800a49a <__sflush_r+0xb6>
 800a496:	602f      	str	r7, [r5, #0]
 800a498:	e7b1      	b.n	800a3fe <__sflush_r+0x1a>
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	e7ad      	b.n	800a400 <__sflush_r+0x1c>
 800a4a4:	690f      	ldr	r7, [r1, #16]
 800a4a6:	2f00      	cmp	r7, #0
 800a4a8:	d0a9      	beq.n	800a3fe <__sflush_r+0x1a>
 800a4aa:	0793      	lsls	r3, r2, #30
 800a4ac:	680e      	ldr	r6, [r1, #0]
 800a4ae:	bf08      	it	eq
 800a4b0:	694b      	ldreq	r3, [r1, #20]
 800a4b2:	600f      	str	r7, [r1, #0]
 800a4b4:	bf18      	it	ne
 800a4b6:	2300      	movne	r3, #0
 800a4b8:	eba6 0807 	sub.w	r8, r6, r7
 800a4bc:	608b      	str	r3, [r1, #8]
 800a4be:	f1b8 0f00 	cmp.w	r8, #0
 800a4c2:	dd9c      	ble.n	800a3fe <__sflush_r+0x1a>
 800a4c4:	6a21      	ldr	r1, [r4, #32]
 800a4c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4c8:	4643      	mov	r3, r8
 800a4ca:	463a      	mov	r2, r7
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	47b0      	blx	r6
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	dc06      	bgt.n	800a4e2 <__sflush_r+0xfe>
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4da:	81a3      	strh	r3, [r4, #12]
 800a4dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4e0:	e78e      	b.n	800a400 <__sflush_r+0x1c>
 800a4e2:	4407      	add	r7, r0
 800a4e4:	eba8 0800 	sub.w	r8, r8, r0
 800a4e8:	e7e9      	b.n	800a4be <__sflush_r+0xda>
 800a4ea:	bf00      	nop
 800a4ec:	20400001 	.word	0x20400001

0800a4f0 <_fflush_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	690b      	ldr	r3, [r1, #16]
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	b913      	cbnz	r3, 800a500 <_fflush_r+0x10>
 800a4fa:	2500      	movs	r5, #0
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	bd38      	pop	{r3, r4, r5, pc}
 800a500:	b118      	cbz	r0, 800a50a <_fflush_r+0x1a>
 800a502:	6983      	ldr	r3, [r0, #24]
 800a504:	b90b      	cbnz	r3, 800a50a <_fflush_r+0x1a>
 800a506:	f000 f887 	bl	800a618 <__sinit>
 800a50a:	4b14      	ldr	r3, [pc, #80]	; (800a55c <_fflush_r+0x6c>)
 800a50c:	429c      	cmp	r4, r3
 800a50e:	d11b      	bne.n	800a548 <_fflush_r+0x58>
 800a510:	686c      	ldr	r4, [r5, #4]
 800a512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0ef      	beq.n	800a4fa <_fflush_r+0xa>
 800a51a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a51c:	07d0      	lsls	r0, r2, #31
 800a51e:	d404      	bmi.n	800a52a <_fflush_r+0x3a>
 800a520:	0599      	lsls	r1, r3, #22
 800a522:	d402      	bmi.n	800a52a <_fflush_r+0x3a>
 800a524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a526:	f000 f915 	bl	800a754 <__retarget_lock_acquire_recursive>
 800a52a:	4628      	mov	r0, r5
 800a52c:	4621      	mov	r1, r4
 800a52e:	f7ff ff59 	bl	800a3e4 <__sflush_r>
 800a532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a534:	07da      	lsls	r2, r3, #31
 800a536:	4605      	mov	r5, r0
 800a538:	d4e0      	bmi.n	800a4fc <_fflush_r+0xc>
 800a53a:	89a3      	ldrh	r3, [r4, #12]
 800a53c:	059b      	lsls	r3, r3, #22
 800a53e:	d4dd      	bmi.n	800a4fc <_fflush_r+0xc>
 800a540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a542:	f000 f908 	bl	800a756 <__retarget_lock_release_recursive>
 800a546:	e7d9      	b.n	800a4fc <_fflush_r+0xc>
 800a548:	4b05      	ldr	r3, [pc, #20]	; (800a560 <_fflush_r+0x70>)
 800a54a:	429c      	cmp	r4, r3
 800a54c:	d101      	bne.n	800a552 <_fflush_r+0x62>
 800a54e:	68ac      	ldr	r4, [r5, #8]
 800a550:	e7df      	b.n	800a512 <_fflush_r+0x22>
 800a552:	4b04      	ldr	r3, [pc, #16]	; (800a564 <_fflush_r+0x74>)
 800a554:	429c      	cmp	r4, r3
 800a556:	bf08      	it	eq
 800a558:	68ec      	ldreq	r4, [r5, #12]
 800a55a:	e7da      	b.n	800a512 <_fflush_r+0x22>
 800a55c:	0800b984 	.word	0x0800b984
 800a560:	0800b9a4 	.word	0x0800b9a4
 800a564:	0800b964 	.word	0x0800b964

0800a568 <std>:
 800a568:	2300      	movs	r3, #0
 800a56a:	b510      	push	{r4, lr}
 800a56c:	4604      	mov	r4, r0
 800a56e:	e9c0 3300 	strd	r3, r3, [r0]
 800a572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a576:	6083      	str	r3, [r0, #8]
 800a578:	8181      	strh	r1, [r0, #12]
 800a57a:	6643      	str	r3, [r0, #100]	; 0x64
 800a57c:	81c2      	strh	r2, [r0, #14]
 800a57e:	6183      	str	r3, [r0, #24]
 800a580:	4619      	mov	r1, r3
 800a582:	2208      	movs	r2, #8
 800a584:	305c      	adds	r0, #92	; 0x5c
 800a586:	f7fd fb69 	bl	8007c5c <memset>
 800a58a:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <std+0x38>)
 800a58c:	6263      	str	r3, [r4, #36]	; 0x24
 800a58e:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <std+0x3c>)
 800a590:	62a3      	str	r3, [r4, #40]	; 0x28
 800a592:	4b05      	ldr	r3, [pc, #20]	; (800a5a8 <std+0x40>)
 800a594:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a596:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <std+0x44>)
 800a598:	6224      	str	r4, [r4, #32]
 800a59a:	6323      	str	r3, [r4, #48]	; 0x30
 800a59c:	bd10      	pop	{r4, pc}
 800a59e:	bf00      	nop
 800a5a0:	0800a8bd 	.word	0x0800a8bd
 800a5a4:	0800a8df 	.word	0x0800a8df
 800a5a8:	0800a917 	.word	0x0800a917
 800a5ac:	0800a93b 	.word	0x0800a93b

0800a5b0 <_cleanup_r>:
 800a5b0:	4901      	ldr	r1, [pc, #4]	; (800a5b8 <_cleanup_r+0x8>)
 800a5b2:	f000 b8af 	b.w	800a714 <_fwalk_reent>
 800a5b6:	bf00      	nop
 800a5b8:	0800a4f1 	.word	0x0800a4f1

0800a5bc <__sfmoreglue>:
 800a5bc:	b570      	push	{r4, r5, r6, lr}
 800a5be:	2268      	movs	r2, #104	; 0x68
 800a5c0:	1e4d      	subs	r5, r1, #1
 800a5c2:	4355      	muls	r5, r2
 800a5c4:	460e      	mov	r6, r1
 800a5c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5ca:	f7ff fa65 	bl	8009a98 <_malloc_r>
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	b140      	cbz	r0, 800a5e4 <__sfmoreglue+0x28>
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	e9c0 1600 	strd	r1, r6, [r0]
 800a5d8:	300c      	adds	r0, #12
 800a5da:	60a0      	str	r0, [r4, #8]
 800a5dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5e0:	f7fd fb3c 	bl	8007c5c <memset>
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	bd70      	pop	{r4, r5, r6, pc}

0800a5e8 <__sfp_lock_acquire>:
 800a5e8:	4801      	ldr	r0, [pc, #4]	; (800a5f0 <__sfp_lock_acquire+0x8>)
 800a5ea:	f000 b8b3 	b.w	800a754 <__retarget_lock_acquire_recursive>
 800a5ee:	bf00      	nop
 800a5f0:	20000839 	.word	0x20000839

0800a5f4 <__sfp_lock_release>:
 800a5f4:	4801      	ldr	r0, [pc, #4]	; (800a5fc <__sfp_lock_release+0x8>)
 800a5f6:	f000 b8ae 	b.w	800a756 <__retarget_lock_release_recursive>
 800a5fa:	bf00      	nop
 800a5fc:	20000839 	.word	0x20000839

0800a600 <__sinit_lock_acquire>:
 800a600:	4801      	ldr	r0, [pc, #4]	; (800a608 <__sinit_lock_acquire+0x8>)
 800a602:	f000 b8a7 	b.w	800a754 <__retarget_lock_acquire_recursive>
 800a606:	bf00      	nop
 800a608:	2000083a 	.word	0x2000083a

0800a60c <__sinit_lock_release>:
 800a60c:	4801      	ldr	r0, [pc, #4]	; (800a614 <__sinit_lock_release+0x8>)
 800a60e:	f000 b8a2 	b.w	800a756 <__retarget_lock_release_recursive>
 800a612:	bf00      	nop
 800a614:	2000083a 	.word	0x2000083a

0800a618 <__sinit>:
 800a618:	b510      	push	{r4, lr}
 800a61a:	4604      	mov	r4, r0
 800a61c:	f7ff fff0 	bl	800a600 <__sinit_lock_acquire>
 800a620:	69a3      	ldr	r3, [r4, #24]
 800a622:	b11b      	cbz	r3, 800a62c <__sinit+0x14>
 800a624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a628:	f7ff bff0 	b.w	800a60c <__sinit_lock_release>
 800a62c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a630:	6523      	str	r3, [r4, #80]	; 0x50
 800a632:	4b13      	ldr	r3, [pc, #76]	; (800a680 <__sinit+0x68>)
 800a634:	4a13      	ldr	r2, [pc, #76]	; (800a684 <__sinit+0x6c>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	62a2      	str	r2, [r4, #40]	; 0x28
 800a63a:	42a3      	cmp	r3, r4
 800a63c:	bf04      	itt	eq
 800a63e:	2301      	moveq	r3, #1
 800a640:	61a3      	streq	r3, [r4, #24]
 800a642:	4620      	mov	r0, r4
 800a644:	f000 f820 	bl	800a688 <__sfp>
 800a648:	6060      	str	r0, [r4, #4]
 800a64a:	4620      	mov	r0, r4
 800a64c:	f000 f81c 	bl	800a688 <__sfp>
 800a650:	60a0      	str	r0, [r4, #8]
 800a652:	4620      	mov	r0, r4
 800a654:	f000 f818 	bl	800a688 <__sfp>
 800a658:	2200      	movs	r2, #0
 800a65a:	60e0      	str	r0, [r4, #12]
 800a65c:	2104      	movs	r1, #4
 800a65e:	6860      	ldr	r0, [r4, #4]
 800a660:	f7ff ff82 	bl	800a568 <std>
 800a664:	68a0      	ldr	r0, [r4, #8]
 800a666:	2201      	movs	r2, #1
 800a668:	2109      	movs	r1, #9
 800a66a:	f7ff ff7d 	bl	800a568 <std>
 800a66e:	68e0      	ldr	r0, [r4, #12]
 800a670:	2202      	movs	r2, #2
 800a672:	2112      	movs	r1, #18
 800a674:	f7ff ff78 	bl	800a568 <std>
 800a678:	2301      	movs	r3, #1
 800a67a:	61a3      	str	r3, [r4, #24]
 800a67c:	e7d2      	b.n	800a624 <__sinit+0xc>
 800a67e:	bf00      	nop
 800a680:	0800b5ec 	.word	0x0800b5ec
 800a684:	0800a5b1 	.word	0x0800a5b1

0800a688 <__sfp>:
 800a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68a:	4607      	mov	r7, r0
 800a68c:	f7ff ffac 	bl	800a5e8 <__sfp_lock_acquire>
 800a690:	4b1e      	ldr	r3, [pc, #120]	; (800a70c <__sfp+0x84>)
 800a692:	681e      	ldr	r6, [r3, #0]
 800a694:	69b3      	ldr	r3, [r6, #24]
 800a696:	b913      	cbnz	r3, 800a69e <__sfp+0x16>
 800a698:	4630      	mov	r0, r6
 800a69a:	f7ff ffbd 	bl	800a618 <__sinit>
 800a69e:	3648      	adds	r6, #72	; 0x48
 800a6a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	d503      	bpl.n	800a6b0 <__sfp+0x28>
 800a6a8:	6833      	ldr	r3, [r6, #0]
 800a6aa:	b30b      	cbz	r3, 800a6f0 <__sfp+0x68>
 800a6ac:	6836      	ldr	r6, [r6, #0]
 800a6ae:	e7f7      	b.n	800a6a0 <__sfp+0x18>
 800a6b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6b4:	b9d5      	cbnz	r5, 800a6ec <__sfp+0x64>
 800a6b6:	4b16      	ldr	r3, [pc, #88]	; (800a710 <__sfp+0x88>)
 800a6b8:	60e3      	str	r3, [r4, #12]
 800a6ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6be:	6665      	str	r5, [r4, #100]	; 0x64
 800a6c0:	f000 f847 	bl	800a752 <__retarget_lock_init_recursive>
 800a6c4:	f7ff ff96 	bl	800a5f4 <__sfp_lock_release>
 800a6c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6d0:	6025      	str	r5, [r4, #0]
 800a6d2:	61a5      	str	r5, [r4, #24]
 800a6d4:	2208      	movs	r2, #8
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6dc:	f7fd fabe 	bl	8007c5c <memset>
 800a6e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ec:	3468      	adds	r4, #104	; 0x68
 800a6ee:	e7d9      	b.n	800a6a4 <__sfp+0x1c>
 800a6f0:	2104      	movs	r1, #4
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	f7ff ff62 	bl	800a5bc <__sfmoreglue>
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	6030      	str	r0, [r6, #0]
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	d1d5      	bne.n	800a6ac <__sfp+0x24>
 800a700:	f7ff ff78 	bl	800a5f4 <__sfp_lock_release>
 800a704:	230c      	movs	r3, #12
 800a706:	603b      	str	r3, [r7, #0]
 800a708:	e7ee      	b.n	800a6e8 <__sfp+0x60>
 800a70a:	bf00      	nop
 800a70c:	0800b5ec 	.word	0x0800b5ec
 800a710:	ffff0001 	.word	0xffff0001

0800a714 <_fwalk_reent>:
 800a714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a718:	4606      	mov	r6, r0
 800a71a:	4688      	mov	r8, r1
 800a71c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a720:	2700      	movs	r7, #0
 800a722:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a726:	f1b9 0901 	subs.w	r9, r9, #1
 800a72a:	d505      	bpl.n	800a738 <_fwalk_reent+0x24>
 800a72c:	6824      	ldr	r4, [r4, #0]
 800a72e:	2c00      	cmp	r4, #0
 800a730:	d1f7      	bne.n	800a722 <_fwalk_reent+0xe>
 800a732:	4638      	mov	r0, r7
 800a734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a738:	89ab      	ldrh	r3, [r5, #12]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d907      	bls.n	800a74e <_fwalk_reent+0x3a>
 800a73e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a742:	3301      	adds	r3, #1
 800a744:	d003      	beq.n	800a74e <_fwalk_reent+0x3a>
 800a746:	4629      	mov	r1, r5
 800a748:	4630      	mov	r0, r6
 800a74a:	47c0      	blx	r8
 800a74c:	4307      	orrs	r7, r0
 800a74e:	3568      	adds	r5, #104	; 0x68
 800a750:	e7e9      	b.n	800a726 <_fwalk_reent+0x12>

0800a752 <__retarget_lock_init_recursive>:
 800a752:	4770      	bx	lr

0800a754 <__retarget_lock_acquire_recursive>:
 800a754:	4770      	bx	lr

0800a756 <__retarget_lock_release_recursive>:
 800a756:	4770      	bx	lr

0800a758 <__swhatbuf_r>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	460e      	mov	r6, r1
 800a75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a760:	2900      	cmp	r1, #0
 800a762:	b096      	sub	sp, #88	; 0x58
 800a764:	4614      	mov	r4, r2
 800a766:	461d      	mov	r5, r3
 800a768:	da08      	bge.n	800a77c <__swhatbuf_r+0x24>
 800a76a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	602a      	str	r2, [r5, #0]
 800a772:	061a      	lsls	r2, r3, #24
 800a774:	d410      	bmi.n	800a798 <__swhatbuf_r+0x40>
 800a776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a77a:	e00e      	b.n	800a79a <__swhatbuf_r+0x42>
 800a77c:	466a      	mov	r2, sp
 800a77e:	f000 f903 	bl	800a988 <_fstat_r>
 800a782:	2800      	cmp	r0, #0
 800a784:	dbf1      	blt.n	800a76a <__swhatbuf_r+0x12>
 800a786:	9a01      	ldr	r2, [sp, #4]
 800a788:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a78c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a790:	425a      	negs	r2, r3
 800a792:	415a      	adcs	r2, r3
 800a794:	602a      	str	r2, [r5, #0]
 800a796:	e7ee      	b.n	800a776 <__swhatbuf_r+0x1e>
 800a798:	2340      	movs	r3, #64	; 0x40
 800a79a:	2000      	movs	r0, #0
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	b016      	add	sp, #88	; 0x58
 800a7a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7a4 <__smakebuf_r>:
 800a7a4:	898b      	ldrh	r3, [r1, #12]
 800a7a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7a8:	079d      	lsls	r5, r3, #30
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	d507      	bpl.n	800a7c0 <__smakebuf_r+0x1c>
 800a7b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	6123      	str	r3, [r4, #16]
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	6163      	str	r3, [r4, #20]
 800a7bc:	b002      	add	sp, #8
 800a7be:	bd70      	pop	{r4, r5, r6, pc}
 800a7c0:	ab01      	add	r3, sp, #4
 800a7c2:	466a      	mov	r2, sp
 800a7c4:	f7ff ffc8 	bl	800a758 <__swhatbuf_r>
 800a7c8:	9900      	ldr	r1, [sp, #0]
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	f7ff f963 	bl	8009a98 <_malloc_r>
 800a7d2:	b948      	cbnz	r0, 800a7e8 <__smakebuf_r+0x44>
 800a7d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7d8:	059a      	lsls	r2, r3, #22
 800a7da:	d4ef      	bmi.n	800a7bc <__smakebuf_r+0x18>
 800a7dc:	f023 0303 	bic.w	r3, r3, #3
 800a7e0:	f043 0302 	orr.w	r3, r3, #2
 800a7e4:	81a3      	strh	r3, [r4, #12]
 800a7e6:	e7e3      	b.n	800a7b0 <__smakebuf_r+0xc>
 800a7e8:	4b0d      	ldr	r3, [pc, #52]	; (800a820 <__smakebuf_r+0x7c>)
 800a7ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7ec:	89a3      	ldrh	r3, [r4, #12]
 800a7ee:	6020      	str	r0, [r4, #0]
 800a7f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7f4:	81a3      	strh	r3, [r4, #12]
 800a7f6:	9b00      	ldr	r3, [sp, #0]
 800a7f8:	6163      	str	r3, [r4, #20]
 800a7fa:	9b01      	ldr	r3, [sp, #4]
 800a7fc:	6120      	str	r0, [r4, #16]
 800a7fe:	b15b      	cbz	r3, 800a818 <__smakebuf_r+0x74>
 800a800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a804:	4630      	mov	r0, r6
 800a806:	f000 f8d1 	bl	800a9ac <_isatty_r>
 800a80a:	b128      	cbz	r0, 800a818 <__smakebuf_r+0x74>
 800a80c:	89a3      	ldrh	r3, [r4, #12]
 800a80e:	f023 0303 	bic.w	r3, r3, #3
 800a812:	f043 0301 	orr.w	r3, r3, #1
 800a816:	81a3      	strh	r3, [r4, #12]
 800a818:	89a0      	ldrh	r0, [r4, #12]
 800a81a:	4305      	orrs	r5, r0
 800a81c:	81a5      	strh	r5, [r4, #12]
 800a81e:	e7cd      	b.n	800a7bc <__smakebuf_r+0x18>
 800a820:	0800a5b1 	.word	0x0800a5b1

0800a824 <_malloc_usable_size_r>:
 800a824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a828:	1f18      	subs	r0, r3, #4
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	bfbc      	itt	lt
 800a82e:	580b      	ldrlt	r3, [r1, r0]
 800a830:	18c0      	addlt	r0, r0, r3
 800a832:	4770      	bx	lr

0800a834 <_raise_r>:
 800a834:	291f      	cmp	r1, #31
 800a836:	b538      	push	{r3, r4, r5, lr}
 800a838:	4604      	mov	r4, r0
 800a83a:	460d      	mov	r5, r1
 800a83c:	d904      	bls.n	800a848 <_raise_r+0x14>
 800a83e:	2316      	movs	r3, #22
 800a840:	6003      	str	r3, [r0, #0]
 800a842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a846:	bd38      	pop	{r3, r4, r5, pc}
 800a848:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a84a:	b112      	cbz	r2, 800a852 <_raise_r+0x1e>
 800a84c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a850:	b94b      	cbnz	r3, 800a866 <_raise_r+0x32>
 800a852:	4620      	mov	r0, r4
 800a854:	f000 f830 	bl	800a8b8 <_getpid_r>
 800a858:	462a      	mov	r2, r5
 800a85a:	4601      	mov	r1, r0
 800a85c:	4620      	mov	r0, r4
 800a85e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a862:	f000 b817 	b.w	800a894 <_kill_r>
 800a866:	2b01      	cmp	r3, #1
 800a868:	d00a      	beq.n	800a880 <_raise_r+0x4c>
 800a86a:	1c59      	adds	r1, r3, #1
 800a86c:	d103      	bne.n	800a876 <_raise_r+0x42>
 800a86e:	2316      	movs	r3, #22
 800a870:	6003      	str	r3, [r0, #0]
 800a872:	2001      	movs	r0, #1
 800a874:	e7e7      	b.n	800a846 <_raise_r+0x12>
 800a876:	2400      	movs	r4, #0
 800a878:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a87c:	4628      	mov	r0, r5
 800a87e:	4798      	blx	r3
 800a880:	2000      	movs	r0, #0
 800a882:	e7e0      	b.n	800a846 <_raise_r+0x12>

0800a884 <raise>:
 800a884:	4b02      	ldr	r3, [pc, #8]	; (800a890 <raise+0xc>)
 800a886:	4601      	mov	r1, r0
 800a888:	6818      	ldr	r0, [r3, #0]
 800a88a:	f7ff bfd3 	b.w	800a834 <_raise_r>
 800a88e:	bf00      	nop
 800a890:	20000044 	.word	0x20000044

0800a894 <_kill_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	4d07      	ldr	r5, [pc, #28]	; (800a8b4 <_kill_r+0x20>)
 800a898:	2300      	movs	r3, #0
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	4611      	mov	r1, r2
 800a8a0:	602b      	str	r3, [r5, #0]
 800a8a2:	f7f8 fab3 	bl	8002e0c <_kill>
 800a8a6:	1c43      	adds	r3, r0, #1
 800a8a8:	d102      	bne.n	800a8b0 <_kill_r+0x1c>
 800a8aa:	682b      	ldr	r3, [r5, #0]
 800a8ac:	b103      	cbz	r3, 800a8b0 <_kill_r+0x1c>
 800a8ae:	6023      	str	r3, [r4, #0]
 800a8b0:	bd38      	pop	{r3, r4, r5, pc}
 800a8b2:	bf00      	nop
 800a8b4:	20000834 	.word	0x20000834

0800a8b8 <_getpid_r>:
 800a8b8:	f7f8 baa0 	b.w	8002dfc <_getpid>

0800a8bc <__sread>:
 800a8bc:	b510      	push	{r4, lr}
 800a8be:	460c      	mov	r4, r1
 800a8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c4:	f000 f894 	bl	800a9f0 <_read_r>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	bfab      	itete	ge
 800a8cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a8d0:	181b      	addge	r3, r3, r0
 800a8d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8d6:	bfac      	ite	ge
 800a8d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8da:	81a3      	strhlt	r3, [r4, #12]
 800a8dc:	bd10      	pop	{r4, pc}

0800a8de <__swrite>:
 800a8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e2:	461f      	mov	r7, r3
 800a8e4:	898b      	ldrh	r3, [r1, #12]
 800a8e6:	05db      	lsls	r3, r3, #23
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	d505      	bpl.n	800a8fc <__swrite+0x1e>
 800a8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f000 f868 	bl	800a9cc <_lseek_r>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a906:	81a3      	strh	r3, [r4, #12]
 800a908:	4632      	mov	r2, r6
 800a90a:	463b      	mov	r3, r7
 800a90c:	4628      	mov	r0, r5
 800a90e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a912:	f000 b817 	b.w	800a944 <_write_r>

0800a916 <__sseek>:
 800a916:	b510      	push	{r4, lr}
 800a918:	460c      	mov	r4, r1
 800a91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91e:	f000 f855 	bl	800a9cc <_lseek_r>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	bf15      	itete	ne
 800a928:	6560      	strne	r0, [r4, #84]	; 0x54
 800a92a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a92e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a932:	81a3      	strheq	r3, [r4, #12]
 800a934:	bf18      	it	ne
 800a936:	81a3      	strhne	r3, [r4, #12]
 800a938:	bd10      	pop	{r4, pc}

0800a93a <__sclose>:
 800a93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93e:	f000 b813 	b.w	800a968 <_close_r>
	...

0800a944 <_write_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	4d07      	ldr	r5, [pc, #28]	; (800a964 <_write_r+0x20>)
 800a948:	4604      	mov	r4, r0
 800a94a:	4608      	mov	r0, r1
 800a94c:	4611      	mov	r1, r2
 800a94e:	2200      	movs	r2, #0
 800a950:	602a      	str	r2, [r5, #0]
 800a952:	461a      	mov	r2, r3
 800a954:	f7f8 fa91 	bl	8002e7a <_write>
 800a958:	1c43      	adds	r3, r0, #1
 800a95a:	d102      	bne.n	800a962 <_write_r+0x1e>
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	b103      	cbz	r3, 800a962 <_write_r+0x1e>
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	20000834 	.word	0x20000834

0800a968 <_close_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	4d06      	ldr	r5, [pc, #24]	; (800a984 <_close_r+0x1c>)
 800a96c:	2300      	movs	r3, #0
 800a96e:	4604      	mov	r4, r0
 800a970:	4608      	mov	r0, r1
 800a972:	602b      	str	r3, [r5, #0]
 800a974:	f7f8 fa9d 	bl	8002eb2 <_close>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_close_r+0x1a>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_close_r+0x1a>
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	20000834 	.word	0x20000834

0800a988 <_fstat_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4d07      	ldr	r5, [pc, #28]	; (800a9a8 <_fstat_r+0x20>)
 800a98c:	2300      	movs	r3, #0
 800a98e:	4604      	mov	r4, r0
 800a990:	4608      	mov	r0, r1
 800a992:	4611      	mov	r1, r2
 800a994:	602b      	str	r3, [r5, #0]
 800a996:	f7f8 fa98 	bl	8002eca <_fstat>
 800a99a:	1c43      	adds	r3, r0, #1
 800a99c:	d102      	bne.n	800a9a4 <_fstat_r+0x1c>
 800a99e:	682b      	ldr	r3, [r5, #0]
 800a9a0:	b103      	cbz	r3, 800a9a4 <_fstat_r+0x1c>
 800a9a2:	6023      	str	r3, [r4, #0]
 800a9a4:	bd38      	pop	{r3, r4, r5, pc}
 800a9a6:	bf00      	nop
 800a9a8:	20000834 	.word	0x20000834

0800a9ac <_isatty_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	4d06      	ldr	r5, [pc, #24]	; (800a9c8 <_isatty_r+0x1c>)
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	4608      	mov	r0, r1
 800a9b6:	602b      	str	r3, [r5, #0]
 800a9b8:	f7f8 fa97 	bl	8002eea <_isatty>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	d102      	bne.n	800a9c6 <_isatty_r+0x1a>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	b103      	cbz	r3, 800a9c6 <_isatty_r+0x1a>
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	20000834 	.word	0x20000834

0800a9cc <_lseek_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4d07      	ldr	r5, [pc, #28]	; (800a9ec <_lseek_r+0x20>)
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	4608      	mov	r0, r1
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	602a      	str	r2, [r5, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	f7f8 fa90 	bl	8002f00 <_lseek>
 800a9e0:	1c43      	adds	r3, r0, #1
 800a9e2:	d102      	bne.n	800a9ea <_lseek_r+0x1e>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	b103      	cbz	r3, 800a9ea <_lseek_r+0x1e>
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
 800a9ec:	20000834 	.word	0x20000834

0800a9f0 <_read_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	4d07      	ldr	r5, [pc, #28]	; (800aa10 <_read_r+0x20>)
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	4608      	mov	r0, r1
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	602a      	str	r2, [r5, #0]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f7f8 fa1e 	bl	8002e40 <_read>
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	d102      	bne.n	800aa0e <_read_r+0x1e>
 800aa08:	682b      	ldr	r3, [r5, #0]
 800aa0a:	b103      	cbz	r3, 800aa0e <_read_r+0x1e>
 800aa0c:	6023      	str	r3, [r4, #0]
 800aa0e:	bd38      	pop	{r3, r4, r5, pc}
 800aa10:	20000834 	.word	0x20000834

0800aa14 <cosf>:
 800aa14:	ee10 3a10 	vmov	r3, s0
 800aa18:	b507      	push	{r0, r1, r2, lr}
 800aa1a:	4a1e      	ldr	r2, [pc, #120]	; (800aa94 <cosf+0x80>)
 800aa1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa20:	4293      	cmp	r3, r2
 800aa22:	dc06      	bgt.n	800aa32 <cosf+0x1e>
 800aa24:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800aa98 <cosf+0x84>
 800aa28:	b003      	add	sp, #12
 800aa2a:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa2e:	f000 b9b7 	b.w	800ada0 <__kernel_cosf>
 800aa32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aa36:	db04      	blt.n	800aa42 <cosf+0x2e>
 800aa38:	ee30 0a40 	vsub.f32	s0, s0, s0
 800aa3c:	b003      	add	sp, #12
 800aa3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa42:	4668      	mov	r0, sp
 800aa44:	f000 f870 	bl	800ab28 <__ieee754_rem_pio2f>
 800aa48:	f000 0003 	and.w	r0, r0, #3
 800aa4c:	2801      	cmp	r0, #1
 800aa4e:	d009      	beq.n	800aa64 <cosf+0x50>
 800aa50:	2802      	cmp	r0, #2
 800aa52:	d010      	beq.n	800aa76 <cosf+0x62>
 800aa54:	b9b0      	cbnz	r0, 800aa84 <cosf+0x70>
 800aa56:	eddd 0a01 	vldr	s1, [sp, #4]
 800aa5a:	ed9d 0a00 	vldr	s0, [sp]
 800aa5e:	f000 f99f 	bl	800ada0 <__kernel_cosf>
 800aa62:	e7eb      	b.n	800aa3c <cosf+0x28>
 800aa64:	eddd 0a01 	vldr	s1, [sp, #4]
 800aa68:	ed9d 0a00 	vldr	s0, [sp]
 800aa6c:	f000 fc6e 	bl	800b34c <__kernel_sinf>
 800aa70:	eeb1 0a40 	vneg.f32	s0, s0
 800aa74:	e7e2      	b.n	800aa3c <cosf+0x28>
 800aa76:	eddd 0a01 	vldr	s1, [sp, #4]
 800aa7a:	ed9d 0a00 	vldr	s0, [sp]
 800aa7e:	f000 f98f 	bl	800ada0 <__kernel_cosf>
 800aa82:	e7f5      	b.n	800aa70 <cosf+0x5c>
 800aa84:	eddd 0a01 	vldr	s1, [sp, #4]
 800aa88:	ed9d 0a00 	vldr	s0, [sp]
 800aa8c:	2001      	movs	r0, #1
 800aa8e:	f000 fc5d 	bl	800b34c <__kernel_sinf>
 800aa92:	e7d3      	b.n	800aa3c <cosf+0x28>
 800aa94:	3f490fd8 	.word	0x3f490fd8
 800aa98:	00000000 	.word	0x00000000

0800aa9c <sinf>:
 800aa9c:	ee10 3a10 	vmov	r3, s0
 800aaa0:	b507      	push	{r0, r1, r2, lr}
 800aaa2:	4a1f      	ldr	r2, [pc, #124]	; (800ab20 <sinf+0x84>)
 800aaa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	dc07      	bgt.n	800aabc <sinf+0x20>
 800aaac:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ab24 <sinf+0x88>
 800aab0:	2000      	movs	r0, #0
 800aab2:	b003      	add	sp, #12
 800aab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aab8:	f000 bc48 	b.w	800b34c <__kernel_sinf>
 800aabc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aac0:	db04      	blt.n	800aacc <sinf+0x30>
 800aac2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800aac6:	b003      	add	sp, #12
 800aac8:	f85d fb04 	ldr.w	pc, [sp], #4
 800aacc:	4668      	mov	r0, sp
 800aace:	f000 f82b 	bl	800ab28 <__ieee754_rem_pio2f>
 800aad2:	f000 0003 	and.w	r0, r0, #3
 800aad6:	2801      	cmp	r0, #1
 800aad8:	d00a      	beq.n	800aaf0 <sinf+0x54>
 800aada:	2802      	cmp	r0, #2
 800aadc:	d00f      	beq.n	800aafe <sinf+0x62>
 800aade:	b9c0      	cbnz	r0, 800ab12 <sinf+0x76>
 800aae0:	eddd 0a01 	vldr	s1, [sp, #4]
 800aae4:	ed9d 0a00 	vldr	s0, [sp]
 800aae8:	2001      	movs	r0, #1
 800aaea:	f000 fc2f 	bl	800b34c <__kernel_sinf>
 800aaee:	e7ea      	b.n	800aac6 <sinf+0x2a>
 800aaf0:	eddd 0a01 	vldr	s1, [sp, #4]
 800aaf4:	ed9d 0a00 	vldr	s0, [sp]
 800aaf8:	f000 f952 	bl	800ada0 <__kernel_cosf>
 800aafc:	e7e3      	b.n	800aac6 <sinf+0x2a>
 800aafe:	eddd 0a01 	vldr	s1, [sp, #4]
 800ab02:	ed9d 0a00 	vldr	s0, [sp]
 800ab06:	2001      	movs	r0, #1
 800ab08:	f000 fc20 	bl	800b34c <__kernel_sinf>
 800ab0c:	eeb1 0a40 	vneg.f32	s0, s0
 800ab10:	e7d9      	b.n	800aac6 <sinf+0x2a>
 800ab12:	eddd 0a01 	vldr	s1, [sp, #4]
 800ab16:	ed9d 0a00 	vldr	s0, [sp]
 800ab1a:	f000 f941 	bl	800ada0 <__kernel_cosf>
 800ab1e:	e7f5      	b.n	800ab0c <sinf+0x70>
 800ab20:	3f490fd8 	.word	0x3f490fd8
 800ab24:	00000000 	.word	0x00000000

0800ab28 <__ieee754_rem_pio2f>:
 800ab28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab2a:	ee10 6a10 	vmov	r6, s0
 800ab2e:	4b8e      	ldr	r3, [pc, #568]	; (800ad68 <__ieee754_rem_pio2f+0x240>)
 800ab30:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ab34:	429d      	cmp	r5, r3
 800ab36:	b087      	sub	sp, #28
 800ab38:	eef0 7a40 	vmov.f32	s15, s0
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	dc05      	bgt.n	800ab4c <__ieee754_rem_pio2f+0x24>
 800ab40:	2300      	movs	r3, #0
 800ab42:	ed80 0a00 	vstr	s0, [r0]
 800ab46:	6043      	str	r3, [r0, #4]
 800ab48:	2000      	movs	r0, #0
 800ab4a:	e01a      	b.n	800ab82 <__ieee754_rem_pio2f+0x5a>
 800ab4c:	4b87      	ldr	r3, [pc, #540]	; (800ad6c <__ieee754_rem_pio2f+0x244>)
 800ab4e:	429d      	cmp	r5, r3
 800ab50:	dc46      	bgt.n	800abe0 <__ieee754_rem_pio2f+0xb8>
 800ab52:	2e00      	cmp	r6, #0
 800ab54:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800ad70 <__ieee754_rem_pio2f+0x248>
 800ab58:	4b86      	ldr	r3, [pc, #536]	; (800ad74 <__ieee754_rem_pio2f+0x24c>)
 800ab5a:	f025 050f 	bic.w	r5, r5, #15
 800ab5e:	dd1f      	ble.n	800aba0 <__ieee754_rem_pio2f+0x78>
 800ab60:	429d      	cmp	r5, r3
 800ab62:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ab66:	d00e      	beq.n	800ab86 <__ieee754_rem_pio2f+0x5e>
 800ab68:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800ad78 <__ieee754_rem_pio2f+0x250>
 800ab6c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800ab70:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ab74:	ed80 0a00 	vstr	s0, [r0]
 800ab78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab7c:	2001      	movs	r0, #1
 800ab7e:	edc4 7a01 	vstr	s15, [r4, #4]
 800ab82:	b007      	add	sp, #28
 800ab84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab86:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800ad7c <__ieee754_rem_pio2f+0x254>
 800ab8a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800ad80 <__ieee754_rem_pio2f+0x258>
 800ab8e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ab92:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ab96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ab9a:	edc0 6a00 	vstr	s13, [r0]
 800ab9e:	e7eb      	b.n	800ab78 <__ieee754_rem_pio2f+0x50>
 800aba0:	429d      	cmp	r5, r3
 800aba2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aba6:	d00e      	beq.n	800abc6 <__ieee754_rem_pio2f+0x9e>
 800aba8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800ad78 <__ieee754_rem_pio2f+0x250>
 800abac:	ee37 0a87 	vadd.f32	s0, s15, s14
 800abb0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800abb4:	ed80 0a00 	vstr	s0, [r0]
 800abb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abc0:	edc4 7a01 	vstr	s15, [r4, #4]
 800abc4:	e7dd      	b.n	800ab82 <__ieee754_rem_pio2f+0x5a>
 800abc6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800ad7c <__ieee754_rem_pio2f+0x254>
 800abca:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800ad80 <__ieee754_rem_pio2f+0x258>
 800abce:	ee77 7a80 	vadd.f32	s15, s15, s0
 800abd2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800abd6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800abda:	edc0 6a00 	vstr	s13, [r0]
 800abde:	e7eb      	b.n	800abb8 <__ieee754_rem_pio2f+0x90>
 800abe0:	4b68      	ldr	r3, [pc, #416]	; (800ad84 <__ieee754_rem_pio2f+0x25c>)
 800abe2:	429d      	cmp	r5, r3
 800abe4:	dc72      	bgt.n	800accc <__ieee754_rem_pio2f+0x1a4>
 800abe6:	f000 fbf9 	bl	800b3dc <fabsf>
 800abea:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ad88 <__ieee754_rem_pio2f+0x260>
 800abee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800abf2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800abf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abfe:	ee17 0a90 	vmov	r0, s15
 800ac02:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ad70 <__ieee754_rem_pio2f+0x248>
 800ac06:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ac0a:	281f      	cmp	r0, #31
 800ac0c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800ad78 <__ieee754_rem_pio2f+0x250>
 800ac10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac14:	eeb1 6a47 	vneg.f32	s12, s14
 800ac18:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ac1c:	ee16 2a90 	vmov	r2, s13
 800ac20:	dc1c      	bgt.n	800ac5c <__ieee754_rem_pio2f+0x134>
 800ac22:	495a      	ldr	r1, [pc, #360]	; (800ad8c <__ieee754_rem_pio2f+0x264>)
 800ac24:	1e47      	subs	r7, r0, #1
 800ac26:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800ac2a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ac2e:	428b      	cmp	r3, r1
 800ac30:	d014      	beq.n	800ac5c <__ieee754_rem_pio2f+0x134>
 800ac32:	6022      	str	r2, [r4, #0]
 800ac34:	ed94 7a00 	vldr	s14, [r4]
 800ac38:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ac3c:	2e00      	cmp	r6, #0
 800ac3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ac42:	ed84 0a01 	vstr	s0, [r4, #4]
 800ac46:	da9c      	bge.n	800ab82 <__ieee754_rem_pio2f+0x5a>
 800ac48:	eeb1 7a47 	vneg.f32	s14, s14
 800ac4c:	eeb1 0a40 	vneg.f32	s0, s0
 800ac50:	ed84 7a00 	vstr	s14, [r4]
 800ac54:	ed84 0a01 	vstr	s0, [r4, #4]
 800ac58:	4240      	negs	r0, r0
 800ac5a:	e792      	b.n	800ab82 <__ieee754_rem_pio2f+0x5a>
 800ac5c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ac60:	15eb      	asrs	r3, r5, #23
 800ac62:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800ac66:	2d08      	cmp	r5, #8
 800ac68:	dde3      	ble.n	800ac32 <__ieee754_rem_pio2f+0x10a>
 800ac6a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ad7c <__ieee754_rem_pio2f+0x254>
 800ac6e:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ad80 <__ieee754_rem_pio2f+0x258>
 800ac72:	eef0 6a40 	vmov.f32	s13, s0
 800ac76:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ac7a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ac7e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800ac82:	eef0 7a40 	vmov.f32	s15, s0
 800ac86:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800ac8a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ac8e:	ee15 2a90 	vmov	r2, s11
 800ac92:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ac96:	1a5b      	subs	r3, r3, r1
 800ac98:	2b19      	cmp	r3, #25
 800ac9a:	dc04      	bgt.n	800aca6 <__ieee754_rem_pio2f+0x17e>
 800ac9c:	edc4 5a00 	vstr	s11, [r4]
 800aca0:	eeb0 0a66 	vmov.f32	s0, s13
 800aca4:	e7c6      	b.n	800ac34 <__ieee754_rem_pio2f+0x10c>
 800aca6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ad90 <__ieee754_rem_pio2f+0x268>
 800acaa:	eeb0 0a66 	vmov.f32	s0, s13
 800acae:	eea6 0a25 	vfma.f32	s0, s12, s11
 800acb2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800acb6:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ad94 <__ieee754_rem_pio2f+0x26c>
 800acba:	eee6 7a25 	vfma.f32	s15, s12, s11
 800acbe:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800acc2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800acc6:	ed84 7a00 	vstr	s14, [r4]
 800acca:	e7b3      	b.n	800ac34 <__ieee754_rem_pio2f+0x10c>
 800accc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800acd0:	db06      	blt.n	800ace0 <__ieee754_rem_pio2f+0x1b8>
 800acd2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800acd6:	edc0 7a01 	vstr	s15, [r0, #4]
 800acda:	edc0 7a00 	vstr	s15, [r0]
 800acde:	e733      	b.n	800ab48 <__ieee754_rem_pio2f+0x20>
 800ace0:	15ea      	asrs	r2, r5, #23
 800ace2:	3a86      	subs	r2, #134	; 0x86
 800ace4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ace8:	ee07 3a90 	vmov	s15, r3
 800acec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800acf0:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ad98 <__ieee754_rem_pio2f+0x270>
 800acf4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800acf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800acfc:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ad00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ad04:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ad08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ad0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad10:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ad14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ad18:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ad1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad20:	edcd 7a05 	vstr	s15, [sp, #20]
 800ad24:	d11e      	bne.n	800ad64 <__ieee754_rem_pio2f+0x23c>
 800ad26:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ad2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad2e:	bf14      	ite	ne
 800ad30:	2302      	movne	r3, #2
 800ad32:	2301      	moveq	r3, #1
 800ad34:	4919      	ldr	r1, [pc, #100]	; (800ad9c <__ieee754_rem_pio2f+0x274>)
 800ad36:	9101      	str	r1, [sp, #4]
 800ad38:	2102      	movs	r1, #2
 800ad3a:	9100      	str	r1, [sp, #0]
 800ad3c:	a803      	add	r0, sp, #12
 800ad3e:	4621      	mov	r1, r4
 800ad40:	f000 f88e 	bl	800ae60 <__kernel_rem_pio2f>
 800ad44:	2e00      	cmp	r6, #0
 800ad46:	f6bf af1c 	bge.w	800ab82 <__ieee754_rem_pio2f+0x5a>
 800ad4a:	edd4 7a00 	vldr	s15, [r4]
 800ad4e:	eef1 7a67 	vneg.f32	s15, s15
 800ad52:	edc4 7a00 	vstr	s15, [r4]
 800ad56:	edd4 7a01 	vldr	s15, [r4, #4]
 800ad5a:	eef1 7a67 	vneg.f32	s15, s15
 800ad5e:	edc4 7a01 	vstr	s15, [r4, #4]
 800ad62:	e779      	b.n	800ac58 <__ieee754_rem_pio2f+0x130>
 800ad64:	2303      	movs	r3, #3
 800ad66:	e7e5      	b.n	800ad34 <__ieee754_rem_pio2f+0x20c>
 800ad68:	3f490fd8 	.word	0x3f490fd8
 800ad6c:	4016cbe3 	.word	0x4016cbe3
 800ad70:	3fc90f80 	.word	0x3fc90f80
 800ad74:	3fc90fd0 	.word	0x3fc90fd0
 800ad78:	37354443 	.word	0x37354443
 800ad7c:	37354400 	.word	0x37354400
 800ad80:	2e85a308 	.word	0x2e85a308
 800ad84:	43490f80 	.word	0x43490f80
 800ad88:	3f22f984 	.word	0x3f22f984
 800ad8c:	0800b9c4 	.word	0x0800b9c4
 800ad90:	2e85a300 	.word	0x2e85a300
 800ad94:	248d3132 	.word	0x248d3132
 800ad98:	43800000 	.word	0x43800000
 800ad9c:	0800ba44 	.word	0x0800ba44

0800ada0 <__kernel_cosf>:
 800ada0:	ee10 3a10 	vmov	r3, s0
 800ada4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ada8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800adac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800adb0:	da05      	bge.n	800adbe <__kernel_cosf+0x1e>
 800adb2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800adb6:	ee17 2a90 	vmov	r2, s15
 800adba:	2a00      	cmp	r2, #0
 800adbc:	d03d      	beq.n	800ae3a <__kernel_cosf+0x9a>
 800adbe:	ee60 5a00 	vmul.f32	s11, s0, s0
 800adc2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ae40 <__kernel_cosf+0xa0>
 800adc6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800ae44 <__kernel_cosf+0xa4>
 800adca:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800ae48 <__kernel_cosf+0xa8>
 800adce:	4a1f      	ldr	r2, [pc, #124]	; (800ae4c <__kernel_cosf+0xac>)
 800add0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800add4:	4293      	cmp	r3, r2
 800add6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800ae50 <__kernel_cosf+0xb0>
 800adda:	eee7 7a25 	vfma.f32	s15, s14, s11
 800adde:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800ae54 <__kernel_cosf+0xb4>
 800ade2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ade6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800ae58 <__kernel_cosf+0xb8>
 800adea:	eee7 7a25 	vfma.f32	s15, s14, s11
 800adee:	eeb0 7a66 	vmov.f32	s14, s13
 800adf2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800adf6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800adfa:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800adfe:	ee67 6a25 	vmul.f32	s13, s14, s11
 800ae02:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800ae06:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ae0a:	dc04      	bgt.n	800ae16 <__kernel_cosf+0x76>
 800ae0c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ae10:	ee36 0a47 	vsub.f32	s0, s12, s14
 800ae14:	4770      	bx	lr
 800ae16:	4a11      	ldr	r2, [pc, #68]	; (800ae5c <__kernel_cosf+0xbc>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	bfda      	itte	le
 800ae1c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800ae20:	ee06 3a90 	vmovle	s13, r3
 800ae24:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800ae28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ae2c:	ee36 0a66 	vsub.f32	s0, s12, s13
 800ae30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae34:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ae38:	4770      	bx	lr
 800ae3a:	eeb0 0a46 	vmov.f32	s0, s12
 800ae3e:	4770      	bx	lr
 800ae40:	ad47d74e 	.word	0xad47d74e
 800ae44:	310f74f6 	.word	0x310f74f6
 800ae48:	3d2aaaab 	.word	0x3d2aaaab
 800ae4c:	3e999999 	.word	0x3e999999
 800ae50:	b493f27c 	.word	0xb493f27c
 800ae54:	37d00d01 	.word	0x37d00d01
 800ae58:	bab60b61 	.word	0xbab60b61
 800ae5c:	3f480000 	.word	0x3f480000

0800ae60 <__kernel_rem_pio2f>:
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	ed2d 8b04 	vpush	{d8-d9}
 800ae68:	b0d9      	sub	sp, #356	; 0x164
 800ae6a:	4688      	mov	r8, r1
 800ae6c:	9002      	str	r0, [sp, #8]
 800ae6e:	49bb      	ldr	r1, [pc, #748]	; (800b15c <__kernel_rem_pio2f+0x2fc>)
 800ae70:	9866      	ldr	r0, [sp, #408]	; 0x198
 800ae72:	9301      	str	r3, [sp, #4]
 800ae74:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800ae78:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800ae7c:	1e59      	subs	r1, r3, #1
 800ae7e:	1d13      	adds	r3, r2, #4
 800ae80:	db27      	blt.n	800aed2 <__kernel_rem_pio2f+0x72>
 800ae82:	f1b2 0b03 	subs.w	fp, r2, #3
 800ae86:	bf48      	it	mi
 800ae88:	f102 0b04 	addmi.w	fp, r2, #4
 800ae8c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800ae90:	1c45      	adds	r5, r0, #1
 800ae92:	00ec      	lsls	r4, r5, #3
 800ae94:	1a47      	subs	r7, r0, r1
 800ae96:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800b16c <__kernel_rem_pio2f+0x30c>
 800ae9a:	9403      	str	r4, [sp, #12]
 800ae9c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800aea0:	eb0a 0c01 	add.w	ip, sl, r1
 800aea4:	ae1c      	add	r6, sp, #112	; 0x70
 800aea6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800aeaa:	2400      	movs	r4, #0
 800aeac:	4564      	cmp	r4, ip
 800aeae:	dd12      	ble.n	800aed6 <__kernel_rem_pio2f+0x76>
 800aeb0:	9b01      	ldr	r3, [sp, #4]
 800aeb2:	ac1c      	add	r4, sp, #112	; 0x70
 800aeb4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800aeb8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800aebc:	f04f 0c00 	mov.w	ip, #0
 800aec0:	45d4      	cmp	ip, sl
 800aec2:	dc27      	bgt.n	800af14 <__kernel_rem_pio2f+0xb4>
 800aec4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800aec8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800b16c <__kernel_rem_pio2f+0x30c>
 800aecc:	4627      	mov	r7, r4
 800aece:	2600      	movs	r6, #0
 800aed0:	e016      	b.n	800af00 <__kernel_rem_pio2f+0xa0>
 800aed2:	2000      	movs	r0, #0
 800aed4:	e7dc      	b.n	800ae90 <__kernel_rem_pio2f+0x30>
 800aed6:	42e7      	cmn	r7, r4
 800aed8:	bf5d      	ittte	pl
 800aeda:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800aede:	ee07 3a90 	vmovpl	s15, r3
 800aee2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800aee6:	eef0 7a47 	vmovmi.f32	s15, s14
 800aeea:	ece6 7a01 	vstmia	r6!, {s15}
 800aeee:	3401      	adds	r4, #1
 800aef0:	e7dc      	b.n	800aeac <__kernel_rem_pio2f+0x4c>
 800aef2:	ecf9 6a01 	vldmia	r9!, {s13}
 800aef6:	ed97 7a00 	vldr	s14, [r7]
 800aefa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800aefe:	3601      	adds	r6, #1
 800af00:	428e      	cmp	r6, r1
 800af02:	f1a7 0704 	sub.w	r7, r7, #4
 800af06:	ddf4      	ble.n	800aef2 <__kernel_rem_pio2f+0x92>
 800af08:	eceb 7a01 	vstmia	fp!, {s15}
 800af0c:	f10c 0c01 	add.w	ip, ip, #1
 800af10:	3404      	adds	r4, #4
 800af12:	e7d5      	b.n	800aec0 <__kernel_rem_pio2f+0x60>
 800af14:	ab08      	add	r3, sp, #32
 800af16:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800af1a:	eddf 8a93 	vldr	s17, [pc, #588]	; 800b168 <__kernel_rem_pio2f+0x308>
 800af1e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800b164 <__kernel_rem_pio2f+0x304>
 800af22:	9304      	str	r3, [sp, #16]
 800af24:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800af28:	4656      	mov	r6, sl
 800af2a:	00b3      	lsls	r3, r6, #2
 800af2c:	9305      	str	r3, [sp, #20]
 800af2e:	ab58      	add	r3, sp, #352	; 0x160
 800af30:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800af34:	ac08      	add	r4, sp, #32
 800af36:	ab44      	add	r3, sp, #272	; 0x110
 800af38:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800af3c:	46a4      	mov	ip, r4
 800af3e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800af42:	4637      	mov	r7, r6
 800af44:	2f00      	cmp	r7, #0
 800af46:	f1a0 0004 	sub.w	r0, r0, #4
 800af4a:	dc4f      	bgt.n	800afec <__kernel_rem_pio2f+0x18c>
 800af4c:	4628      	mov	r0, r5
 800af4e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800af52:	f000 fa8d 	bl	800b470 <scalbnf>
 800af56:	eeb0 8a40 	vmov.f32	s16, s0
 800af5a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800af5e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800af62:	f000 fa43 	bl	800b3ec <floorf>
 800af66:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800af6a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800af6e:	2d00      	cmp	r5, #0
 800af70:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800af74:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800af78:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800af7c:	ee17 9a90 	vmov	r9, s15
 800af80:	ee38 8a40 	vsub.f32	s16, s16, s0
 800af84:	dd44      	ble.n	800b010 <__kernel_rem_pio2f+0x1b0>
 800af86:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800af8a:	ab08      	add	r3, sp, #32
 800af8c:	f1c5 0e08 	rsb	lr, r5, #8
 800af90:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800af94:	fa47 f00e 	asr.w	r0, r7, lr
 800af98:	4481      	add	r9, r0
 800af9a:	fa00 f00e 	lsl.w	r0, r0, lr
 800af9e:	1a3f      	subs	r7, r7, r0
 800afa0:	f1c5 0007 	rsb	r0, r5, #7
 800afa4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800afa8:	4107      	asrs	r7, r0
 800afaa:	2f00      	cmp	r7, #0
 800afac:	dd3f      	ble.n	800b02e <__kernel_rem_pio2f+0x1ce>
 800afae:	f04f 0e00 	mov.w	lr, #0
 800afb2:	f109 0901 	add.w	r9, r9, #1
 800afb6:	4673      	mov	r3, lr
 800afb8:	4576      	cmp	r6, lr
 800afba:	dc6b      	bgt.n	800b094 <__kernel_rem_pio2f+0x234>
 800afbc:	2d00      	cmp	r5, #0
 800afbe:	dd04      	ble.n	800afca <__kernel_rem_pio2f+0x16a>
 800afc0:	2d01      	cmp	r5, #1
 800afc2:	d078      	beq.n	800b0b6 <__kernel_rem_pio2f+0x256>
 800afc4:	2d02      	cmp	r5, #2
 800afc6:	f000 8081 	beq.w	800b0cc <__kernel_rem_pio2f+0x26c>
 800afca:	2f02      	cmp	r7, #2
 800afcc:	d12f      	bne.n	800b02e <__kernel_rem_pio2f+0x1ce>
 800afce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800afd2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800afd6:	b353      	cbz	r3, 800b02e <__kernel_rem_pio2f+0x1ce>
 800afd8:	4628      	mov	r0, r5
 800afda:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800afde:	f000 fa47 	bl	800b470 <scalbnf>
 800afe2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800afe6:	ee38 8a40 	vsub.f32	s16, s16, s0
 800afea:	e020      	b.n	800b02e <__kernel_rem_pio2f+0x1ce>
 800afec:	ee60 7a28 	vmul.f32	s15, s0, s17
 800aff0:	3f01      	subs	r7, #1
 800aff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800affa:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800affe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b002:	ecac 0a01 	vstmia	ip!, {s0}
 800b006:	ed90 0a00 	vldr	s0, [r0]
 800b00a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b00e:	e799      	b.n	800af44 <__kernel_rem_pio2f+0xe4>
 800b010:	d105      	bne.n	800b01e <__kernel_rem_pio2f+0x1be>
 800b012:	1e70      	subs	r0, r6, #1
 800b014:	ab08      	add	r3, sp, #32
 800b016:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800b01a:	11ff      	asrs	r7, r7, #7
 800b01c:	e7c5      	b.n	800afaa <__kernel_rem_pio2f+0x14a>
 800b01e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b022:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02a:	da31      	bge.n	800b090 <__kernel_rem_pio2f+0x230>
 800b02c:	2700      	movs	r7, #0
 800b02e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b036:	f040 809b 	bne.w	800b170 <__kernel_rem_pio2f+0x310>
 800b03a:	1e74      	subs	r4, r6, #1
 800b03c:	46a4      	mov	ip, r4
 800b03e:	2000      	movs	r0, #0
 800b040:	45d4      	cmp	ip, sl
 800b042:	da4a      	bge.n	800b0da <__kernel_rem_pio2f+0x27a>
 800b044:	2800      	cmp	r0, #0
 800b046:	d07a      	beq.n	800b13e <__kernel_rem_pio2f+0x2de>
 800b048:	ab08      	add	r3, sp, #32
 800b04a:	3d08      	subs	r5, #8
 800b04c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 8081 	beq.w	800b158 <__kernel_rem_pio2f+0x2f8>
 800b056:	4628      	mov	r0, r5
 800b058:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b05c:	00a5      	lsls	r5, r4, #2
 800b05e:	f000 fa07 	bl	800b470 <scalbnf>
 800b062:	aa44      	add	r2, sp, #272	; 0x110
 800b064:	1d2b      	adds	r3, r5, #4
 800b066:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800b168 <__kernel_rem_pio2f+0x308>
 800b06a:	18d1      	adds	r1, r2, r3
 800b06c:	4622      	mov	r2, r4
 800b06e:	2a00      	cmp	r2, #0
 800b070:	f280 80ae 	bge.w	800b1d0 <__kernel_rem_pio2f+0x370>
 800b074:	4622      	mov	r2, r4
 800b076:	2a00      	cmp	r2, #0
 800b078:	f2c0 80cc 	blt.w	800b214 <__kernel_rem_pio2f+0x3b4>
 800b07c:	a944      	add	r1, sp, #272	; 0x110
 800b07e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800b082:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800b160 <__kernel_rem_pio2f+0x300>
 800b086:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b16c <__kernel_rem_pio2f+0x30c>
 800b08a:	2000      	movs	r0, #0
 800b08c:	1aa1      	subs	r1, r4, r2
 800b08e:	e0b6      	b.n	800b1fe <__kernel_rem_pio2f+0x39e>
 800b090:	2702      	movs	r7, #2
 800b092:	e78c      	b.n	800afae <__kernel_rem_pio2f+0x14e>
 800b094:	6820      	ldr	r0, [r4, #0]
 800b096:	b94b      	cbnz	r3, 800b0ac <__kernel_rem_pio2f+0x24c>
 800b098:	b118      	cbz	r0, 800b0a2 <__kernel_rem_pio2f+0x242>
 800b09a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800b09e:	6020      	str	r0, [r4, #0]
 800b0a0:	2001      	movs	r0, #1
 800b0a2:	f10e 0e01 	add.w	lr, lr, #1
 800b0a6:	3404      	adds	r4, #4
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	e785      	b.n	800afb8 <__kernel_rem_pio2f+0x158>
 800b0ac:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b0b0:	6020      	str	r0, [r4, #0]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	e7f5      	b.n	800b0a2 <__kernel_rem_pio2f+0x242>
 800b0b6:	1e74      	subs	r4, r6, #1
 800b0b8:	a808      	add	r0, sp, #32
 800b0ba:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b0be:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b0c2:	f10d 0c20 	add.w	ip, sp, #32
 800b0c6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800b0ca:	e77e      	b.n	800afca <__kernel_rem_pio2f+0x16a>
 800b0cc:	1e74      	subs	r4, r6, #1
 800b0ce:	a808      	add	r0, sp, #32
 800b0d0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b0d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b0d8:	e7f3      	b.n	800b0c2 <__kernel_rem_pio2f+0x262>
 800b0da:	ab08      	add	r3, sp, #32
 800b0dc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b0e0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b0e4:	4318      	orrs	r0, r3
 800b0e6:	e7ab      	b.n	800b040 <__kernel_rem_pio2f+0x1e0>
 800b0e8:	f10c 0c01 	add.w	ip, ip, #1
 800b0ec:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800b0f0:	2c00      	cmp	r4, #0
 800b0f2:	d0f9      	beq.n	800b0e8 <__kernel_rem_pio2f+0x288>
 800b0f4:	9b05      	ldr	r3, [sp, #20]
 800b0f6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b0fa:	eb0d 0003 	add.w	r0, sp, r3
 800b0fe:	9b01      	ldr	r3, [sp, #4]
 800b100:	18f4      	adds	r4, r6, r3
 800b102:	ab1c      	add	r3, sp, #112	; 0x70
 800b104:	1c77      	adds	r7, r6, #1
 800b106:	384c      	subs	r0, #76	; 0x4c
 800b108:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b10c:	4466      	add	r6, ip
 800b10e:	42be      	cmp	r6, r7
 800b110:	f6ff af0b 	blt.w	800af2a <__kernel_rem_pio2f+0xca>
 800b114:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800b118:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b11c:	ee07 3a90 	vmov	s15, r3
 800b120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b124:	f04f 0c00 	mov.w	ip, #0
 800b128:	ece4 7a01 	vstmia	r4!, {s15}
 800b12c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b16c <__kernel_rem_pio2f+0x30c>
 800b130:	46a1      	mov	r9, r4
 800b132:	458c      	cmp	ip, r1
 800b134:	dd07      	ble.n	800b146 <__kernel_rem_pio2f+0x2e6>
 800b136:	ece0 7a01 	vstmia	r0!, {s15}
 800b13a:	3701      	adds	r7, #1
 800b13c:	e7e7      	b.n	800b10e <__kernel_rem_pio2f+0x2ae>
 800b13e:	9804      	ldr	r0, [sp, #16]
 800b140:	f04f 0c01 	mov.w	ip, #1
 800b144:	e7d2      	b.n	800b0ec <__kernel_rem_pio2f+0x28c>
 800b146:	ecfe 6a01 	vldmia	lr!, {s13}
 800b14a:	ed39 7a01 	vldmdb	r9!, {s14}
 800b14e:	f10c 0c01 	add.w	ip, ip, #1
 800b152:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b156:	e7ec      	b.n	800b132 <__kernel_rem_pio2f+0x2d2>
 800b158:	3c01      	subs	r4, #1
 800b15a:	e775      	b.n	800b048 <__kernel_rem_pio2f+0x1e8>
 800b15c:	0800bd88 	.word	0x0800bd88
 800b160:	0800bd5c 	.word	0x0800bd5c
 800b164:	43800000 	.word	0x43800000
 800b168:	3b800000 	.word	0x3b800000
 800b16c:	00000000 	.word	0x00000000
 800b170:	9b03      	ldr	r3, [sp, #12]
 800b172:	eeb0 0a48 	vmov.f32	s0, s16
 800b176:	1a98      	subs	r0, r3, r2
 800b178:	f000 f97a 	bl	800b470 <scalbnf>
 800b17c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b164 <__kernel_rem_pio2f+0x304>
 800b180:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b188:	db19      	blt.n	800b1be <__kernel_rem_pio2f+0x35e>
 800b18a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b168 <__kernel_rem_pio2f+0x308>
 800b18e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b192:	aa08      	add	r2, sp, #32
 800b194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b198:	1c74      	adds	r4, r6, #1
 800b19a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b19e:	3508      	adds	r5, #8
 800b1a0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b1a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b1ac:	ee10 3a10 	vmov	r3, s0
 800b1b0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b1b4:	ee17 3a90 	vmov	r3, s15
 800b1b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b1bc:	e74b      	b.n	800b056 <__kernel_rem_pio2f+0x1f6>
 800b1be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b1c2:	aa08      	add	r2, sp, #32
 800b1c4:	ee10 3a10 	vmov	r3, s0
 800b1c8:	4634      	mov	r4, r6
 800b1ca:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b1ce:	e742      	b.n	800b056 <__kernel_rem_pio2f+0x1f6>
 800b1d0:	a808      	add	r0, sp, #32
 800b1d2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800b1d6:	9001      	str	r0, [sp, #4]
 800b1d8:	ee07 0a90 	vmov	s15, r0
 800b1dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1e0:	3a01      	subs	r2, #1
 800b1e2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b1e6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b1ea:	ed61 7a01 	vstmdb	r1!, {s15}
 800b1ee:	e73e      	b.n	800b06e <__kernel_rem_pio2f+0x20e>
 800b1f0:	ecfc 6a01 	vldmia	ip!, {s13}
 800b1f4:	ecb6 7a01 	vldmia	r6!, {s14}
 800b1f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	4550      	cmp	r0, sl
 800b200:	dc01      	bgt.n	800b206 <__kernel_rem_pio2f+0x3a6>
 800b202:	4288      	cmp	r0, r1
 800b204:	ddf4      	ble.n	800b1f0 <__kernel_rem_pio2f+0x390>
 800b206:	a858      	add	r0, sp, #352	; 0x160
 800b208:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b20c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800b210:	3a01      	subs	r2, #1
 800b212:	e730      	b.n	800b076 <__kernel_rem_pio2f+0x216>
 800b214:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800b216:	2a02      	cmp	r2, #2
 800b218:	dc09      	bgt.n	800b22e <__kernel_rem_pio2f+0x3ce>
 800b21a:	2a00      	cmp	r2, #0
 800b21c:	dc2a      	bgt.n	800b274 <__kernel_rem_pio2f+0x414>
 800b21e:	d043      	beq.n	800b2a8 <__kernel_rem_pio2f+0x448>
 800b220:	f009 0007 	and.w	r0, r9, #7
 800b224:	b059      	add	sp, #356	; 0x164
 800b226:	ecbd 8b04 	vpop	{d8-d9}
 800b22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800b230:	2b03      	cmp	r3, #3
 800b232:	d1f5      	bne.n	800b220 <__kernel_rem_pio2f+0x3c0>
 800b234:	ab30      	add	r3, sp, #192	; 0xc0
 800b236:	442b      	add	r3, r5
 800b238:	461a      	mov	r2, r3
 800b23a:	4619      	mov	r1, r3
 800b23c:	4620      	mov	r0, r4
 800b23e:	2800      	cmp	r0, #0
 800b240:	f1a1 0104 	sub.w	r1, r1, #4
 800b244:	dc51      	bgt.n	800b2ea <__kernel_rem_pio2f+0x48a>
 800b246:	4621      	mov	r1, r4
 800b248:	2901      	cmp	r1, #1
 800b24a:	f1a2 0204 	sub.w	r2, r2, #4
 800b24e:	dc5c      	bgt.n	800b30a <__kernel_rem_pio2f+0x4aa>
 800b250:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800b16c <__kernel_rem_pio2f+0x30c>
 800b254:	3304      	adds	r3, #4
 800b256:	2c01      	cmp	r4, #1
 800b258:	dc67      	bgt.n	800b32a <__kernel_rem_pio2f+0x4ca>
 800b25a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800b25e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800b262:	2f00      	cmp	r7, #0
 800b264:	d167      	bne.n	800b336 <__kernel_rem_pio2f+0x4d6>
 800b266:	edc8 6a00 	vstr	s13, [r8]
 800b26a:	ed88 7a01 	vstr	s14, [r8, #4]
 800b26e:	edc8 7a02 	vstr	s15, [r8, #8]
 800b272:	e7d5      	b.n	800b220 <__kernel_rem_pio2f+0x3c0>
 800b274:	aa30      	add	r2, sp, #192	; 0xc0
 800b276:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800b16c <__kernel_rem_pio2f+0x30c>
 800b27a:	4413      	add	r3, r2
 800b27c:	4622      	mov	r2, r4
 800b27e:	2a00      	cmp	r2, #0
 800b280:	da24      	bge.n	800b2cc <__kernel_rem_pio2f+0x46c>
 800b282:	b34f      	cbz	r7, 800b2d8 <__kernel_rem_pio2f+0x478>
 800b284:	eef1 7a47 	vneg.f32	s15, s14
 800b288:	edc8 7a00 	vstr	s15, [r8]
 800b28c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800b290:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b294:	aa31      	add	r2, sp, #196	; 0xc4
 800b296:	2301      	movs	r3, #1
 800b298:	429c      	cmp	r4, r3
 800b29a:	da20      	bge.n	800b2de <__kernel_rem_pio2f+0x47e>
 800b29c:	b10f      	cbz	r7, 800b2a2 <__kernel_rem_pio2f+0x442>
 800b29e:	eef1 7a67 	vneg.f32	s15, s15
 800b2a2:	edc8 7a01 	vstr	s15, [r8, #4]
 800b2a6:	e7bb      	b.n	800b220 <__kernel_rem_pio2f+0x3c0>
 800b2a8:	aa30      	add	r2, sp, #192	; 0xc0
 800b2aa:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800b16c <__kernel_rem_pio2f+0x30c>
 800b2ae:	4413      	add	r3, r2
 800b2b0:	2c00      	cmp	r4, #0
 800b2b2:	da05      	bge.n	800b2c0 <__kernel_rem_pio2f+0x460>
 800b2b4:	b10f      	cbz	r7, 800b2ba <__kernel_rem_pio2f+0x45a>
 800b2b6:	eef1 7a67 	vneg.f32	s15, s15
 800b2ba:	edc8 7a00 	vstr	s15, [r8]
 800b2be:	e7af      	b.n	800b220 <__kernel_rem_pio2f+0x3c0>
 800b2c0:	ed33 7a01 	vldmdb	r3!, {s14}
 800b2c4:	3c01      	subs	r4, #1
 800b2c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2ca:	e7f1      	b.n	800b2b0 <__kernel_rem_pio2f+0x450>
 800b2cc:	ed73 7a01 	vldmdb	r3!, {s15}
 800b2d0:	3a01      	subs	r2, #1
 800b2d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b2d6:	e7d2      	b.n	800b27e <__kernel_rem_pio2f+0x41e>
 800b2d8:	eef0 7a47 	vmov.f32	s15, s14
 800b2dc:	e7d4      	b.n	800b288 <__kernel_rem_pio2f+0x428>
 800b2de:	ecb2 7a01 	vldmia	r2!, {s14}
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2e8:	e7d6      	b.n	800b298 <__kernel_rem_pio2f+0x438>
 800b2ea:	edd1 7a00 	vldr	s15, [r1]
 800b2ee:	edd1 6a01 	vldr	s13, [r1, #4]
 800b2f2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b2f6:	3801      	subs	r0, #1
 800b2f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2fc:	ed81 7a00 	vstr	s14, [r1]
 800b300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b304:	edc1 7a01 	vstr	s15, [r1, #4]
 800b308:	e799      	b.n	800b23e <__kernel_rem_pio2f+0x3de>
 800b30a:	edd2 7a00 	vldr	s15, [r2]
 800b30e:	edd2 6a01 	vldr	s13, [r2, #4]
 800b312:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b316:	3901      	subs	r1, #1
 800b318:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b31c:	ed82 7a00 	vstr	s14, [r2]
 800b320:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b324:	edc2 7a01 	vstr	s15, [r2, #4]
 800b328:	e78e      	b.n	800b248 <__kernel_rem_pio2f+0x3e8>
 800b32a:	ed33 7a01 	vldmdb	r3!, {s14}
 800b32e:	3c01      	subs	r4, #1
 800b330:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b334:	e78f      	b.n	800b256 <__kernel_rem_pio2f+0x3f6>
 800b336:	eef1 6a66 	vneg.f32	s13, s13
 800b33a:	eeb1 7a47 	vneg.f32	s14, s14
 800b33e:	edc8 6a00 	vstr	s13, [r8]
 800b342:	ed88 7a01 	vstr	s14, [r8, #4]
 800b346:	eef1 7a67 	vneg.f32	s15, s15
 800b34a:	e790      	b.n	800b26e <__kernel_rem_pio2f+0x40e>

0800b34c <__kernel_sinf>:
 800b34c:	ee10 3a10 	vmov	r3, s0
 800b350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b354:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b358:	da04      	bge.n	800b364 <__kernel_sinf+0x18>
 800b35a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b35e:	ee17 3a90 	vmov	r3, s15
 800b362:	b35b      	cbz	r3, 800b3bc <__kernel_sinf+0x70>
 800b364:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b368:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b3c0 <__kernel_sinf+0x74>
 800b36c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b3c4 <__kernel_sinf+0x78>
 800b370:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b374:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b3c8 <__kernel_sinf+0x7c>
 800b378:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b37c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b3cc <__kernel_sinf+0x80>
 800b380:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b384:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b3d0 <__kernel_sinf+0x84>
 800b388:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b38c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b390:	b930      	cbnz	r0, 800b3a0 <__kernel_sinf+0x54>
 800b392:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b3d4 <__kernel_sinf+0x88>
 800b396:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b39a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b39e:	4770      	bx	lr
 800b3a0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b3a4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b3a8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b3ac:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b3b0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b3d8 <__kernel_sinf+0x8c>
 800b3b4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b3b8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	2f2ec9d3 	.word	0x2f2ec9d3
 800b3c4:	b2d72f34 	.word	0xb2d72f34
 800b3c8:	3638ef1b 	.word	0x3638ef1b
 800b3cc:	b9500d01 	.word	0xb9500d01
 800b3d0:	3c088889 	.word	0x3c088889
 800b3d4:	be2aaaab 	.word	0xbe2aaaab
 800b3d8:	3e2aaaab 	.word	0x3e2aaaab

0800b3dc <fabsf>:
 800b3dc:	ee10 3a10 	vmov	r3, s0
 800b3e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b3e4:	ee00 3a10 	vmov	s0, r3
 800b3e8:	4770      	bx	lr
	...

0800b3ec <floorf>:
 800b3ec:	ee10 3a10 	vmov	r3, s0
 800b3f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b3f4:	3a7f      	subs	r2, #127	; 0x7f
 800b3f6:	2a16      	cmp	r2, #22
 800b3f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b3fc:	dc2a      	bgt.n	800b454 <floorf+0x68>
 800b3fe:	2a00      	cmp	r2, #0
 800b400:	da11      	bge.n	800b426 <floorf+0x3a>
 800b402:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b464 <floorf+0x78>
 800b406:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b40a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b412:	dd05      	ble.n	800b420 <floorf+0x34>
 800b414:	2b00      	cmp	r3, #0
 800b416:	da23      	bge.n	800b460 <floorf+0x74>
 800b418:	4a13      	ldr	r2, [pc, #76]	; (800b468 <floorf+0x7c>)
 800b41a:	2900      	cmp	r1, #0
 800b41c:	bf18      	it	ne
 800b41e:	4613      	movne	r3, r2
 800b420:	ee00 3a10 	vmov	s0, r3
 800b424:	4770      	bx	lr
 800b426:	4911      	ldr	r1, [pc, #68]	; (800b46c <floorf+0x80>)
 800b428:	4111      	asrs	r1, r2
 800b42a:	420b      	tst	r3, r1
 800b42c:	d0fa      	beq.n	800b424 <floorf+0x38>
 800b42e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b464 <floorf+0x78>
 800b432:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b436:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b43e:	ddef      	ble.n	800b420 <floorf+0x34>
 800b440:	2b00      	cmp	r3, #0
 800b442:	bfbe      	ittt	lt
 800b444:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b448:	fa40 f202 	asrlt.w	r2, r0, r2
 800b44c:	189b      	addlt	r3, r3, r2
 800b44e:	ea23 0301 	bic.w	r3, r3, r1
 800b452:	e7e5      	b.n	800b420 <floorf+0x34>
 800b454:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b458:	d3e4      	bcc.n	800b424 <floorf+0x38>
 800b45a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b45e:	4770      	bx	lr
 800b460:	2300      	movs	r3, #0
 800b462:	e7dd      	b.n	800b420 <floorf+0x34>
 800b464:	7149f2ca 	.word	0x7149f2ca
 800b468:	bf800000 	.word	0xbf800000
 800b46c:	007fffff 	.word	0x007fffff

0800b470 <scalbnf>:
 800b470:	ee10 3a10 	vmov	r3, s0
 800b474:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b478:	d025      	beq.n	800b4c6 <scalbnf+0x56>
 800b47a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b47e:	d302      	bcc.n	800b486 <scalbnf+0x16>
 800b480:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b484:	4770      	bx	lr
 800b486:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b48a:	d122      	bne.n	800b4d2 <scalbnf+0x62>
 800b48c:	4b2a      	ldr	r3, [pc, #168]	; (800b538 <scalbnf+0xc8>)
 800b48e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b53c <scalbnf+0xcc>
 800b492:	4298      	cmp	r0, r3
 800b494:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b498:	db16      	blt.n	800b4c8 <scalbnf+0x58>
 800b49a:	ee10 3a10 	vmov	r3, s0
 800b49e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b4a2:	3a19      	subs	r2, #25
 800b4a4:	4402      	add	r2, r0
 800b4a6:	2afe      	cmp	r2, #254	; 0xfe
 800b4a8:	dd15      	ble.n	800b4d6 <scalbnf+0x66>
 800b4aa:	ee10 3a10 	vmov	r3, s0
 800b4ae:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b540 <scalbnf+0xd0>
 800b4b2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b544 <scalbnf+0xd4>
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	eeb0 7a67 	vmov.f32	s14, s15
 800b4bc:	bfb8      	it	lt
 800b4be:	eef0 7a66 	vmovlt.f32	s15, s13
 800b4c2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b4c6:	4770      	bx	lr
 800b4c8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b548 <scalbnf+0xd8>
 800b4cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b4d0:	4770      	bx	lr
 800b4d2:	0dd2      	lsrs	r2, r2, #23
 800b4d4:	e7e6      	b.n	800b4a4 <scalbnf+0x34>
 800b4d6:	2a00      	cmp	r2, #0
 800b4d8:	dd06      	ble.n	800b4e8 <scalbnf+0x78>
 800b4da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b4de:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b4e2:	ee00 3a10 	vmov	s0, r3
 800b4e6:	4770      	bx	lr
 800b4e8:	f112 0f16 	cmn.w	r2, #22
 800b4ec:	da1a      	bge.n	800b524 <scalbnf+0xb4>
 800b4ee:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b4f2:	4298      	cmp	r0, r3
 800b4f4:	ee10 3a10 	vmov	r3, s0
 800b4f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4fc:	dd0a      	ble.n	800b514 <scalbnf+0xa4>
 800b4fe:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b540 <scalbnf+0xd0>
 800b502:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b544 <scalbnf+0xd4>
 800b506:	eef0 7a40 	vmov.f32	s15, s0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	bf18      	it	ne
 800b50e:	eeb0 0a47 	vmovne.f32	s0, s14
 800b512:	e7db      	b.n	800b4cc <scalbnf+0x5c>
 800b514:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b548 <scalbnf+0xd8>
 800b518:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b54c <scalbnf+0xdc>
 800b51c:	eef0 7a40 	vmov.f32	s15, s0
 800b520:	2b00      	cmp	r3, #0
 800b522:	e7f3      	b.n	800b50c <scalbnf+0x9c>
 800b524:	3219      	adds	r2, #25
 800b526:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b52a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b52e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b550 <scalbnf+0xe0>
 800b532:	ee07 3a10 	vmov	s14, r3
 800b536:	e7c4      	b.n	800b4c2 <scalbnf+0x52>
 800b538:	ffff3cb0 	.word	0xffff3cb0
 800b53c:	4c000000 	.word	0x4c000000
 800b540:	7149f2ca 	.word	0x7149f2ca
 800b544:	f149f2ca 	.word	0xf149f2ca
 800b548:	0da24260 	.word	0x0da24260
 800b54c:	8da24260 	.word	0x8da24260
 800b550:	33000000 	.word	0x33000000

0800b554 <_init>:
 800b554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b556:	bf00      	nop
 800b558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b55a:	bc08      	pop	{r3}
 800b55c:	469e      	mov	lr, r3
 800b55e:	4770      	bx	lr

0800b560 <_fini>:
 800b560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b562:	bf00      	nop
 800b564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b566:	bc08      	pop	{r3}
 800b568:	469e      	mov	lr, r3
 800b56a:	4770      	bx	lr


master_rival.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a758  0800a758  0001a758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7b8  0800a7b8  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7b8  0800a7b8  0001a7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7c0  0800a7c0  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7c0  0800a7c0  0001a7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7c4  0800a7c4  0001a7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0800a7c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020178  2**0
                  CONTENTS
 10 .bss          00001f98  20000178  20000178  00020178  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002110  20002110  00020178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019bc6  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ad9  00000000  00000000  00039d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0003d848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012b8  00000000  00000000  0003ec88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e9d  00000000  00000000  0003ff40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a06b  00000000  00000000  00064ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cffe4  00000000  00000000  0007ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ee2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000541c  00000000  00000000  0014ee7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000178 	.word	0x20000178
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a740 	.word	0x0800a740

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000017c 	.word	0x2000017c
 80001c4:	0800a740 	.word	0x0800a740

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	4b6b      	ldr	r3, [pc, #428]	; (8000694 <MX_GPIO_Init+0x1c8>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a6a      	ldr	r2, [pc, #424]	; (8000694 <MX_GPIO_Init+0x1c8>)
 80004ec:	f043 0310 	orr.w	r3, r3, #16
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b68      	ldr	r3, [pc, #416]	; (8000694 <MX_GPIO_Init+0x1c8>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0310 	and.w	r3, r3, #16
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	4b64      	ldr	r3, [pc, #400]	; (8000694 <MX_GPIO_Init+0x1c8>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a63      	ldr	r2, [pc, #396]	; (8000694 <MX_GPIO_Init+0x1c8>)
 8000508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b61      	ldr	r3, [pc, #388]	; (8000694 <MX_GPIO_Init+0x1c8>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b5d      	ldr	r3, [pc, #372]	; (8000694 <MX_GPIO_Init+0x1c8>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a5c      	ldr	r2, [pc, #368]	; (8000694 <MX_GPIO_Init+0x1c8>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b5a      	ldr	r3, [pc, #360]	; (8000694 <MX_GPIO_Init+0x1c8>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b56      	ldr	r3, [pc, #344]	; (8000694 <MX_GPIO_Init+0x1c8>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a55      	ldr	r2, [pc, #340]	; (8000694 <MX_GPIO_Init+0x1c8>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b53      	ldr	r3, [pc, #332]	; (8000694 <MX_GPIO_Init+0x1c8>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b4f      	ldr	r3, [pc, #316]	; (8000694 <MX_GPIO_Init+0x1c8>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a4e      	ldr	r2, [pc, #312]	; (8000694 <MX_GPIO_Init+0x1c8>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b4c      	ldr	r3, [pc, #304]	; (8000694 <MX_GPIO_Init+0x1c8>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b48      	ldr	r3, [pc, #288]	; (8000694 <MX_GPIO_Init+0x1c8>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a47      	ldr	r2, [pc, #284]	; (8000694 <MX_GPIO_Init+0x1c8>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b45      	ldr	r3, [pc, #276]	; (8000694 <MX_GPIO_Init+0x1c8>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_s_bak_GPIO_Port, Motor_s_bak_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2120      	movs	r1, #32
 800058e:	4842      	ldr	r0, [pc, #264]	; (8000698 <MX_GPIO_Init+0x1cc>)
 8000590:	f001 ffe8 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, pneu_Pin|vac_Pin|ARM_D1_Pin|ARM_D2_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f243 0105 	movw	r1, #12293	; 0x3005
 800059a:	4840      	ldr	r0, [pc, #256]	; (800069c <MX_GPIO_Init+0x1d0>)
 800059c:	f001 ffe2 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LIFT_D1_Pin|LIFT_D2_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80005a6:	483e      	ldr	r0, [pc, #248]	; (80006a0 <MX_GPIO_Init+0x1d4>)
 80005a8:	f001 ffdc 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(mini_pump_GPIO_Port, mini_pump_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b2:	483c      	ldr	r0, [pc, #240]	; (80006a4 <MX_GPIO_Init+0x1d8>)
 80005b4:	f001 ffd6 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buzz_GPIO_Port, buzz_Pin, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005be:	4839      	ldr	r0, [pc, #228]	; (80006a4 <MX_GPIO_Init+0x1d8>)
 80005c0:	f001 ffd0 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor_s_bak_Pin;
 80005c4:	2320      	movs	r3, #32
 80005c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Motor_s_bak_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	4619      	mov	r1, r3
 80005da:	482f      	ldr	r0, [pc, #188]	; (8000698 <MX_GPIO_Init+0x1cc>)
 80005dc:	f001 fe0e 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = pneu_Pin|vac_Pin|ARM_D1_Pin|ARM_D2_Pin;
 80005e0:	f243 0305 	movw	r3, #12293	; 0x3005
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	4619      	mov	r1, r3
 80005f8:	4828      	ldr	r0, [pc, #160]	; (800069c <MX_GPIO_Init+0x1d0>)
 80005fa:	f001 fdff 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = retryBut_Pin;
 80005fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000608:	2301      	movs	r3, #1
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(retryBut_GPIO_Port, &GPIO_InitStruct);
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4619      	mov	r1, r3
 8000612:	4823      	ldr	r0, [pc, #140]	; (80006a0 <MX_GPIO_Init+0x1d4>)
 8000614:	f001 fdf2 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LIFT_D1_Pin|LIFT_D2_Pin;
 8000618:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	481b      	ldr	r0, [pc, #108]	; (80006a0 <MX_GPIO_Init+0x1d4>)
 8000632:	f001 fde3 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = mini_pump_Pin;
 8000636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(mini_pump_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	4815      	ldr	r0, [pc, #84]	; (80006a4 <MX_GPIO_Init+0x1d8>)
 8000650:	f001 fdd4 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = buzz_Pin;
 8000654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800065a:	2311      	movs	r3, #17
 800065c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000662:	2303      	movs	r3, #3
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(buzz_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_GPIO_Init+0x1d8>)
 800066e:	f001 fdc5 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = startBut_Pin|prox1_Pin|prox2_Pin|mapBut_Pin;
 8000672:	23b8      	movs	r3, #184	; 0xb8
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067a:	2301      	movs	r3, #1
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_GPIO_Init+0x1d0>)
 8000686:	f001 fdb9 	bl	80021fc <HAL_GPIO_Init>

}
 800068a:	bf00      	nop
 800068c:	3730      	adds	r7, #48	; 0x30
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40020800 	.word	0x40020800
 800069c:	40020400 	.word	0x40020400
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40020c00 	.word	0x40020c00

080006a8 <Master_Kirim>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void Master_Kirim(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
	  memcpy(tx_buff+3,RobotSpeed,12);
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <Master_Kirim+0x5c>)
 80006b0:	220c      	movs	r2, #12
 80006b2:	4915      	ldr	r1, [pc, #84]	; (8000708 <Master_Kirim+0x60>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00a f82d 	bl	800a714 <memcpy>
	  uint16_t check_s=0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	807b      	strh	r3, [r7, #2]

	  for(int i = 3;i<30;i++)
 80006be:	2303      	movs	r3, #3
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	e00b      	b.n	80006dc <Master_Kirim+0x34>
	  {
		  check_s += tx_buff[i];
 80006c4:	4a11      	ldr	r2, [pc, #68]	; (800070c <Master_Kirim+0x64>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	4413      	add	r3, r2
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	807b      	strh	r3, [r7, #2]
	  for(int i = 3;i<30;i++)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3301      	adds	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b1d      	cmp	r3, #29
 80006e0:	ddf0      	ble.n	80006c4 <Master_Kirim+0x1c>
	  }
	  check_s = ~check_s;
 80006e2:	887b      	ldrh	r3, [r7, #2]
 80006e4:	43db      	mvns	r3, r3
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	807b      	strh	r3, [r7, #2]

	  memcpy(tx_buff+30,&check_s,2);
 80006ea:	4a09      	ldr	r2, [pc, #36]	; (8000710 <Master_Kirim+0x68>)
 80006ec:	887b      	ldrh	r3, [r7, #2]
 80006ee:	8013      	strh	r3, [r2, #0]

	  HAL_UART_Transmit_IT(&huart1, tx_buff, 32);
 80006f0:	2220      	movs	r2, #32
 80006f2:	4906      	ldr	r1, [pc, #24]	; (800070c <Master_Kirim+0x64>)
 80006f4:	4807      	ldr	r0, [pc, #28]	; (8000714 <Master_Kirim+0x6c>)
 80006f6:	f004 feb4 	bl	8005462 <HAL_UART_Transmit_IT>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000003 	.word	0x20000003
 8000708:	200001d8 	.word	0x200001d8
 800070c:	20000000 	.word	0x20000000
 8000710:	2000001e 	.word	0x2000001e
 8000714:	2000044c 	.word	0x2000044c

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071e:	f001 fb33 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000722:	f000 f94f 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000726:	f7ff fed1 	bl	80004cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800072a:	f001 fa23 	bl	8001b74 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800072e:	f009 fa1d 	bl	8009b6c <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8000732:	f000 ff75 	bl	8001620 <MX_TIM6_Init>
  MX_TIM5_Init();
 8000736:	f000 ff1f 	bl	8001578 <MX_TIM5_Init>
  MX_TIM8_Init();
 800073a:	f000 ffdd 	bl	80016f8 <MX_TIM8_Init>
  MX_TIM9_Init();
 800073e:	f001 f833 	bl	80017a8 <MX_TIM9_Init>
  MX_TIM12_Init();
 8000742:	f001 f875 	bl	8001830 <MX_TIM12_Init>
  MX_TIM7_Init();
 8000746:	f000 ffa1 	bl	800168c <MX_TIM7_Init>
  MX_USART2_UART_Init();
 800074a:	f001 fa3d 	bl	8001bc8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(buzz_GPIO_Port, buzz_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000754:	4874      	ldr	r0, [pc, #464]	; (8000928 <main+0x210>)
 8000756:	f001 ff05 	bl	8002564 <HAL_GPIO_WritePin>

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800075a:	213c      	movs	r1, #60	; 0x3c
 800075c:	4873      	ldr	r0, [pc, #460]	; (800092c <main+0x214>)
 800075e:	f004 f8ad 	bl	80048bc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000762:	213c      	movs	r1, #60	; 0x3c
 8000764:	4872      	ldr	r0, [pc, #456]	; (8000930 <main+0x218>)
 8000766:	f004 f8a9 	bl	80048bc <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800076a:	2100      	movs	r1, #0
 800076c:	4871      	ldr	r0, [pc, #452]	; (8000934 <main+0x21c>)
 800076e:	f003 ff37 	bl	80045e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000772:	2104      	movs	r1, #4
 8000774:	4870      	ldr	r0, [pc, #448]	; (8000938 <main+0x220>)
 8000776:	f003 ff33 	bl	80045e0 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1, &Rx_temp, 1);
 800077a:	2201      	movs	r2, #1
 800077c:	496f      	ldr	r1, [pc, #444]	; (800093c <main+0x224>)
 800077e:	4870      	ldr	r0, [pc, #448]	; (8000940 <main+0x228>)
 8000780:	f004 feb4 	bl	80054ec <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &data_temp, 1);
 8000784:	2201      	movs	r2, #1
 8000786:	496f      	ldr	r1, [pc, #444]	; (8000944 <main+0x22c>)
 8000788:	486f      	ldr	r0, [pc, #444]	; (8000948 <main+0x230>)
 800078a:	f004 feaf 	bl	80054ec <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim6);
 800078e:	486f      	ldr	r0, [pc, #444]	; (800094c <main+0x234>)
 8000790:	f003 fe66 	bl	8004460 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000794:	486e      	ldr	r0, [pc, #440]	; (8000950 <main+0x238>)
 8000796:	f003 fe63 	bl	8004460 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() - time_s >= 100){
 800079a:	f001 fb5b 	bl	8001e54 <HAL_GetTick>
 800079e:	4602      	mov	r2, r0
 80007a0:	4b6c      	ldr	r3, [pc, #432]	; (8000954 <main+0x23c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	2b63      	cmp	r3, #99	; 0x63
 80007a8:	d922      	bls.n	80007f0 <main+0xd8>
		for(int i = 0;i<3;i++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	e014      	b.n	80007da <main+0xc2>
		{
			HAL_GPIO_WritePin(buzz_GPIO_Port, buzz_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b6:	485c      	ldr	r0, [pc, #368]	; (8000928 <main+0x210>)
 80007b8:	f001 fed4 	bl	8002564 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80007bc:	2032      	movs	r0, #50	; 0x32
 80007be:	f001 fb55 	bl	8001e6c <HAL_Delay>
			HAL_GPIO_WritePin(buzz_GPIO_Port, buzz_Pin, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c8:	4857      	ldr	r0, [pc, #348]	; (8000928 <main+0x210>)
 80007ca:	f001 fecb 	bl	8002564 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80007ce:	2032      	movs	r0, #50	; 0x32
 80007d0:	f001 fb4c 	bl	8001e6c <HAL_Delay>
		for(int i = 0;i<3;i++)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3301      	adds	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	dde7      	ble.n	80007b0 <main+0x98>
		}
		Rx_state = 0;
 80007e0:	4b5d      	ldr	r3, [pc, #372]	; (8000958 <main+0x240>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &Rx_temp, 1);
 80007e6:	2201      	movs	r2, #1
 80007e8:	4954      	ldr	r1, [pc, #336]	; (800093c <main+0x224>)
 80007ea:	4855      	ldr	r0, [pc, #340]	; (8000940 <main+0x228>)
 80007ec:	f004 fe7e 	bl	80054ec <HAL_UART_Receive_IT>
	  }

	  //transmit to pc
	  if(HAL_GPIO_ReadPin(startBut_GPIO_Port, startBut_Pin) == GPIO_PIN_RESET){
 80007f0:	2108      	movs	r1, #8
 80007f2:	485a      	ldr	r0, [pc, #360]	; (800095c <main+0x244>)
 80007f4:	f001 fe9e 	bl	8002534 <HAL_GPIO_ReadPin>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d103      	bne.n	8000806 <main+0xee>
		  startButton = 1;
 80007fe:	4b58      	ldr	r3, [pc, #352]	; (8000960 <main+0x248>)
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	e002      	b.n	800080c <main+0xf4>
	  }
	  else{
		  startButton = 0;
 8000806:	4b56      	ldr	r3, [pc, #344]	; (8000960 <main+0x248>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
	  }
	  if(HAL_GPIO_ReadPin(retryBut_GPIO_Port, retryBut_Pin) == GPIO_PIN_RESET){
 800080c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000810:	4854      	ldr	r0, [pc, #336]	; (8000964 <main+0x24c>)
 8000812:	f001 fe8f 	bl	8002534 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d103      	bne.n	8000824 <main+0x10c>
		  retryButton = 1;
 800081c:	4b52      	ldr	r3, [pc, #328]	; (8000968 <main+0x250>)
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	e002      	b.n	800082a <main+0x112>
	  }
	  else{
		  retryButton = 0;
 8000824:	4b50      	ldr	r3, [pc, #320]	; (8000968 <main+0x250>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
	  }


	  if(HAL_GPIO_ReadPin(mapBut_GPIO_Port, mapBut_Pin) == GPIO_PIN_RESET){
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	484b      	ldr	r0, [pc, #300]	; (800095c <main+0x244>)
 800082e:	f001 fe81 	bl	8002534 <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d103      	bne.n	8000840 <main+0x128>
		  mapButton = 1;
 8000838:	4b4c      	ldr	r3, [pc, #304]	; (800096c <main+0x254>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e002      	b.n	8000846 <main+0x12e>
	  }
	  else{
		  mapButton = 0;
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <main+0x254>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
	  }

	  if(HAL_GPIO_ReadPin(prox1_GPIO_Port, prox1_Pin) == GPIO_PIN_RESET){
 8000846:	2110      	movs	r1, #16
 8000848:	4844      	ldr	r0, [pc, #272]	; (800095c <main+0x244>)
 800084a:	f001 fe73 	bl	8002534 <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d103      	bne.n	800085c <main+0x144>
		  prox_kanan = 1;
 8000854:	4b46      	ldr	r3, [pc, #280]	; (8000970 <main+0x258>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	e002      	b.n	8000862 <main+0x14a>
	  }
	  else{
		  prox_kanan = 0;
 800085c:	4b44      	ldr	r3, [pc, #272]	; (8000970 <main+0x258>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
	  }
	  if(HAL_GPIO_ReadPin(prox2_GPIO_Port, prox2_Pin) == GPIO_PIN_RESET){
 8000862:	2120      	movs	r1, #32
 8000864:	483d      	ldr	r0, [pc, #244]	; (800095c <main+0x244>)
 8000866:	f001 fe65 	bl	8002534 <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d103      	bne.n	8000878 <main+0x160>
		  prox_kiri = 1;
 8000870:	4b40      	ldr	r3, [pc, #256]	; (8000974 <main+0x25c>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	e002      	b.n	800087e <main+0x166>
	  }
	  else{
		  prox_kiri = 0;
 8000878:	4b3e      	ldr	r3, [pc, #248]	; (8000974 <main+0x25c>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
//	  8 2 15 1 14
//	  AVG_Sens = (ADC_Read[1] + ADC_Read[2] + ADC_Read[8] + ADC_Read[14] + ADC_Read[15])*0.2;



	  memcpy(stm_to_pc+3, RoboPose_Global, 12);
 800087e:	4b3e      	ldr	r3, [pc, #248]	; (8000978 <main+0x260>)
 8000880:	220c      	movs	r2, #12
 8000882:	493e      	ldr	r1, [pc, #248]	; (800097c <main+0x264>)
 8000884:	4618      	mov	r0, r3
 8000886:	f009 ff45 	bl	800a714 <memcpy>
	  memcpy(stm_to_pc+15, RoboPose, 8);
 800088a:	4b3d      	ldr	r3, [pc, #244]	; (8000980 <main+0x268>)
 800088c:	2208      	movs	r2, #8
 800088e:	493d      	ldr	r1, [pc, #244]	; (8000984 <main+0x26c>)
 8000890:	4618      	mov	r0, r3
 8000892:	f009 ff3f 	bl	800a714 <memcpy>
	  memcpy(stm_to_pc+23, &time_stamp_rx, 4);
 8000896:	4a3c      	ldr	r2, [pc, #240]	; (8000988 <main+0x270>)
 8000898:	4b3c      	ldr	r3, [pc, #240]	; (800098c <main+0x274>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6013      	str	r3, [r2, #0]
	  memcpy(stm_to_pc+27, &encArm, 2);
 800089e:	4a3c      	ldr	r2, [pc, #240]	; (8000990 <main+0x278>)
 80008a0:	4b3c      	ldr	r3, [pc, #240]	; (8000994 <main+0x27c>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	8013      	strh	r3, [r2, #0]
	  memcpy(stm_to_pc+29, &encLifter, 2);
 80008a6:	4a3c      	ldr	r2, [pc, #240]	; (8000998 <main+0x280>)
 80008a8:	4b3c      	ldr	r3, [pc, #240]	; (800099c <main+0x284>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	8013      	strh	r3, [r2, #0]
	  memcpy(stm_to_pc+31, &startButton, 1);
 80008ae:	4b3c      	ldr	r3, [pc, #240]	; (80009a0 <main+0x288>)
 80008b0:	4a2b      	ldr	r2, [pc, #172]	; (8000960 <main+0x248>)
 80008b2:	7812      	ldrb	r2, [r2, #0]
 80008b4:	701a      	strb	r2, [r3, #0]
	  memcpy(stm_to_pc+32, &retryButton, 1);
 80008b6:	4b3b      	ldr	r3, [pc, #236]	; (80009a4 <main+0x28c>)
 80008b8:	4a2b      	ldr	r2, [pc, #172]	; (8000968 <main+0x250>)
 80008ba:	7812      	ldrb	r2, [r2, #0]
 80008bc:	701a      	strb	r2, [r3, #0]
	  memcpy(stm_to_pc+33, &mapButton, 1);
 80008be:	4b3a      	ldr	r3, [pc, #232]	; (80009a8 <main+0x290>)
 80008c0:	4a2a      	ldr	r2, [pc, #168]	; (800096c <main+0x254>)
 80008c2:	7812      	ldrb	r2, [r2, #0]
 80008c4:	701a      	strb	r2, [r3, #0]
	  memcpy(stm_to_pc+34, &prox_kanan, 1);
 80008c6:	4b39      	ldr	r3, [pc, #228]	; (80009ac <main+0x294>)
 80008c8:	4a29      	ldr	r2, [pc, #164]	; (8000970 <main+0x258>)
 80008ca:	7812      	ldrb	r2, [r2, #0]
 80008cc:	701a      	strb	r2, [r3, #0]
	  memcpy(stm_to_pc+35, &prox_kiri, 1);
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <main+0x298>)
 80008d0:	4a28      	ldr	r2, [pc, #160]	; (8000974 <main+0x25c>)
 80008d2:	7812      	ldrb	r2, [r2, #0]
 80008d4:	701a      	strb	r2, [r3, #0]
	  memcpy(stm_to_pc+36, ADC_Read, 32);
 80008d6:	4b37      	ldr	r3, [pc, #220]	; (80009b4 <main+0x29c>)
 80008d8:	2220      	movs	r2, #32
 80008da:	4937      	ldr	r1, [pc, #220]	; (80009b8 <main+0x2a0>)
 80008dc:	4618      	mov	r0, r3
 80008de:	f009 ff19 	bl	800a714 <memcpy>


	  uint16_t check_s_pc=0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	80fb      	strh	r3, [r7, #6]

	  for(int i = 3; i<82; i++)
 80008e6:	2303      	movs	r3, #3
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	e00b      	b.n	8000904 <main+0x1ec>
	  {
		  check_s_pc += stm_to_pc[i];
 80008ec:	4a33      	ldr	r2, [pc, #204]	; (80009bc <main+0x2a4>)
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	4413      	add	r3, r2
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	80fb      	strh	r3, [r7, #6]
	  for(int i = 3; i<82; i++)
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	3301      	adds	r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	2b51      	cmp	r3, #81	; 0x51
 8000908:	ddf0      	ble.n	80008ec <main+0x1d4>
	  }
	  check_s_pc = ~check_s_pc;
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	43db      	mvns	r3, r3
 800090e:	b29b      	uxth	r3, r3
 8000910:	80fb      	strh	r3, [r7, #6]

	  memcpy(stm_to_pc+82, &check_s_pc, 2);
 8000912:	4a2b      	ldr	r2, [pc, #172]	; (80009c0 <main+0x2a8>)
 8000914:	88fb      	ldrh	r3, [r7, #6]
 8000916:	8013      	strh	r3, [r2, #0]


	  CDC_Transmit_FS(stm_to_pc, 84);
 8000918:	2154      	movs	r1, #84	; 0x54
 800091a:	4828      	ldr	r0, [pc, #160]	; (80009bc <main+0x2a4>)
 800091c:	f009 fa7a 	bl	8009e14 <CDC_Transmit_FS>


	  HAL_Delay(1);
 8000920:	2001      	movs	r0, #1
 8000922:	f001 faa3 	bl	8001e6c <HAL_Delay>
  {
 8000926:	e738      	b.n	800079a <main+0x82>
 8000928:	40020c00 	.word	0x40020c00
 800092c:	2000029c 	.word	0x2000029c
 8000930:	20000374 	.word	0x20000374
 8000934:	200003bc 	.word	0x200003bc
 8000938:	20000404 	.word	0x20000404
 800093c:	200001b4 	.word	0x200001b4
 8000940:	2000044c 	.word	0x2000044c
 8000944:	20000212 	.word	0x20000212
 8000948:	20000490 	.word	0x20000490
 800094c:	200002e4 	.word	0x200002e4
 8000950:	2000032c 	.word	0x2000032c
 8000954:	200001d0 	.word	0x200001d0
 8000958:	200001b5 	.word	0x200001b5
 800095c:	40020400 	.word	0x40020400
 8000960:	200001e6 	.word	0x200001e6
 8000964:	40021000 	.word	0x40021000
 8000968:	200001e7 	.word	0x200001e7
 800096c:	200001e8 	.word	0x200001e8
 8000970:	20000210 	.word	0x20000210
 8000974:	20000211 	.word	0x20000211
 8000978:	20000023 	.word	0x20000023
 800097c:	200001b8 	.word	0x200001b8
 8000980:	2000002f 	.word	0x2000002f
 8000984:	200001c4 	.word	0x200001c4
 8000988:	20000037 	.word	0x20000037
 800098c:	200001d4 	.word	0x200001d4
 8000990:	2000003b 	.word	0x2000003b
 8000994:	200001ec 	.word	0x200001ec
 8000998:	2000003d 	.word	0x2000003d
 800099c:	200001f2 	.word	0x200001f2
 80009a0:	2000003f 	.word	0x2000003f
 80009a4:	20000040 	.word	0x20000040
 80009a8:	20000041 	.word	0x20000041
 80009ac:	20000042 	.word	0x20000042
 80009b0:	20000043 	.word	0x20000043
 80009b4:	20000044 	.word	0x20000044
 80009b8:	20000238 	.word	0x20000238
 80009bc:	20000020 	.word	0x20000020
 80009c0:	20000072 	.word	0x20000072

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b094      	sub	sp, #80	; 0x50
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	2230      	movs	r2, #48	; 0x30
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f009 feac 	bl	800a730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <SystemClock_Config+0xcc>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	4a27      	ldr	r2, [pc, #156]	; (8000a90 <SystemClock_Config+0xcc>)
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
 80009f8:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <SystemClock_Config+0xcc>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <SystemClock_Config+0xd0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <SystemClock_Config+0xd0>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <SystemClock_Config+0xd0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a34:	2304      	movs	r3, #4
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a38:	23a8      	movs	r3, #168	; 0xa8
 8000a3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a40:	2307      	movs	r3, #7
 8000a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0320 	add.w	r3, r7, #32
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 f821 	bl	8003a90 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a54:	f000 fac6 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2105      	movs	r1, #5
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 fa82 	bl	8003f80 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a82:	f000 faaf 	bl	8000fe4 <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	; 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	// Master-slave
	if (huart->Instance == USART1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a7f      	ldr	r2, [pc, #508]	; (8000ca4 <HAL_UART_RxCpltCallback+0x20c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	f040 8097 	bne.w	8000bda <HAL_UART_RxCpltCallback+0x142>
	{
		if (Rx_temp == 'i' && Rx_state == 0)
 8000aac:	4b7e      	ldr	r3, [pc, #504]	; (8000ca8 <HAL_UART_RxCpltCallback+0x210>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b69      	cmp	r3, #105	; 0x69
 8000ab2:	d110      	bne.n	8000ad6 <HAL_UART_RxCpltCallback+0x3e>
 8000ab4:	4b7d      	ldr	r3, [pc, #500]	; (8000cac <HAL_UART_RxCpltCallback+0x214>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10c      	bne.n	8000ad6 <HAL_UART_RxCpltCallback+0x3e>
		{
			Rx_state = 1;
 8000abc:	4b7b      	ldr	r3, [pc, #492]	; (8000cac <HAL_UART_RxCpltCallback+0x214>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
			Rx_buff[0] = Rx_temp;
 8000ac2:	4b79      	ldr	r3, [pc, #484]	; (8000ca8 <HAL_UART_RxCpltCallback+0x210>)
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	4b7a      	ldr	r3, [pc, #488]	; (8000cb0 <HAL_UART_RxCpltCallback+0x218>)
 8000ac8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, &Rx_temp, 1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	4976      	ldr	r1, [pc, #472]	; (8000ca8 <HAL_UART_RxCpltCallback+0x210>)
 8000ace:	4879      	ldr	r0, [pc, #484]	; (8000cb4 <HAL_UART_RxCpltCallback+0x21c>)
 8000ad0:	f004 fd0c 	bl	80054ec <HAL_UART_Receive_IT>
 8000ad4:	e0e2      	b.n	8000c9c <HAL_UART_RxCpltCallback+0x204>
		}
		else if (Rx_temp == 't' && Rx_state == 1)
 8000ad6:	4b74      	ldr	r3, [pc, #464]	; (8000ca8 <HAL_UART_RxCpltCallback+0x210>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b74      	cmp	r3, #116	; 0x74
 8000adc:	d110      	bne.n	8000b00 <HAL_UART_RxCpltCallback+0x68>
 8000ade:	4b73      	ldr	r3, [pc, #460]	; (8000cac <HAL_UART_RxCpltCallback+0x214>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d10c      	bne.n	8000b00 <HAL_UART_RxCpltCallback+0x68>
		{
			Rx_state = 2;
 8000ae6:	4b71      	ldr	r3, [pc, #452]	; (8000cac <HAL_UART_RxCpltCallback+0x214>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	701a      	strb	r2, [r3, #0]
			Rx_buff[1] = Rx_temp;
 8000aec:	4b6e      	ldr	r3, [pc, #440]	; (8000ca8 <HAL_UART_RxCpltCallback+0x210>)
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	4b6f      	ldr	r3, [pc, #444]	; (8000cb0 <HAL_UART_RxCpltCallback+0x218>)
 8000af2:	705a      	strb	r2, [r3, #1]
			HAL_UART_Receive_IT(&huart1, &Rx_temp, 1);
 8000af4:	2201      	movs	r2, #1
 8000af6:	496c      	ldr	r1, [pc, #432]	; (8000ca8 <HAL_UART_RxCpltCallback+0x210>)
 8000af8:	486e      	ldr	r0, [pc, #440]	; (8000cb4 <HAL_UART_RxCpltCallback+0x21c>)
 8000afa:	f004 fcf7 	bl	80054ec <HAL_UART_Receive_IT>
 8000afe:	e0cd      	b.n	8000c9c <HAL_UART_RxCpltCallback+0x204>
		}
		else if (Rx_temp == 's' && Rx_state == 2)
 8000b00:	4b69      	ldr	r3, [pc, #420]	; (8000ca8 <HAL_UART_RxCpltCallback+0x210>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b73      	cmp	r3, #115	; 0x73
 8000b06:	d111      	bne.n	8000b2c <HAL_UART_RxCpltCallback+0x94>
 8000b08:	4b68      	ldr	r3, [pc, #416]	; (8000cac <HAL_UART_RxCpltCallback+0x214>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d10d      	bne.n	8000b2c <HAL_UART_RxCpltCallback+0x94>
		{
			Rx_state = 3;
 8000b10:	4b66      	ldr	r3, [pc, #408]	; (8000cac <HAL_UART_RxCpltCallback+0x214>)
 8000b12:	2203      	movs	r2, #3
 8000b14:	701a      	strb	r2, [r3, #0]
			Rx_buff[2] = Rx_temp;
 8000b16:	4b64      	ldr	r3, [pc, #400]	; (8000ca8 <HAL_UART_RxCpltCallback+0x210>)
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	4b65      	ldr	r3, [pc, #404]	; (8000cb0 <HAL_UART_RxCpltCallback+0x218>)
 8000b1c:	709a      	strb	r2, [r3, #2]
			HAL_UART_Receive_IT(&huart1, Rx_buff + 3, 29);
 8000b1e:	4b66      	ldr	r3, [pc, #408]	; (8000cb8 <HAL_UART_RxCpltCallback+0x220>)
 8000b20:	221d      	movs	r2, #29
 8000b22:	4619      	mov	r1, r3
 8000b24:	4863      	ldr	r0, [pc, #396]	; (8000cb4 <HAL_UART_RxCpltCallback+0x21c>)
 8000b26:	f004 fce1 	bl	80054ec <HAL_UART_Receive_IT>
 8000b2a:	e0b7      	b.n	8000c9c <HAL_UART_RxCpltCallback+0x204>
		}
		else if (Rx_state == 3)
 8000b2c:	4b5f      	ldr	r3, [pc, #380]	; (8000cac <HAL_UART_RxCpltCallback+0x214>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d149      	bne.n	8000bc8 <HAL_UART_RxCpltCallback+0x130>
		{
			uint16_t check_s = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	82fb      	strh	r3, [r7, #22]
			for (int i = 3; i < 30; i++)
 8000b38:	2303      	movs	r3, #3
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	e00a      	b.n	8000b54 <HAL_UART_RxCpltCallback+0xbc>
			{
				check_s += Rx_buff[i];
 8000b3e:	4a5c      	ldr	r2, [pc, #368]	; (8000cb0 <HAL_UART_RxCpltCallback+0x218>)
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4413      	add	r3, r2
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	8afb      	ldrh	r3, [r7, #22]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	82fb      	strh	r3, [r7, #22]
			for (int i = 3; i < 30; i++)
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	3301      	adds	r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	2b1d      	cmp	r3, #29
 8000b58:	ddf1      	ble.n	8000b3e <HAL_UART_RxCpltCallback+0xa6>
			}
			check_s = ~check_s;
 8000b5a:	8afb      	ldrh	r3, [r7, #22]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	82fb      	strh	r3, [r7, #22]

			uint16_t check_recv;
			memcpy(&check_recv, Rx_buff + 30, 2);
 8000b60:	4b56      	ldr	r3, [pc, #344]	; (8000cbc <HAL_UART_RxCpltCallback+0x224>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	81fb      	strh	r3, [r7, #14]

			if (check_recv == check_s)
 8000b68:	89fb      	ldrh	r3, [r7, #14]
 8000b6a:	8afa      	ldrh	r2, [r7, #22]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d122      	bne.n	8000bb6 <HAL_UART_RxCpltCallback+0x11e>
			{
				time_s = HAL_GetTick();
 8000b70:	f001 f970 	bl	8001e54 <HAL_GetTick>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a52      	ldr	r2, [pc, #328]	; (8000cc0 <HAL_UART_RxCpltCallback+0x228>)
 8000b78:	6013      	str	r3, [r2, #0]
				memcpy(&RoboPose_Global[0], Rx_buff + 3, 4);
 8000b7a:	4b4f      	ldr	r3, [pc, #316]	; (8000cb8 <HAL_UART_RxCpltCallback+0x220>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b50      	ldr	r3, [pc, #320]	; (8000cc4 <HAL_UART_RxCpltCallback+0x22c>)
 8000b82:	601a      	str	r2, [r3, #0]
				memcpy(&RoboPose_Global[1], Rx_buff + 7, 4);
 8000b84:	4b50      	ldr	r3, [pc, #320]	; (8000cc8 <HAL_UART_RxCpltCallback+0x230>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b4e      	ldr	r3, [pc, #312]	; (8000cc4 <HAL_UART_RxCpltCallback+0x22c>)
 8000b8c:	605a      	str	r2, [r3, #4]
				memcpy(&RoboPose_Global[2], Rx_buff + 11, 4);
 8000b8e:	4b4f      	ldr	r3, [pc, #316]	; (8000ccc <HAL_UART_RxCpltCallback+0x234>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b4b      	ldr	r3, [pc, #300]	; (8000cc4 <HAL_UART_RxCpltCallback+0x22c>)
 8000b96:	609a      	str	r2, [r3, #8]
				memcpy(&RoboPose[0], Rx_buff + 15, 4);
 8000b98:	4b4d      	ldr	r3, [pc, #308]	; (8000cd0 <HAL_UART_RxCpltCallback+0x238>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <HAL_UART_RxCpltCallback+0x23c>)
 8000ba0:	601a      	str	r2, [r3, #0]
				memcpy(&RoboPose[1], Rx_buff + 19, 4);
 8000ba2:	4b4d      	ldr	r3, [pc, #308]	; (8000cd8 <HAL_UART_RxCpltCallback+0x240>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b4a      	ldr	r3, [pc, #296]	; (8000cd4 <HAL_UART_RxCpltCallback+0x23c>)
 8000baa:	605a      	str	r2, [r3, #4]
				memcpy(&time_stamp_rx, Rx_buff + 23, 4);
 8000bac:	4b4b      	ldr	r3, [pc, #300]	; (8000cdc <HAL_UART_RxCpltCallback+0x244>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b4b      	ldr	r3, [pc, #300]	; (8000ce0 <HAL_UART_RxCpltCallback+0x248>)
 8000bb4:	601a      	str	r2, [r3, #0]

			}

			Rx_state = 0;
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <HAL_UART_RxCpltCallback+0x214>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, &Rx_temp, 1);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	493a      	ldr	r1, [pc, #232]	; (8000ca8 <HAL_UART_RxCpltCallback+0x210>)
 8000bc0:	483c      	ldr	r0, [pc, #240]	; (8000cb4 <HAL_UART_RxCpltCallback+0x21c>)
 8000bc2:	f004 fc93 	bl	80054ec <HAL_UART_Receive_IT>
		{
			data_state = 0;
			HAL_UART_Receive_IT(&huart2, &data_temp, 1);
		}
	}
}
 8000bc6:	e069      	b.n	8000c9c <HAL_UART_RxCpltCallback+0x204>
			Rx_state = 0;
 8000bc8:	4b38      	ldr	r3, [pc, #224]	; (8000cac <HAL_UART_RxCpltCallback+0x214>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, &Rx_temp, 1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4935      	ldr	r1, [pc, #212]	; (8000ca8 <HAL_UART_RxCpltCallback+0x210>)
 8000bd2:	4838      	ldr	r0, [pc, #224]	; (8000cb4 <HAL_UART_RxCpltCallback+0x21c>)
 8000bd4:	f004 fc8a 	bl	80054ec <HAL_UART_Receive_IT>
}
 8000bd8:	e060      	b.n	8000c9c <HAL_UART_RxCpltCallback+0x204>
	else if(huart->Instance == USART2)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a41      	ldr	r2, [pc, #260]	; (8000ce4 <HAL_UART_RxCpltCallback+0x24c>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d15b      	bne.n	8000c9c <HAL_UART_RxCpltCallback+0x204>
		if (data_temp == 'i' && data_state == 0)
 8000be4:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <HAL_UART_RxCpltCallback+0x250>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b69      	cmp	r3, #105	; 0x69
 8000bea:	d110      	bne.n	8000c0e <HAL_UART_RxCpltCallback+0x176>
 8000bec:	4b3f      	ldr	r3, [pc, #252]	; (8000cec <HAL_UART_RxCpltCallback+0x254>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d10c      	bne.n	8000c0e <HAL_UART_RxCpltCallback+0x176>
			data_state = 1;
 8000bf4:	4b3d      	ldr	r3, [pc, #244]	; (8000cec <HAL_UART_RxCpltCallback+0x254>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
			data_buff[0] = data_temp;
 8000bfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <HAL_UART_RxCpltCallback+0x250>)
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	4b3c      	ldr	r3, [pc, #240]	; (8000cf0 <HAL_UART_RxCpltCallback+0x258>)
 8000c00:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &data_temp, 1);
 8000c02:	2201      	movs	r2, #1
 8000c04:	4938      	ldr	r1, [pc, #224]	; (8000ce8 <HAL_UART_RxCpltCallback+0x250>)
 8000c06:	483b      	ldr	r0, [pc, #236]	; (8000cf4 <HAL_UART_RxCpltCallback+0x25c>)
 8000c08:	f004 fc70 	bl	80054ec <HAL_UART_Receive_IT>
 8000c0c:	e046      	b.n	8000c9c <HAL_UART_RxCpltCallback+0x204>
		else if (data_temp == 't' && data_state == 1)
 8000c0e:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <HAL_UART_RxCpltCallback+0x250>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b74      	cmp	r3, #116	; 0x74
 8000c14:	d110      	bne.n	8000c38 <HAL_UART_RxCpltCallback+0x1a0>
 8000c16:	4b35      	ldr	r3, [pc, #212]	; (8000cec <HAL_UART_RxCpltCallback+0x254>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d10c      	bne.n	8000c38 <HAL_UART_RxCpltCallback+0x1a0>
			data_state = 2;
 8000c1e:	4b33      	ldr	r3, [pc, #204]	; (8000cec <HAL_UART_RxCpltCallback+0x254>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	701a      	strb	r2, [r3, #0]
			data_buff[1] = data_temp;
 8000c24:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <HAL_UART_RxCpltCallback+0x250>)
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	4b31      	ldr	r3, [pc, #196]	; (8000cf0 <HAL_UART_RxCpltCallback+0x258>)
 8000c2a:	705a      	strb	r2, [r3, #1]
			HAL_UART_Receive_IT(&huart2, &data_temp, 1);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	492e      	ldr	r1, [pc, #184]	; (8000ce8 <HAL_UART_RxCpltCallback+0x250>)
 8000c30:	4830      	ldr	r0, [pc, #192]	; (8000cf4 <HAL_UART_RxCpltCallback+0x25c>)
 8000c32:	f004 fc5b 	bl	80054ec <HAL_UART_Receive_IT>
 8000c36:	e031      	b.n	8000c9c <HAL_UART_RxCpltCallback+0x204>
		else if (data_temp == 's' && data_state == 2)
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_UART_RxCpltCallback+0x250>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b73      	cmp	r3, #115	; 0x73
 8000c3e:	d111      	bne.n	8000c64 <HAL_UART_RxCpltCallback+0x1cc>
 8000c40:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <HAL_UART_RxCpltCallback+0x254>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d10d      	bne.n	8000c64 <HAL_UART_RxCpltCallback+0x1cc>
			data_state = 3;
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <HAL_UART_RxCpltCallback+0x254>)
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	701a      	strb	r2, [r3, #0]
			data_buff[2] = data_temp;
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <HAL_UART_RxCpltCallback+0x250>)
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <HAL_UART_RxCpltCallback+0x258>)
 8000c54:	709a      	strb	r2, [r3, #2]
			HAL_UART_Receive_IT(&huart2, data_buff + 3, 32);
 8000c56:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <HAL_UART_RxCpltCallback+0x260>)
 8000c58:	2220      	movs	r2, #32
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4825      	ldr	r0, [pc, #148]	; (8000cf4 <HAL_UART_RxCpltCallback+0x25c>)
 8000c5e:	f004 fc45 	bl	80054ec <HAL_UART_Receive_IT>
 8000c62:	e01b      	b.n	8000c9c <HAL_UART_RxCpltCallback+0x204>
		else if (Rx_state == 3)
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_RxCpltCallback+0x214>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d10e      	bne.n	8000c8a <HAL_UART_RxCpltCallback+0x1f2>
			memcpy(ADC_Read, data_buff+3, 32);
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <HAL_UART_RxCpltCallback+0x260>)
 8000c6e:	2220      	movs	r2, #32
 8000c70:	4619      	mov	r1, r3
 8000c72:	4822      	ldr	r0, [pc, #136]	; (8000cfc <HAL_UART_RxCpltCallback+0x264>)
 8000c74:	f009 fd4e 	bl	800a714 <memcpy>
			data_state = 0;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <HAL_UART_RxCpltCallback+0x254>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &data_temp, 1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4919      	ldr	r1, [pc, #100]	; (8000ce8 <HAL_UART_RxCpltCallback+0x250>)
 8000c82:	481c      	ldr	r0, [pc, #112]	; (8000cf4 <HAL_UART_RxCpltCallback+0x25c>)
 8000c84:	f004 fc32 	bl	80054ec <HAL_UART_Receive_IT>
}
 8000c88:	e008      	b.n	8000c9c <HAL_UART_RxCpltCallback+0x204>
			data_state = 0;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_UART_RxCpltCallback+0x254>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &data_temp, 1);
 8000c90:	2201      	movs	r2, #1
 8000c92:	4915      	ldr	r1, [pc, #84]	; (8000ce8 <HAL_UART_RxCpltCallback+0x250>)
 8000c94:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <HAL_UART_RxCpltCallback+0x25c>)
 8000c96:	f004 fc29 	bl	80054ec <HAL_UART_Receive_IT>
}
 8000c9a:	e7ff      	b.n	8000c9c <HAL_UART_RxCpltCallback+0x204>
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40011000 	.word	0x40011000
 8000ca8:	200001b4 	.word	0x200001b4
 8000cac:	200001b5 	.word	0x200001b5
 8000cb0:	20000194 	.word	0x20000194
 8000cb4:	2000044c 	.word	0x2000044c
 8000cb8:	20000197 	.word	0x20000197
 8000cbc:	200001b2 	.word	0x200001b2
 8000cc0:	200001d0 	.word	0x200001d0
 8000cc4:	200001b8 	.word	0x200001b8
 8000cc8:	2000019b 	.word	0x2000019b
 8000ccc:	2000019f 	.word	0x2000019f
 8000cd0:	200001a3 	.word	0x200001a3
 8000cd4:	200001c4 	.word	0x200001c4
 8000cd8:	200001a7 	.word	0x200001a7
 8000cdc:	200001ab 	.word	0x200001ab
 8000ce0:	200001d4 	.word	0x200001d4
 8000ce4:	40004400 	.word	0x40004400
 8000ce8:	20000212 	.word	0x20000212
 8000cec:	20000237 	.word	0x20000237
 8000cf0:	20000214 	.word	0x20000214
 8000cf4:	20000490 	.word	0x20000490
 8000cf8:	20000217 	.word	0x20000217
 8000cfc:	20000238 	.word	0x20000238

08000d00 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

	// Timer 50 hz
	if(htim->Instance == TIM6)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a9e      	ldr	r2, [pc, #632]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	f040 8116 	bne.w	8000f40 <HAL_TIM_PeriodElapsedCallback+0x240>
	{
		encArm = TIM5->CNT;
 8000d14:	4b9d      	ldr	r3, [pc, #628]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	4b9d      	ldr	r3, [pc, #628]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000d1c:	801a      	strh	r2, [r3, #0]
		encLifter = TIM8->CNT;
 8000d1e:	4b9d      	ldr	r3, [pc, #628]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	4b9c      	ldr	r3, [pc, #624]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000d26:	801a      	strh	r2, [r3, #0]

	   if(vacuum_status == 1)
 8000d28:	4b9c      	ldr	r3, [pc, #624]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d005      	beq.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x3c>
		   HAL_GPIO_WritePin(vac_GPIO_Port, vac_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2104      	movs	r1, #4
 8000d34:	489a      	ldr	r0, [pc, #616]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000d36:	f001 fc15 	bl	8002564 <HAL_GPIO_WritePin>
 8000d3a:	e004      	b.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x46>
	   else
		   HAL_GPIO_WritePin(vac_GPIO_Port, vac_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4897      	ldr	r0, [pc, #604]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000d42:	f001 fc0f 	bl	8002564 <HAL_GPIO_WritePin>
	   if(pump_stat == 1)
 8000d46:	4b97      	ldr	r3, [pc, #604]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d006      	beq.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x5c>
		   HAL_GPIO_WritePin(mini_pump_GPIO_Port, mini_pump_Pin, GPIO_PIN_SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d54:	4894      	ldr	r0, [pc, #592]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000d56:	f001 fc05 	bl	8002564 <HAL_GPIO_WritePin>
 8000d5a:	e005      	b.n	8000d68 <HAL_TIM_PeriodElapsedCallback+0x68>
	   else
		   HAL_GPIO_WritePin(mini_pump_GPIO_Port, mini_pump_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d62:	4891      	ldr	r0, [pc, #580]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000d64:	f001 fbfe 	bl	8002564 <HAL_GPIO_WritePin>

	   if(pneumatic_stat == 1)
 8000d68:	4b90      	ldr	r3, [pc, #576]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d005      	beq.n	8000d7c <HAL_TIM_PeriodElapsedCallback+0x7c>
		   HAL_GPIO_WritePin(pneu_GPIO_Port, pneu_Pin, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2101      	movs	r1, #1
 8000d74:	488a      	ldr	r0, [pc, #552]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000d76:	f001 fbf5 	bl	8002564 <HAL_GPIO_WritePin>
 8000d7a:	e004      	b.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x86>
	   else
		   HAL_GPIO_WritePin(pneu_GPIO_Port, pneu_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4887      	ldr	r0, [pc, #540]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000d82:	f001 fbef 	bl	8002564 <HAL_GPIO_WritePin>



//	   pwm_Arm(test_pwm);
//	   pwm_Lifter(lifter_test);
	   if (status_lifter == 2)
 8000d86:	4b8a      	ldr	r3, [pc, #552]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	f040 8082 	bne.w	8000e94 <HAL_TIM_PeriodElapsedCallback+0x194>
		{
			if (status_slider == 255)
 8000d90:	4b88      	ldr	r3, [pc, #544]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2bff      	cmp	r3, #255	; 0xff
 8000d96:	d10c      	bne.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0xb2>
			{
				Arm(tarArm, encArm, limArm);
 8000d98:	4b87      	ldr	r3, [pc, #540]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9e:	4a7c      	ldr	r2, [pc, #496]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000da0:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000da4:	4a85      	ldr	r2, [pc, #532]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000da6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f920 	bl	8000ff0 <Arm>
 8000db0:	e01e      	b.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0xf0>
			}
			else if (status_slider == 0)
 8000db2:	4b80      	ldr	r3, [pc, #512]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d103      	bne.n	8000dc2 <HAL_TIM_PeriodElapsedCallback+0xc2>
			{
				pwm_Arm(30);
 8000dba:	201e      	movs	r0, #30
 8000dbc:	f000 f9f8 	bl	80011b0 <pwm_Arm>
 8000dc0:	e016      	b.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0xf0>
			}
			else if (status_slider == 1)
 8000dc2:	4b7c      	ldr	r3, [pc, #496]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d112      	bne.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0xf0>
			{
				Arm(1700, encArm, 30);
 8000dca:	4b71      	ldr	r3, [pc, #452]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd0:	221e      	movs	r2, #30
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8000dd8:	f000 f90a 	bl	8000ff0 <Arm>

				if (encArm > 1500)
 8000ddc:	4b6c      	ldr	r3, [pc, #432]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000de6:	4293      	cmp	r3, r2
 8000de8:	dd02      	ble.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0xf0>
					status_slider = 255;
 8000dea:	4b72      	ldr	r3, [pc, #456]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000dec:	22ff      	movs	r2, #255	; 0xff
 8000dee:	701a      	strb	r2, [r3, #0]
			}


		   if(status_slider == 0)
 8000df0:	4b70      	ldr	r3, [pc, #448]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d118      	bne.n	8000e2a <HAL_TIM_PeriodElapsedCallback+0x12a>
		   {
			   pwm_Arm(-30);
 8000df8:	f06f 001d 	mvn.w	r0, #29
 8000dfc:	f000 f9d8 	bl	80011b0 <pwm_Arm>
			   if(++timer_slider > 25)
 8000e00:	4b6f      	ldr	r3, [pc, #444]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	4a6e      	ldr	r2, [pc, #440]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b6d      	ldr	r3, [pc, #436]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b19      	cmp	r3, #25
 8000e10:	d905      	bls.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x11e>
			   {
				   timer_slider = 0;
 8000e12:	4b6b      	ldr	r3, [pc, #428]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
				   status_slider = 1;
 8000e18:	4b66      	ldr	r3, [pc, #408]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
			   }
			   prev_enc_slider = encArm;
 8000e1e:	4b5c      	ldr	r3, [pc, #368]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000e20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e24:	4b67      	ldr	r3, [pc, #412]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000e26:	801a      	strh	r2, [r3, #0]
 8000e28:	e034      	b.n	8000e94 <HAL_TIM_PeriodElapsedCallback+0x194>
		   }
		   else if(status_slider == 1)
 8000e2a:	4b62      	ldr	r3, [pc, #392]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d124      	bne.n	8000e7c <HAL_TIM_PeriodElapsedCallback+0x17c>
		   {
			   pwm_Arm(-30);
 8000e32:	f06f 001d 	mvn.w	r0, #29
 8000e36:	f000 f9bb 	bl	80011b0 <pwm_Arm>
			   if(prev_enc_slider == encArm)
 8000e3a:	4b62      	ldr	r3, [pc, #392]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000e3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e40:	4b53      	ldr	r3, [pc, #332]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d105      	bne.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0x156>
				   timer_slider++;
 8000e4a:	4b5d      	ldr	r3, [pc, #372]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a5b      	ldr	r2, [pc, #364]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	e002      	b.n	8000e5c <HAL_TIM_PeriodElapsedCallback+0x15c>
			   else
				   timer_slider =0;
 8000e56:	4b5a      	ldr	r3, [pc, #360]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]

			   if(timer_slider > 50)
 8000e5c:	4b58      	ldr	r3, [pc, #352]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b32      	cmp	r3, #50	; 0x32
 8000e62:	d905      	bls.n	8000e70 <HAL_TIM_PeriodElapsedCallback+0x170>
			   {
				   status_slider = 2;
 8000e64:	4b53      	ldr	r3, [pc, #332]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	701a      	strb	r2, [r3, #0]
				   TIM5->CNT = 0;
 8000e6a:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	625a      	str	r2, [r3, #36]	; 0x24
			   }

			   prev_enc_slider = encArm;
 8000e70:	4b47      	ldr	r3, [pc, #284]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000e72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e76:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000e78:	801a      	strh	r2, [r3, #0]
 8000e7a:	e00b      	b.n	8000e94 <HAL_TIM_PeriodElapsedCallback+0x194>
		   }
		   else
		   {
			   Arm(tarArm, encArm, limArm);
 8000e7c:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e82:	4a43      	ldr	r2, [pc, #268]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000e84:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000e88:	4a4c      	ldr	r2, [pc, #304]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000e8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f8ae 	bl	8000ff0 <Arm>
		   }

		}

	   switch(status_lifter)
 8000e94:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d044      	beq.n	8000f26 <HAL_TIM_PeriodElapsedCallback+0x226>
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	dc6e      	bgt.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x27e>
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <HAL_TIM_PeriodElapsedCallback+0x1aa>
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d019      	beq.n	8000edc <HAL_TIM_PeriodElapsedCallback+0x1dc>
			RobotSpeed[1] = 0;
			RobotSpeed[2] = 0;
		}
		Master_Kirim();
	}
}
 8000ea8:	e069      	b.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x27e>
		   pwm_Lifter(-30);
 8000eaa:	f06f 001d 	mvn.w	r0, #29
 8000eae:	f000 fa9b 	bl	80013e8 <pwm_Lifter>
		   if(++timer_lifter>25)
 8000eb2:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a43      	ldr	r2, [pc, #268]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b19      	cmp	r3, #25
 8000ec2:	d905      	bls.n	8000ed0 <HAL_TIM_PeriodElapsedCallback+0x1d0>
			   timer_lifter = 0;
 8000ec4:	4b40      	ldr	r3, [pc, #256]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
			   status_lifter =1;
 8000eca:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
		   prev_enc_lifter = encLifter;
 8000ed0:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000ed2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000ed8:	801a      	strh	r2, [r3, #0]
		   break;
 8000eda:	e050      	b.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x27e>
		   pwm_Lifter(-30);
 8000edc:	f06f 001d 	mvn.w	r0, #29
 8000ee0:	f000 fa82 	bl	80013e8 <pwm_Lifter>
		   if(prev_enc_lifter == encLifter)
 8000ee4:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000ee6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000eea:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d105      	bne.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x200>
			   timer_lifter++;
 8000ef4:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	4a33      	ldr	r2, [pc, #204]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e002      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x206>
			   timer_lifter = 0;
 8000f00:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
		   prev_enc_lifter = encLifter;
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000f08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000f0e:	801a      	strh	r2, [r3, #0]
		   if(timer_lifter > 50)
 8000f10:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b32      	cmp	r3, #50	; 0x32
 8000f16:	d931      	bls.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0x27c>
			   status_lifter = 2;
 8000f18:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	701a      	strb	r2, [r3, #0]
			   TIM8->CNT = 0;
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
		   break;
 8000f24:	e02a      	b.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0x27c>
		   Lifter(tarLifter, encLifter, limLifter);
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000f2e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000f32:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000f34:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f96b 	bl	8001214 <Lifter>
		   break;
 8000f3e:	e01e      	b.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x27e>
	else if(htim->Instance == TIM7)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a24      	ldr	r2, [pc, #144]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d119      	bne.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x27e>
		if(++var > 1000){
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f5c:	d90b      	bls.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x276>
			RobotSpeed[0] = 0;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
			RobotSpeed[1] = 0;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
			RobotSpeed[2] = 0;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
		Master_Kirim();
 8000f76:	f7ff fb97 	bl	80006a8 <Master_Kirim>
}
 8000f7a:	e000      	b.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x27e>
		   break;
 8000f7c:	bf00      	nop
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40001000 	.word	0x40001000
 8000f8c:	40000c00 	.word	0x40000c00
 8000f90:	200001ec 	.word	0x200001ec
 8000f94:	40010400 	.word	0x40010400
 8000f98:	200001f2 	.word	0x200001f2
 8000f9c:	200001e4 	.word	0x200001e4
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	200001e9 	.word	0x200001e9
 8000fa8:	40020c00 	.word	0x40020c00
 8000fac:	200001e5 	.word	0x200001e5
 8000fb0:	20000202 	.word	0x20000202
 8000fb4:	200001f8 	.word	0x200001f8
 8000fb8:	200001ee 	.word	0x200001ee
 8000fbc:	200001f0 	.word	0x200001f0
 8000fc0:	200001fc 	.word	0x200001fc
 8000fc4:	20000200 	.word	0x20000200
 8000fc8:	20000204 	.word	0x20000204
 8000fcc:	20000208 	.word	0x20000208
 8000fd0:	200001f4 	.word	0x200001f4
 8000fd4:	200001f6 	.word	0x200001f6
 8000fd8:	40001400 	.word	0x40001400
 8000fdc:	2000020c 	.word	0x2000020c
 8000fe0:	200001d8 	.word	0x200001d8

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <Arm>:

float kp_Arm=3.0, ki_Arm=0.0, kd_Arm=0.0;
float kp_Lifter=4.0, ki_Lifter=0.0, kd_Lifter=0.0;

void Arm(short int targetArm, short int encArm, short int limitArm)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	80bb      	strh	r3, [r7, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	807b      	strh	r3, [r7, #2]
//	static float proportional, integral, derivative;
//	static int error, prev_error, sum_error;
//	short int output;

	if(targetArm < -5)
 8001002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001006:	f113 0f05 	cmn.w	r3, #5
 800100a:	da02      	bge.n	8001012 <Arm+0x22>
		targetArm = -5;
 800100c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001010:	80fb      	strh	r3, [r7, #6]

//	if(limitArm > 50){
//		limitArm = 50;
//	}

	errorArm = targetArm - encArm;
 8001012:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001016:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	4a56      	ldr	r2, [pc, #344]	; (8001178 <Arm+0x188>)
 800101e:	6013      	str	r3, [r2, #0]
	sum_errorArm += errorArm;
 8001020:	4b56      	ldr	r3, [pc, #344]	; (800117c <Arm+0x18c>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b54      	ldr	r3, [pc, #336]	; (8001178 <Arm+0x188>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4413      	add	r3, r2
 800102a:	4a54      	ldr	r2, [pc, #336]	; (800117c <Arm+0x18c>)
 800102c:	6013      	str	r3, [r2, #0]

	propoArm			= kp_Arm * errorArm;
 800102e:	4b52      	ldr	r3, [pc, #328]	; (8001178 <Arm+0x188>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800103a:	4b51      	ldr	r3, [pc, #324]	; (8001180 <Arm+0x190>)
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001044:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <Arm+0x194>)
 8001046:	edc3 7a00 	vstr	s15, [r3]
	integralArm 		= ki_Arm * sum_errorArm;
 800104a:	4b4c      	ldr	r3, [pc, #304]	; (800117c <Arm+0x18c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001056:	4b4c      	ldr	r3, [pc, #304]	; (8001188 <Arm+0x198>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001060:	4b4a      	ldr	r3, [pc, #296]	; (800118c <Arm+0x19c>)
 8001062:	edc3 7a00 	vstr	s15, [r3]
	derivativeArm		= kd_Arm * (errorArm - prev_errorArm);
 8001066:	4b44      	ldr	r3, [pc, #272]	; (8001178 <Arm+0x188>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4b49      	ldr	r3, [pc, #292]	; (8001190 <Arm+0x1a0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001078:	4b46      	ldr	r3, [pc, #280]	; (8001194 <Arm+0x1a4>)
 800107a:	edd3 7a00 	vldr	s15, [r3]
 800107e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001082:	4b45      	ldr	r3, [pc, #276]	; (8001198 <Arm+0x1a8>)
 8001084:	edc3 7a00 	vstr	s15, [r3]

	if(errorArm > 99)
 8001088:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <Arm+0x188>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b63      	cmp	r3, #99	; 0x63
 800108e:	dd03      	ble.n	8001098 <Arm+0xa8>
		errorArm = 99;
 8001090:	4b39      	ldr	r3, [pc, #228]	; (8001178 <Arm+0x188>)
 8001092:	2263      	movs	r2, #99	; 0x63
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e008      	b.n	80010aa <Arm+0xba>
	else if(errorArm < -99)
 8001098:	4b37      	ldr	r3, [pc, #220]	; (8001178 <Arm+0x188>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80010a0:	da03      	bge.n	80010aa <Arm+0xba>
		errorArm = -99;
 80010a2:	4b35      	ldr	r3, [pc, #212]	; (8001178 <Arm+0x188>)
 80010a4:	f06f 0262 	mvn.w	r2, #98	; 0x62
 80010a8:	601a      	str	r2, [r3, #0]

	if(sum_errorArm > 99)
 80010aa:	4b34      	ldr	r3, [pc, #208]	; (800117c <Arm+0x18c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b63      	cmp	r3, #99	; 0x63
 80010b0:	dd03      	ble.n	80010ba <Arm+0xca>
			sum_errorArm = 99;
 80010b2:	4b32      	ldr	r3, [pc, #200]	; (800117c <Arm+0x18c>)
 80010b4:	2263      	movs	r2, #99	; 0x63
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e007      	b.n	80010ca <Arm+0xda>
		else if(sum_errorArm < -99)
 80010ba:	4b30      	ldr	r3, [pc, #192]	; (800117c <Arm+0x18c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80010c2:	da02      	bge.n	80010ca <Arm+0xda>
			sum_errorArm = 99;
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <Arm+0x18c>)
 80010c6:	2263      	movs	r2, #99	; 0x63
 80010c8:	601a      	str	r2, [r3, #0]

	if (integralArm > 99)
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <Arm+0x19c>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800119c <Arm+0x1ac>
 80010d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	dd03      	ble.n	80010e6 <Arm+0xf6>
		integralArm = 99;
 80010de:	4b2b      	ldr	r3, [pc, #172]	; (800118c <Arm+0x19c>)
 80010e0:	4a2f      	ldr	r2, [pc, #188]	; (80011a0 <Arm+0x1b0>)
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e00c      	b.n	8001100 <Arm+0x110>
	else if (integralArm < -99)
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <Arm+0x19c>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80011a4 <Arm+0x1b4>
 80010f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	d502      	bpl.n	8001100 <Arm+0x110>
		integralArm = -99;
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <Arm+0x19c>)
 80010fc:	4a2a      	ldr	r2, [pc, #168]	; (80011a8 <Arm+0x1b8>)
 80010fe:	601a      	str	r2, [r3, #0]
//	baca_integral = integral;
	prev_errorArm = errorArm;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <Arm+0x188>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a22      	ldr	r2, [pc, #136]	; (8001190 <Arm+0x1a0>)
 8001106:	6013      	str	r3, [r2, #0]

	outputArm = (short int) (propoArm + integralArm + derivativeArm);
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <Arm+0x194>)
 800110a:	ed93 7a00 	vldr	s14, [r3]
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <Arm+0x19c>)
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <Arm+0x1a8>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001126:	ee17 3a90 	vmov	r3, s15
 800112a:	b21a      	sxth	r2, r3
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <Arm+0x1bc>)
 800112e:	801a      	strh	r2, [r3, #0]

	if (outputArm > limitArm)
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <Arm+0x1bc>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800113a:	429a      	cmp	r2, r3
 800113c:	da03      	bge.n	8001146 <Arm+0x156>
		outputArm = limitArm;
 800113e:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <Arm+0x1bc>)
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	8013      	strh	r3, [r2, #0]
 8001144:	e00e      	b.n	8001164 <Arm+0x174>
	else if (outputArm < -1*limitArm)
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <Arm+0x1bc>)
 8001148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114c:	461a      	mov	r2, r3
 800114e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001152:	425b      	negs	r3, r3
 8001154:	429a      	cmp	r2, r3
 8001156:	da05      	bge.n	8001164 <Arm+0x174>
		outputArm = -1*limitArm;
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	425b      	negs	r3, r3
 800115c:	b29b      	uxth	r3, r3
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <Arm+0x1bc>)
 8001162:	801a      	strh	r2, [r3, #0]

	pwm_Arm(outputArm);
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <Arm+0x1bc>)
 8001166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f820 	bl	80011b0 <pwm_Arm>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000270 	.word	0x20000270
 800117c:	20000278 	.word	0x20000278
 8001180:	20000074 	.word	0x20000074
 8001184:	20000258 	.word	0x20000258
 8001188:	2000028c 	.word	0x2000028c
 800118c:	2000025c 	.word	0x2000025c
 8001190:	20000274 	.word	0x20000274
 8001194:	20000290 	.word	0x20000290
 8001198:	20000260 	.word	0x20000260
 800119c:	42c60000 	.word	0x42c60000
 80011a0:	42c60000 	.word	0x42c60000
 80011a4:	c2c60000 	.word	0xc2c60000
 80011a8:	c2c60000 	.word	0xc2c60000
 80011ac:	20000288 	.word	0x20000288

080011b0 <pwm_Arm>:

void pwm_Arm(short int pwm_outputArm)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
	if (pwm_outputArm > 0)
 80011ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	dd0b      	ble.n	80011da <pwm_Arm+0x2a>
	{

		  HAL_GPIO_WritePin(ARM_D1_GPIO_Port, ARM_D1_Pin, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c8:	480f      	ldr	r0, [pc, #60]	; (8001208 <pwm_Arm+0x58>)
 80011ca:	f001 f9cb 	bl	8002564 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(ARM_D2_GPIO_Port, ARM_D2_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(Motor_s_bak_GPIO_Port, Motor_s_bak_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2120      	movs	r1, #32
 80011d2:	480e      	ldr	r0, [pc, #56]	; (800120c <pwm_Arm+0x5c>)
 80011d4:	f001 f9c6 	bl	8002564 <HAL_GPIO_WritePin>
 80011d8:	e00a      	b.n	80011f0 <pwm_Arm+0x40>
	}
	else
	{
		  HAL_GPIO_WritePin(ARM_D1_GPIO_Port, ARM_D1_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <pwm_Arm+0x58>)
 80011e2:	f001 f9bf 	bl	8002564 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(ARM_D2_GPIO_Port, ARM_D2_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(Motor_s_bak_GPIO_Port, Motor_s_bak_Pin, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2120      	movs	r1, #32
 80011ea:	4808      	ldr	r0, [pc, #32]	; (800120c <pwm_Arm+0x5c>)
 80011ec:	f001 f9ba 	bl	8002564 <HAL_GPIO_WritePin>

	}
	TIM12->CCR2 = abs(pwm_outputArm);
 80011f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bfb8      	it	lt
 80011f8:	425b      	neglt	r3, r3
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <pwm_Arm+0x60>)
 80011fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40020400 	.word	0x40020400
 800120c:	40020800 	.word	0x40020800
 8001210:	40001800 	.word	0x40001800

08001214 <Lifter>:

void Lifter(short int targetLifter, short int encLifter, short int limitLifter)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	80fb      	strh	r3, [r7, #6]
 800121e:	460b      	mov	r3, r1
 8001220:	80bb      	strh	r3, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	807b      	strh	r3, [r7, #2]
//	static float proportional, integral, derivative;
//	static int error, prev_error, sum_error;
//	short int output;
	if(targetLifter<-5){
 8001226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122a:	f113 0f05 	cmn.w	r3, #5
 800122e:	da03      	bge.n	8001238 <Lifter+0x24>
		targetLifter = -5;
 8001230:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001234:	80fb      	strh	r3, [r7, #6]
 8001236:	e007      	b.n	8001248 <Lifter+0x34>
	}
	else if(targetLifter>800){
 8001238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001240:	dd02      	ble.n	8001248 <Lifter+0x34>
		targetLifter = 800;
 8001242:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001246:	80fb      	strh	r3, [r7, #6]
	}

//	if(limitLifter > 30)
//		limitLifter = 30;

	errorLifter = targetLifter - encLifter;
 8001248:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800124c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	4a57      	ldr	r2, [pc, #348]	; (80013b0 <Lifter+0x19c>)
 8001254:	6013      	str	r3, [r2, #0]
	sum_errorLifter += errorLifter;
 8001256:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <Lifter+0x1a0>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b55      	ldr	r3, [pc, #340]	; (80013b0 <Lifter+0x19c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a54      	ldr	r2, [pc, #336]	; (80013b4 <Lifter+0x1a0>)
 8001262:	6013      	str	r3, [r2, #0]

	propoLifter			= kp_Lifter * errorLifter;
 8001264:	4b52      	ldr	r3, [pc, #328]	; (80013b0 <Lifter+0x19c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001270:	4b51      	ldr	r3, [pc, #324]	; (80013b8 <Lifter+0x1a4>)
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127a:	4b50      	ldr	r3, [pc, #320]	; (80013bc <Lifter+0x1a8>)
 800127c:	edc3 7a00 	vstr	s15, [r3]
	integralLifter 		= ki_Lifter * sum_errorLifter;
 8001280:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <Lifter+0x1a0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128c:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <Lifter+0x1ac>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001296:	4b4b      	ldr	r3, [pc, #300]	; (80013c4 <Lifter+0x1b0>)
 8001298:	edc3 7a00 	vstr	s15, [r3]
	derivativeLifter		= kd_Lifter * (errorLifter - prev_errorLifter);
 800129c:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <Lifter+0x19c>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b49      	ldr	r3, [pc, #292]	; (80013c8 <Lifter+0x1b4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ae:	4b47      	ldr	r3, [pc, #284]	; (80013cc <Lifter+0x1b8>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <Lifter+0x1bc>)
 80012ba:	edc3 7a00 	vstr	s15, [r3]

	if(errorLifter > 99)
 80012be:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <Lifter+0x19c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b63      	cmp	r3, #99	; 0x63
 80012c4:	dd03      	ble.n	80012ce <Lifter+0xba>
		errorLifter = 99;
 80012c6:	4b3a      	ldr	r3, [pc, #232]	; (80013b0 <Lifter+0x19c>)
 80012c8:	2263      	movs	r2, #99	; 0x63
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	e008      	b.n	80012e0 <Lifter+0xcc>
	else if(errorLifter < -99)
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <Lifter+0x19c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80012d6:	da03      	bge.n	80012e0 <Lifter+0xcc>
		errorLifter = -99;
 80012d8:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <Lifter+0x19c>)
 80012da:	f06f 0262 	mvn.w	r2, #98	; 0x62
 80012de:	601a      	str	r2, [r3, #0]

	if(sum_errorLifter > 99)
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <Lifter+0x1a0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b63      	cmp	r3, #99	; 0x63
 80012e6:	dd03      	ble.n	80012f0 <Lifter+0xdc>
			sum_errorLifter = 99;
 80012e8:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <Lifter+0x1a0>)
 80012ea:	2263      	movs	r2, #99	; 0x63
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	e007      	b.n	8001300 <Lifter+0xec>
		else if(sum_errorLifter < -99)
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <Lifter+0x1a0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80012f8:	da02      	bge.n	8001300 <Lifter+0xec>
			sum_errorLifter = 99;
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <Lifter+0x1a0>)
 80012fc:	2263      	movs	r2, #99	; 0x63
 80012fe:	601a      	str	r2, [r3, #0]

	if (integralLifter > 99)
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <Lifter+0x1b0>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80013d4 <Lifter+0x1c0>
 800130a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	dd03      	ble.n	800131c <Lifter+0x108>
		integralLifter = 99;
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <Lifter+0x1b0>)
 8001316:	4a30      	ldr	r2, [pc, #192]	; (80013d8 <Lifter+0x1c4>)
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	e00c      	b.n	8001336 <Lifter+0x122>
	else if (integralLifter < -99)
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <Lifter+0x1b0>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80013dc <Lifter+0x1c8>
 8001326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	d502      	bpl.n	8001336 <Lifter+0x122>
		integralLifter = -99;
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <Lifter+0x1b0>)
 8001332:	4a2b      	ldr	r2, [pc, #172]	; (80013e0 <Lifter+0x1cc>)
 8001334:	601a      	str	r2, [r3, #0]
//	baca_integral = integral;
	prev_errorLifter = errorLifter;
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <Lifter+0x19c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <Lifter+0x1b4>)
 800133c:	6013      	str	r3, [r2, #0]

	outputLifter = (short int) (propoLifter + integralLifter + derivativeLifter);
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <Lifter+0x1a8>)
 8001340:	ed93 7a00 	vldr	s14, [r3]
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <Lifter+0x1b0>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <Lifter+0x1bc>)
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135c:	ee17 3a90 	vmov	r3, s15
 8001360:	b21a      	sxth	r2, r3
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <Lifter+0x1d0>)
 8001364:	801a      	strh	r2, [r3, #0]

	if (outputLifter > limitLifter)
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <Lifter+0x1d0>)
 8001368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001370:	429a      	cmp	r2, r3
 8001372:	da03      	bge.n	800137c <Lifter+0x168>
		outputLifter = limitLifter;
 8001374:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <Lifter+0x1d0>)
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	8013      	strh	r3, [r2, #0]
 800137a:	e00e      	b.n	800139a <Lifter+0x186>
	else if (outputLifter < -1*limitLifter)
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <Lifter+0x1d0>)
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	461a      	mov	r2, r3
 8001384:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001388:	425b      	negs	r3, r3
 800138a:	429a      	cmp	r2, r3
 800138c:	da05      	bge.n	800139a <Lifter+0x186>
		outputLifter = -1*limitLifter;
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	425b      	negs	r3, r3
 8001392:	b29b      	uxth	r3, r3
 8001394:	b21a      	sxth	r2, r3
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <Lifter+0x1d0>)
 8001398:	801a      	strh	r2, [r3, #0]

	pwm_Lifter(outputLifter);
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <Lifter+0x1d0>)
 800139c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f821 	bl	80013e8 <pwm_Lifter>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000027c 	.word	0x2000027c
 80013b4:	20000284 	.word	0x20000284
 80013b8:	20000078 	.word	0x20000078
 80013bc:	20000264 	.word	0x20000264
 80013c0:	20000294 	.word	0x20000294
 80013c4:	20000268 	.word	0x20000268
 80013c8:	20000280 	.word	0x20000280
 80013cc:	20000298 	.word	0x20000298
 80013d0:	2000026c 	.word	0x2000026c
 80013d4:	42c60000 	.word	0x42c60000
 80013d8:	42c60000 	.word	0x42c60000
 80013dc:	c2c60000 	.word	0xc2c60000
 80013e0:	c2c60000 	.word	0xc2c60000
 80013e4:	2000028a 	.word	0x2000028a

080013e8 <pwm_Lifter>:

void pwm_Lifter(short int pwm_outputLifter)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
	if (pwm_outputLifter > 0)
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	dd0c      	ble.n	8001414 <pwm_Lifter+0x2c>
	{
		  HAL_GPIO_WritePin(LIFT_D1_GPIO_Port, LIFT_D1_Pin, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001400:	4810      	ldr	r0, [pc, #64]	; (8001444 <pwm_Lifter+0x5c>)
 8001402:	f001 f8af 	bl	8002564 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LIFT_D2_GPIO_Port, LIFT_D2_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <pwm_Lifter+0x5c>)
 800140e:	f001 f8a9 	bl	8002564 <HAL_GPIO_WritePin>
 8001412:	e00b      	b.n	800142c <pwm_Lifter+0x44>
	}
	else
	{
		  HAL_GPIO_WritePin(LIFT_D1_GPIO_Port, LIFT_D1_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141a:	480a      	ldr	r0, [pc, #40]	; (8001444 <pwm_Lifter+0x5c>)
 800141c:	f001 f8a2 	bl	8002564 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LIFT_D2_GPIO_Port, LIFT_D2_Pin, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <pwm_Lifter+0x5c>)
 8001428:	f001 f89c 	bl	8002564 <HAL_GPIO_WritePin>
	}
	TIM9->CCR1 = abs(pwm_outputLifter);
 800142c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001430:	2b00      	cmp	r3, #0
 8001432:	bfb8      	it	lt
 8001434:	425b      	neglt	r3, r3
 8001436:	b29a      	uxth	r2, r3
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <pwm_Lifter+0x60>)
 800143a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	40014000 	.word	0x40014000

0800144c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <HAL_MspInit+0x4c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_MspInit+0x4c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_MspInit+0x4c>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_MspInit+0x4c>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e8:	f000 fca0 	bl	8001e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <USART1_IRQHandler+0x10>)
 80014f6:	f004 f829 	bl	800554c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000044c 	.word	0x2000044c

08001504 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <USART2_IRQHandler+0x10>)
 800150a:	f004 f81f 	bl	800554c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000490 	.word	0x20000490

08001518 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <TIM6_DAC_IRQHandler+0x10>)
 800151e:	f003 fa5b 	bl	80049d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200002e4 	.word	0x200002e4

0800152c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <TIM7_IRQHandler+0x10>)
 8001532:	f003 fa51 	bl	80049d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000032c 	.word	0x2000032c

08001540 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <OTG_FS_IRQHandler+0x10>)
 8001546:	f001 f976 	bl	8002836 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200019e4 	.word	0x200019e4

08001554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <MX_TIM5_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2224      	movs	r2, #36	; 0x24
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f009 f8d2 	bl	800a730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001594:	4b20      	ldr	r3, [pc, #128]	; (8001618 <MX_TIM5_Init+0xa0>)
 8001596:	4a21      	ldr	r2, [pc, #132]	; (800161c <MX_TIM5_Init+0xa4>)
 8001598:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800159a:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <MX_TIM5_Init+0xa0>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <MX_TIM5_Init+0xa0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_TIM5_Init+0xa0>)
 80015a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_TIM5_Init+0xa0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_TIM5_Init+0xa0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015ba:	2303      	movs	r3, #3
 80015bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015c2:	2301      	movs	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 7;
 80015ca:	2307      	movs	r3, #7
 80015cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015d2:	2301      	movs	r3, #1
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 7;
 80015da:	2307      	movs	r3, #7
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <MX_TIM5_Init+0xa0>)
 80015e6:	f003 f8c3 	bl	8004770 <HAL_TIM_Encoder_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80015f0:	f7ff fcf8 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_TIM5_Init+0xa0>)
 8001602:	f003 fe51 	bl	80052a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800160c:	f7ff fcea 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	3730      	adds	r7, #48	; 0x30
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2000029c 	.word	0x2000029c
 800161c:	40000c00 	.word	0x40000c00

08001620 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001626:	463b      	mov	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_TIM6_Init+0x64>)
 8001630:	4a15      	ldr	r2, [pc, #84]	; (8001688 <MX_TIM6_Init+0x68>)
 8001632:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <MX_TIM6_Init+0x64>)
 8001636:	2253      	movs	r2, #83	; 0x53
 8001638:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_TIM6_Init+0x64>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_TIM6_Init+0x64>)
 8001642:	f242 720f 	movw	r2, #9999	; 0x270f
 8001646:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_TIM6_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <MX_TIM6_Init+0x64>)
 8001650:	f002 feb6 	bl	80043c0 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800165a:	f7ff fcc3 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001666:	463b      	mov	r3, r7
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_TIM6_Init+0x64>)
 800166c:	f003 fe1c 	bl	80052a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001676:	f7ff fcb5 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002e4 	.word	0x200002e4
 8001688:	40001000 	.word	0x40001000

0800168c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_TIM7_Init+0x64>)
 800169c:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <MX_TIM7_Init+0x68>)
 800169e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84 - 1;
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_TIM7_Init+0x64>)
 80016a2:	2253      	movs	r2, #83	; 0x53
 80016a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_TIM7_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000 - 1;
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <MX_TIM7_Init+0x64>)
 80016ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016b2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_TIM7_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80016ba:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MX_TIM7_Init+0x64>)
 80016bc:	f002 fe80 	bl	80043c0 <HAL_TIM_Base_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80016c6:	f7ff fc8d 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80016d2:	463b      	mov	r3, r7
 80016d4:	4619      	mov	r1, r3
 80016d6:	4806      	ldr	r0, [pc, #24]	; (80016f0 <MX_TIM7_Init+0x64>)
 80016d8:	f003 fde6 	bl	80052a8 <HAL_TIMEx_MasterConfigSynchronization>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80016e2:	f7ff fc7f 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000032c 	.word	0x2000032c
 80016f4:	40001400 	.word	0x40001400

080016f8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	; 0x30
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	2224      	movs	r2, #36	; 0x24
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f009 f812 	bl	800a730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <MX_TIM8_Init+0xa8>)
 8001716:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <MX_TIM8_Init+0xac>)
 8001718:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <MX_TIM8_Init+0xa8>)
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_TIM8_Init+0xa8>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <MX_TIM8_Init+0xa8>)
 8001728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800172c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_TIM8_Init+0xa8>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_TIM8_Init+0xa8>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_TIM8_Init+0xa8>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001740:	2303      	movs	r3, #3
 8001742:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001748:	2301      	movs	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 7;
 8001750:	2307      	movs	r3, #7
 8001752:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001758:	2301      	movs	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 7;
 8001760:	2307      	movs	r3, #7
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_TIM8_Init+0xa8>)
 800176c:	f003 f800 	bl	8004770 <HAL_TIM_Encoder_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001776:	f7ff fc35 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_TIM8_Init+0xa8>)
 8001788:	f003 fd8e 	bl	80052a8 <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001792:	f7ff fc27 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3730      	adds	r7, #48	; 0x30
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000374 	.word	0x20000374
 80017a4:	40010400 	.word	0x40010400

080017a8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <MX_TIM9_Init+0x80>)
 80017c2:	4a1a      	ldr	r2, [pc, #104]	; (800182c <MX_TIM9_Init+0x84>)
 80017c4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <MX_TIM9_Init+0x80>)
 80017c8:	22a7      	movs	r2, #167	; 0xa7
 80017ca:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_TIM9_Init+0x80>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <MX_TIM9_Init+0x80>)
 80017d4:	2263      	movs	r2, #99	; 0x63
 80017d6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_TIM9_Init+0x80>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_TIM9_Init+0x80>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80017e4:	4810      	ldr	r0, [pc, #64]	; (8001828 <MX_TIM9_Init+0x80>)
 80017e6:	f002 feab 	bl	8004540 <HAL_TIM_PWM_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 80017f0:	f7ff fbf8 	bl	8000fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f4:	2360      	movs	r3, #96	; 0x60
 80017f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	4619      	mov	r1, r3
 800180a:	4807      	ldr	r0, [pc, #28]	; (8001828 <MX_TIM9_Init+0x80>)
 800180c:	f003 f9ec 	bl	8004be8 <HAL_TIM_PWM_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8001816:	f7ff fbe5 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800181a:	4803      	ldr	r0, [pc, #12]	; (8001828 <MX_TIM9_Init+0x80>)
 800181c:	f000 f948 	bl	8001ab0 <HAL_TIM_MspPostInit>

}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200003bc 	.word	0x200003bc
 800182c:	40014000 	.word	0x40014000

08001830 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
 8001844:	615a      	str	r2, [r3, #20]
 8001846:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <MX_TIM12_Init+0x80>)
 800184a:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <MX_TIM12_Init+0x84>)
 800184c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_TIM12_Init+0x80>)
 8001850:	2253      	movs	r2, #83	; 0x53
 8001852:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_TIM12_Init+0x80>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100-1;
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <MX_TIM12_Init+0x80>)
 800185c:	2263      	movs	r2, #99	; 0x63
 800185e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_TIM12_Init+0x80>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_TIM12_Init+0x80>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800186c:	4810      	ldr	r0, [pc, #64]	; (80018b0 <MX_TIM12_Init+0x80>)
 800186e:	f002 fe67 	bl	8004540 <HAL_TIM_PWM_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001878:	f7ff fbb4 	bl	8000fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187c:	2360      	movs	r3, #96	; 0x60
 800187e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2204      	movs	r2, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4807      	ldr	r0, [pc, #28]	; (80018b0 <MX_TIM12_Init+0x80>)
 8001894:	f003 f9a8 	bl	8004be8 <HAL_TIM_PWM_ConfigChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800189e:	f7ff fba1 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80018a2:	4803      	ldr	r0, [pc, #12]	; (80018b0 <MX_TIM12_Init+0x80>)
 80018a4:	f000 f904 	bl	8001ab0 <HAL_TIM_MspPostInit>

}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000404 	.word	0x20000404
 80018b4:	40001800 	.word	0x40001800

080018b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a32      	ldr	r2, [pc, #200]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d12c      	bne.n	8001934 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a30      	ldr	r2, [pc, #192]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a29      	ldr	r2, [pc, #164]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = ENC0_A_Pin|ENC0_B_Pin;
 8001912:	2303      	movs	r3, #3
 8001914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001922:	2302      	movs	r3, #2
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	4619      	mov	r1, r3
 800192c:	481e      	ldr	r0, [pc, #120]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800192e:	f000 fc65 	bl	80021fc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001932:	e030      	b.n	8001996 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM8)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_TIM_Encoder_MspInit+0xf4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12b      	bne.n	8001996 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8001976:	23c0      	movs	r3, #192	; 0xc0
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001986:	2303      	movs	r3, #3
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001992:	f000 fc33 	bl	80021fc <HAL_GPIO_Init>
}
 8001996:	bf00      	nop
 8001998:	3730      	adds	r7, #48	; 0x30
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40000c00 	.word	0x40000c00
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40010400 	.word	0x40010400
 80019b0:	40020800 	.word	0x40020800

080019b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <HAL_TIM_Base_MspInit+0x80>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d116      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_TIM_Base_MspInit+0x84>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a1a      	ldr	r2, [pc, #104]	; (8001a38 <HAL_TIM_Base_MspInit+0x84>)
 80019d0:	f043 0310 	orr.w	r3, r3, #16
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_TIM_Base_MspInit+0x84>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2036      	movs	r0, #54	; 0x36
 80019e8:	f000 fb3f 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019ec:	2036      	movs	r0, #54	; 0x36
 80019ee:	f000 fb58 	bl	80020a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80019f2:	e01a      	b.n	8001a2a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_TIM_Base_MspInit+0x88>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d115      	bne.n	8001a2a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_TIM_Base_MspInit+0x84>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a0c      	ldr	r2, [pc, #48]	; (8001a38 <HAL_TIM_Base_MspInit+0x84>)
 8001a08:	f043 0320 	orr.w	r3, r3, #32
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_TIM_Base_MspInit+0x84>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2037      	movs	r0, #55	; 0x37
 8001a20:	f000 fb23 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a24:	2037      	movs	r0, #55	; 0x37
 8001a26:	f000 fb3c 	bl	80020a2 <HAL_NVIC_EnableIRQ>
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40001000 	.word	0x40001000
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40001400 	.word	0x40001400

08001a40 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <HAL_TIM_PWM_MspInit+0x64>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10e      	bne.n	8001a70 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x68>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x68>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a60:	6453      	str	r3, [r2, #68]	; 0x44
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x68>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001a6e:	e012      	b.n	8001a96 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_TIM_PWM_MspInit+0x6c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10d      	bne.n	8001a96 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x68>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x68>)
 8001a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x68>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40014000 	.word	0x40014000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40001800 	.word	0x40001800

08001ab0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <HAL_TIM_MspPostInit+0xb0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d11e      	bne.n	8001b10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <HAL_TIM_MspPostInit+0xb4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a22      	ldr	r2, [pc, #136]	; (8001b64 <HAL_TIM_MspPostInit+0xb4>)
 8001adc:	f043 0310 	orr.w	r3, r3, #16
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_TIM_MspPostInit+0xb4>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = PWM_LIFT_Pin;
 8001aee:	2320      	movs	r3, #32
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001afe:	2303      	movs	r3, #3
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LIFT_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4817      	ldr	r0, [pc, #92]	; (8001b68 <HAL_TIM_MspPostInit+0xb8>)
 8001b0a:	f000 fb77 	bl	80021fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001b0e:	e023      	b.n	8001b58 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <HAL_TIM_MspPostInit+0xbc>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d11e      	bne.n	8001b58 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_TIM_MspPostInit+0xb4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_TIM_MspPostInit+0xb4>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_TIM_MspPostInit+0xb4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ARM_Pin;
 8001b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001b48:	2309      	movs	r3, #9
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ARM_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	4807      	ldr	r0, [pc, #28]	; (8001b70 <HAL_TIM_MspPostInit+0xc0>)
 8001b54:	f000 fb52 	bl	80021fc <HAL_GPIO_Init>
}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40014000 	.word	0x40014000
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40001800 	.word	0x40001800
 8001b70:	40020400 	.word	0x40020400

08001b74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <MX_USART1_UART_Init+0x50>)
 8001b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001bac:	f003 fc0c 	bl	80053c8 <HAL_UART_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bb6:	f7ff fa15 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000044c 	.word	0x2000044c
 8001bc4:	40011000 	.word	0x40011000

08001bc8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <MX_USART2_UART_Init+0x50>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bd4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001c00:	f003 fbe2 	bl	80053c8 <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c0a:	f7ff f9eb 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000490 	.word	0x20000490
 8001c18:	40004400 	.word	0x40004400

08001c1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08c      	sub	sp, #48	; 0x30
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a3a      	ldr	r2, [pc, #232]	; (8001d24 <HAL_UART_MspInit+0x108>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d135      	bne.n	8001caa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_UART_MspInit+0x10c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a38      	ldr	r2, [pc, #224]	; (8001d28 <HAL_UART_MspInit+0x10c>)
 8001c48:	f043 0310 	orr.w	r3, r3, #16
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <HAL_UART_MspInit+0x10c>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	61bb      	str	r3, [r7, #24]
 8001c58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	4b32      	ldr	r3, [pc, #200]	; (8001d28 <HAL_UART_MspInit+0x10c>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a31      	ldr	r2, [pc, #196]	; (8001d28 <HAL_UART_MspInit+0x10c>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <HAL_UART_MspInit+0x10c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c88:	2307      	movs	r3, #7
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	4619      	mov	r1, r3
 8001c92:	4826      	ldr	r0, [pc, #152]	; (8001d2c <HAL_UART_MspInit+0x110>)
 8001c94:	f000 fab2 	bl	80021fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2025      	movs	r0, #37	; 0x25
 8001c9e:	f000 f9e4 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ca2:	2025      	movs	r0, #37	; 0x25
 8001ca4:	f000 f9fd 	bl	80020a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ca8:	e038      	b.n	8001d1c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <HAL_UART_MspInit+0x114>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d133      	bne.n	8001d1c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <HAL_UART_MspInit+0x10c>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	; (8001d28 <HAL_UART_MspInit+0x10c>)
 8001cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <HAL_UART_MspInit+0x10c>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_UART_MspInit+0x10c>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <HAL_UART_MspInit+0x10c>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_UART_MspInit+0x10c>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cec:	230c      	movs	r3, #12
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	4619      	mov	r1, r3
 8001d06:	4809      	ldr	r0, [pc, #36]	; (8001d2c <HAL_UART_MspInit+0x110>)
 8001d08:	f000 fa78 	bl	80021fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	2026      	movs	r0, #38	; 0x26
 8001d12:	f000 f9aa 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d16:	2026      	movs	r0, #38	; 0x26
 8001d18:	f000 f9c3 	bl	80020a2 <HAL_NVIC_EnableIRQ>
}
 8001d1c:	bf00      	nop
 8001d1e:	3730      	adds	r7, #48	; 0x30
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40011000 	.word	0x40011000
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40004400 	.word	0x40004400

08001d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d40:	e002      	b.n	8001d48 <LoopCopyDataInit>

08001d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d46:	3304      	adds	r3, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d4c:	d3f9      	bcc.n	8001d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d50:	4c0b      	ldr	r4, [pc, #44]	; (8001d80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d54:	e001      	b.n	8001d5a <LoopFillZerobss>

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d58:	3204      	adds	r2, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d5e:	f7ff fbf9 	bl	8001554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d62:	f008 fcb3 	bl	800a6cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d66:	f7fe fcd7 	bl	8000718 <main>
  bx  lr    
 8001d6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8001d78:	0800a7c8 	.word	0x0800a7c8
  ldr r2, =_sbss
 8001d7c:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8001d80:	20002110 	.word	0x20002110

08001d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_Init+0x40>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_Init+0x40>)
 8001d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_Init+0x40>)
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 f94f 	bl	8002054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db6:	200f      	movs	r0, #15
 8001db8:	f000 f808 	bl	8001dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dbc:	f7ff fb46 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023c00 	.word	0x40023c00

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_InitTick+0x54>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_InitTick+0x58>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f967 	bl	80020be <HAL_SYSTICK_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00e      	b.n	8001e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d80a      	bhi.n	8001e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e08:	f000 f92f 	bl	800206a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e0c:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <HAL_InitTick+0x5c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000007c 	.word	0x2000007c
 8001e24:	20000084 	.word	0x20000084
 8001e28:	20000080 	.word	0x20000080

08001e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x20>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_IncTick+0x24>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_IncTick+0x24>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000084 	.word	0x20000084
 8001e50:	200004d4 	.word	0x200004d4

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_GetTick+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	200004d4 	.word	0x200004d4

08001e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff ffee 	bl	8001e54 <HAL_GetTick>
 8001e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e84:	d005      	beq.n	8001e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_Delay+0x44>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4413      	add	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e92:	bf00      	nop
 8001e94:	f7ff ffde 	bl	8001e54 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d8f7      	bhi.n	8001e94 <HAL_Delay+0x28>
  {
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000084 	.word	0x20000084

08001eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db0b      	blt.n	8001f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4907      	ldr	r1, [pc, #28]	; (8001f50 <__NVIC_EnableIRQ+0x38>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2001      	movs	r0, #1
 8001f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000e100 	.word	0xe000e100

08001f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	db0a      	blt.n	8001f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <__NVIC_SetPriority+0x4c>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	0112      	lsls	r2, r2, #4
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	440b      	add	r3, r1
 8001f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f7c:	e00a      	b.n	8001f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4908      	ldr	r1, [pc, #32]	; (8001fa4 <__NVIC_SetPriority+0x50>)
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	3b04      	subs	r3, #4
 8001f8c:	0112      	lsls	r2, r2, #4
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	440b      	add	r3, r1
 8001f92:	761a      	strb	r2, [r3, #24]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000e100 	.word	0xe000e100
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f1c3 0307 	rsb	r3, r3, #7
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	bf28      	it	cs
 8001fc6:	2304      	movcs	r3, #4
 8001fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d902      	bls.n	8001fd8 <NVIC_EncodePriority+0x30>
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3b03      	subs	r3, #3
 8001fd6:	e000      	b.n	8001fda <NVIC_EncodePriority+0x32>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	401a      	ands	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	43d9      	mvns	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	4313      	orrs	r3, r2
         );
}
 8002002:	4618      	mov	r0, r3
 8002004:	3724      	adds	r7, #36	; 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002020:	d301      	bcc.n	8002026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002022:	2301      	movs	r3, #1
 8002024:	e00f      	b.n	8002046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <SysTick_Config+0x40>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202e:	210f      	movs	r1, #15
 8002030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002034:	f7ff ff8e 	bl	8001f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <SysTick_Config+0x40>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <SysTick_Config+0x40>)
 8002040:	2207      	movs	r2, #7
 8002042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	e000e010 	.word	0xe000e010

08002054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff29 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800207c:	f7ff ff3e 	bl	8001efc <__NVIC_GetPriorityGrouping>
 8002080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	6978      	ldr	r0, [r7, #20]
 8002088:	f7ff ff8e 	bl	8001fa8 <NVIC_EncodePriority>
 800208c:	4602      	mov	r2, r0
 800208e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff5d 	bl	8001f54 <__NVIC_SetPriority>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff31 	bl	8001f18 <__NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffa2 	bl	8002010 <SysTick_Config>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff feb6 	bl	8001e54 <HAL_GetTick>
 80020e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d008      	beq.n	8002108 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e052      	b.n	80021ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0216 	bic.w	r2, r2, #22
 8002116:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002126:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d103      	bne.n	8002138 <HAL_DMA_Abort+0x62>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0208 	bic.w	r2, r2, #8
 8002146:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002158:	e013      	b.n	8002182 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800215a:	f7ff fe7b 	bl	8001e54 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b05      	cmp	r3, #5
 8002166:	d90c      	bls.n	8002182 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2203      	movs	r2, #3
 8002172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e015      	b.n	80021ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1e4      	bne.n	800215a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	223f      	movs	r2, #63	; 0x3f
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d004      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e00c      	b.n	80021ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2205      	movs	r2, #5
 80021d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	e16b      	b.n	80024f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	429a      	cmp	r2, r3
 8002232:	f040 815a 	bne.w	80024ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d005      	beq.n	800224e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224a:	2b02      	cmp	r3, #2
 800224c:	d130      	bne.n	80022b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002284:	2201      	movs	r2, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 0201 	and.w	r2, r3, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d017      	beq.n	80022ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d123      	bne.n	8002340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	69b9      	ldr	r1, [r7, #24]
 800233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0203 	and.w	r2, r3, #3
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80b4 	beq.w	80024ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b60      	ldr	r3, [pc, #384]	; (8002508 <HAL_GPIO_Init+0x30c>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a5f      	ldr	r2, [pc, #380]	; (8002508 <HAL_GPIO_Init+0x30c>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b5d      	ldr	r3, [pc, #372]	; (8002508 <HAL_GPIO_Init+0x30c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239e:	4a5b      	ldr	r2, [pc, #364]	; (800250c <HAL_GPIO_Init+0x310>)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a52      	ldr	r2, [pc, #328]	; (8002510 <HAL_GPIO_Init+0x314>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02b      	beq.n	8002422 <HAL_GPIO_Init+0x226>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a51      	ldr	r2, [pc, #324]	; (8002514 <HAL_GPIO_Init+0x318>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d025      	beq.n	800241e <HAL_GPIO_Init+0x222>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a50      	ldr	r2, [pc, #320]	; (8002518 <HAL_GPIO_Init+0x31c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01f      	beq.n	800241a <HAL_GPIO_Init+0x21e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4f      	ldr	r2, [pc, #316]	; (800251c <HAL_GPIO_Init+0x320>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d019      	beq.n	8002416 <HAL_GPIO_Init+0x21a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4e      	ldr	r2, [pc, #312]	; (8002520 <HAL_GPIO_Init+0x324>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_GPIO_Init+0x216>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4d      	ldr	r2, [pc, #308]	; (8002524 <HAL_GPIO_Init+0x328>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00d      	beq.n	800240e <HAL_GPIO_Init+0x212>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4c      	ldr	r2, [pc, #304]	; (8002528 <HAL_GPIO_Init+0x32c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <HAL_GPIO_Init+0x20e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4b      	ldr	r2, [pc, #300]	; (800252c <HAL_GPIO_Init+0x330>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_GPIO_Init+0x20a>
 8002402:	2307      	movs	r3, #7
 8002404:	e00e      	b.n	8002424 <HAL_GPIO_Init+0x228>
 8002406:	2308      	movs	r3, #8
 8002408:	e00c      	b.n	8002424 <HAL_GPIO_Init+0x228>
 800240a:	2306      	movs	r3, #6
 800240c:	e00a      	b.n	8002424 <HAL_GPIO_Init+0x228>
 800240e:	2305      	movs	r3, #5
 8002410:	e008      	b.n	8002424 <HAL_GPIO_Init+0x228>
 8002412:	2304      	movs	r3, #4
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x228>
 8002416:	2303      	movs	r3, #3
 8002418:	e004      	b.n	8002424 <HAL_GPIO_Init+0x228>
 800241a:	2302      	movs	r3, #2
 800241c:	e002      	b.n	8002424 <HAL_GPIO_Init+0x228>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_GPIO_Init+0x228>
 8002422:	2300      	movs	r3, #0
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	f002 0203 	and.w	r2, r2, #3
 800242a:	0092      	lsls	r2, r2, #2
 800242c:	4093      	lsls	r3, r2
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002434:	4935      	ldr	r1, [pc, #212]	; (800250c <HAL_GPIO_Init+0x310>)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	3302      	adds	r3, #2
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_GPIO_Init+0x334>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002466:	4a32      	ldr	r2, [pc, #200]	; (8002530 <HAL_GPIO_Init+0x334>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800246c:	4b30      	ldr	r3, [pc, #192]	; (8002530 <HAL_GPIO_Init+0x334>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002490:	4a27      	ldr	r2, [pc, #156]	; (8002530 <HAL_GPIO_Init+0x334>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <HAL_GPIO_Init+0x334>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ba:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <HAL_GPIO_Init+0x334>)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_GPIO_Init+0x334>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e4:	4a12      	ldr	r2, [pc, #72]	; (8002530 <HAL_GPIO_Init+0x334>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3301      	adds	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b0f      	cmp	r3, #15
 80024f4:	f67f ae90 	bls.w	8002218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	40013800 	.word	0x40013800
 8002510:	40020000 	.word	0x40020000
 8002514:	40020400 	.word	0x40020400
 8002518:	40020800 	.word	0x40020800
 800251c:	40020c00 	.word	0x40020c00
 8002520:	40021000 	.word	0x40021000
 8002524:	40021400 	.word	0x40021400
 8002528:	40021800 	.word	0x40021800
 800252c:	40021c00 	.word	0x40021c00
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	887b      	ldrh	r3, [r7, #2]
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e001      	b.n	8002556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002580:	e003      	b.n	800258a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	619a      	str	r2, [r3, #24]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002598:	b08f      	sub	sp, #60	; 0x3c
 800259a:	af0a      	add	r7, sp, #40	; 0x28
 800259c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e10f      	b.n	80027c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f007 fd6e 	bl	800a0a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2203      	movs	r2, #3
 80025cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 ffbf 	bl	800656a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	687e      	ldr	r6, [r7, #4]
 80025f4:	466d      	mov	r5, sp
 80025f6:	f106 0410 	add.w	r4, r6, #16
 80025fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002602:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002606:	e885 0003 	stmia.w	r5, {r0, r1}
 800260a:	1d33      	adds	r3, r6, #4
 800260c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	f003 fe96 	bl	8006340 <USB_CoreInit>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0d0      	b.n	80027c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f003 ffad 	bl	800658c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e04a      	b.n	80026ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	333d      	adds	r3, #61	; 0x3d
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	333c      	adds	r3, #60	; 0x3c
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	b298      	uxth	r0, r3
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3344      	adds	r3, #68	; 0x44
 8002674:	4602      	mov	r2, r0
 8002676:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	3340      	adds	r3, #64	; 0x40
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3348      	adds	r3, #72	; 0x48
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	334c      	adds	r3, #76	; 0x4c
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3354      	adds	r3, #84	; 0x54
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	3301      	adds	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3af      	bcc.n	8002638 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e044      	b.n	8002768 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	3301      	adds	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	d3b5      	bcc.n	80026de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	687e      	ldr	r6, [r7, #4]
 800277a:	466d      	mov	r5, sp
 800277c:	f106 0410 	add.w	r4, r6, #16
 8002780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002788:	e894 0003 	ldmia.w	r4, {r0, r1}
 800278c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002790:	1d33      	adds	r3, r6, #4
 8002792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002794:	6838      	ldr	r0, [r7, #0]
 8002796:	f003 ff45 	bl	8006624 <USB_DevInit>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e00d      	b.n	80027c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f005 f894 	bl	80078ee <USB_DevDisconnect>

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_PCD_Start+0x1c>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e020      	b.n	800282e <HAL_PCD_Start+0x5e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d109      	bne.n	8002810 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002800:	2b01      	cmp	r3, #1
 8002802:	d005      	beq.n	8002810 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f003 fe97 	bl	8006548 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f005 f844 	bl	80078ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002836:	b590      	push	{r4, r7, lr}
 8002838:	b08d      	sub	sp, #52	; 0x34
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f005 f902 	bl	8007a56 <USB_GetMode>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	f040 848a 	bne.w	800316e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f005 f866 	bl	8007930 <USB_ReadInterrupts>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8480 	beq.w	800316c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f005 f853 	bl	8007930 <USB_ReadInterrupts>
 800288a:	4603      	mov	r3, r0
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b02      	cmp	r3, #2
 8002892:	d107      	bne.n	80028a4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f002 0202 	and.w	r2, r2, #2
 80028a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f005 f841 	bl	8007930 <USB_ReadInterrupts>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b10      	cmp	r3, #16
 80028b6:	d161      	bne.n	800297c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0210 	bic.w	r2, r2, #16
 80028c6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	f003 020f 	and.w	r2, r3, #15
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	3304      	adds	r3, #4
 80028e6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	0c5b      	lsrs	r3, r3, #17
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d124      	bne.n	800293e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d035      	beq.n	800296c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800290a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800290e:	b29b      	uxth	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	6a38      	ldr	r0, [r7, #32]
 8002914:	f004 fe78 	bl	8007608 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002924:	441a      	add	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	6a1a      	ldr	r2, [r3, #32]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002936:	441a      	add	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	621a      	str	r2, [r3, #32]
 800293c:	e016      	b.n	800296c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	0c5b      	lsrs	r3, r3, #17
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	2b06      	cmp	r3, #6
 8002948:	d110      	bne.n	800296c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002950:	2208      	movs	r2, #8
 8002952:	4619      	mov	r1, r3
 8002954:	6a38      	ldr	r0, [r7, #32]
 8002956:	f004 fe57 	bl	8007608 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	6a1a      	ldr	r2, [r3, #32]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002966:	441a      	add	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0210 	orr.w	r2, r2, #16
 800297a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f004 ffd5 	bl	8007930 <USB_ReadInterrupts>
 8002986:	4603      	mov	r3, r0
 8002988:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800298c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002990:	f040 80a7 	bne.w	8002ae2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f004 ffda 	bl	8007956 <USB_ReadDevAllOutEpInterrupt>
 80029a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80029a4:	e099      	b.n	8002ada <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 808e 	beq.w	8002ace <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f004 fffe 	bl	80079be <USB_ReadDevOutEPInterrupt>
 80029c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029da:	461a      	mov	r2, r3
 80029dc:	2301      	movs	r3, #1
 80029de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fec2 	bl	800376c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00c      	beq.n	8002a0c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fe:	461a      	mov	r2, r3
 8002a00:	2308      	movs	r3, #8
 8002a02:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 ff98 	bl	800393c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a22:	461a      	mov	r2, r3
 8002a24:	2310      	movs	r3, #16
 8002a26:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d030      	beq.n	8002a94 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b80      	cmp	r3, #128	; 0x80
 8002a3c:	d109      	bne.n	8002a52 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a50:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	3304      	adds	r3, #4
 8002a66:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	78db      	ldrb	r3, [r3, #3]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d108      	bne.n	8002a82 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2200      	movs	r2, #0
 8002a74:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f007 fc17 	bl	800a2b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2302      	movs	r3, #2
 8002a92:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2320      	movs	r3, #32
 8002aae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002acc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f af62 	bne.w	80029a6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 ff22 	bl	8007930 <USB_ReadInterrupts>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002af6:	f040 80db 	bne.w	8002cb0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 ff43 	bl	800798a <USB_ReadDevAllInEpInterrupt>
 8002b04:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b0a:	e0cd      	b.n	8002ca8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80c2 	beq.w	8002c9c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 ff69 	bl	80079fa <USB_ReadDevInEPInterrupt>
 8002b28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d057      	beq.n	8002be4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69f9      	ldr	r1, [r7, #28]
 8002b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b54:	4013      	ands	r3, r2
 8002b56:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b64:	461a      	mov	r2, r3
 8002b66:	2301      	movs	r3, #1
 8002b68:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d132      	bne.n	8002bd8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	334c      	adds	r3, #76	; 0x4c
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4403      	add	r3, r0
 8002b92:	3348      	adds	r3, #72	; 0x48
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4419      	add	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4403      	add	r3, r0
 8002ba6:	334c      	adds	r3, #76	; 0x4c
 8002ba8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d113      	bne.n	8002bd8 <HAL_PCD_IRQHandler+0x3a2>
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3354      	adds	r3, #84	; 0x54
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d108      	bne.n	8002bd8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	f004 ff70 	bl	8007ab8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f007 fae1 	bl	800a1a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	2308      	movs	r3, #8
 8002bfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c16:	461a      	mov	r2, r3
 8002c18:	2310      	movs	r3, #16
 8002c1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c32:	461a      	mov	r2, r3
 8002c34:	2340      	movs	r3, #64	; 0x40
 8002c36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d023      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c44:	6a38      	ldr	r0, [r7, #32]
 8002c46:	f003 fe51 	bl	80068ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	3338      	adds	r3, #56	; 0x38
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	78db      	ldrb	r3, [r3, #3]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d108      	bne.n	8002c78 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4619      	mov	r1, r3
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f007 fb2e 	bl	800a2d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c84:	461a      	mov	r2, r3
 8002c86:	2302      	movs	r3, #2
 8002c88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fcdb 	bl	8003652 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f47f af2e 	bne.w	8002b0c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f004 fe3b 	bl	8007930 <USB_ReadInterrupts>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cc4:	d122      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d108      	bne.n	8002cf6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cec:	2100      	movs	r1, #0
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fec2 	bl	8003a78 <HAL_PCDEx_LPM_Callback>
 8002cf4:	e002      	b.n	8002cfc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f007 facc 	bl	800a294 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f004 fe0d 	bl	8007930 <USB_ReadInterrupts>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d20:	d112      	bne.n	8002d48 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d102      	bne.n	8002d38 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f007 fa88 	bl	800a248 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d46:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f004 fdef 	bl	8007930 <USB_ReadInterrupts>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5c:	f040 80b7 	bne.w	8002ece <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2110      	movs	r1, #16
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 fdb6 	bl	80068ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d84:	e046      	b.n	8002e14 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d92:	461a      	mov	r2, r3
 8002d94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d98:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002daa:	0151      	lsls	r1, r2, #5
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	440a      	add	r2, r1
 8002db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002db4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002db8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dcc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dde:	0151      	lsls	r1, r2, #5
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	440a      	add	r2, r1
 8002de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002de8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dfe:	0151      	lsls	r1, r2, #5
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	440a      	add	r2, r1
 8002e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e0c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	3301      	adds	r3, #1
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d3b3      	bcc.n	8002d86 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e2c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e30:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d016      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e4a:	f043 030b 	orr.w	r3, r3, #11
 8002e4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e60:	f043 030b 	orr.w	r3, r3, #11
 8002e64:	6453      	str	r3, [r2, #68]	; 0x44
 8002e66:	e015      	b.n	8002e94 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e7a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e7e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e8e:	f043 030b 	orr.w	r3, r3, #11
 8002e92:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ea2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ea6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f004 fdfd 	bl	8007ab8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ecc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 fd2c 	bl	8007930 <USB_ReadInterrupts>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee2:	d124      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f004 fdc2 	bl	8007a72 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 fd77 	bl	80069e6 <USB_GetDevSpeed>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461a      	mov	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681c      	ldr	r4, [r3, #0]
 8002f04:	f001 fa28 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 8002f08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	4620      	mov	r0, r4
 8002f14:	f003 fa76 	bl	8006404 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f007 f96c 	bl	800a1f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f004 fcfc 	bl	8007930 <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d10a      	bne.n	8002f58 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f007 f949 	bl	800a1da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f002 0208 	and.w	r2, r2, #8
 8002f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f004 fce7 	bl	8007930 <USB_ReadInterrupts>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f68:	2b80      	cmp	r3, #128	; 0x80
 8002f6a:	d122      	bne.n	8002fb2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f78:	2301      	movs	r3, #1
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7c:	e014      	b.n	8002fa8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fb27 	bl	80035f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d3e5      	bcc.n	8002f7e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f004 fcba 	bl	8007930 <USB_ReadInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc6:	d13b      	bne.n	8003040 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc8:	2301      	movs	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
 8002fcc:	e02b      	b.n	8003026 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	3340      	adds	r3, #64	; 0x40
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d115      	bne.n	8003020 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ff4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	da12      	bge.n	8003020 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	333f      	adds	r3, #63	; 0x3f
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003016:	b2db      	uxtb	r3, r3
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fae8 	bl	80035f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	3301      	adds	r3, #1
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302c:	429a      	cmp	r2, r3
 800302e:	d3ce      	bcc.n	8002fce <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800303e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f004 fc73 	bl	8007930 <USB_ReadInterrupts>
 800304a:	4603      	mov	r3, r0
 800304c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003054:	d155      	bne.n	8003102 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003056:	2301      	movs	r3, #1
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	e045      	b.n	80030e8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d12e      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003084:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003086:	2b00      	cmp	r3, #0
 8003088:	da2b      	bge.n	80030e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003096:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800309a:	429a      	cmp	r2, r3
 800309c:	d121      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030de:	6053      	str	r3, [r2, #4]
            break;
 80030e0:	e007      	b.n	80030f2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	3301      	adds	r3, #1
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d3b4      	bcc.n	800305c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003100:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f004 fc12 	bl	8007930 <USB_ReadInterrupts>
 800310c:	4603      	mov	r3, r0
 800310e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003116:	d10a      	bne.n	800312e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f007 f8ed 	bl	800a2f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800312c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f004 fbfc 	bl	8007930 <USB_ReadInterrupts>
 8003138:	4603      	mov	r3, r0
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b04      	cmp	r3, #4
 8003140:	d115      	bne.n	800316e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f007 f8dd 	bl	800a314 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	e000      	b.n	800316e <HAL_PCD_IRQHandler+0x938>
      return;
 800316c:	bf00      	nop
    }
  }
}
 800316e:	3734      	adds	r7, #52	; 0x34
 8003170:	46bd      	mov	sp, r7
 8003172:	bd90      	pop	{r4, r7, pc}

08003174 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_PCD_SetAddress+0x1a>
 800318a:	2302      	movs	r3, #2
 800318c:	e013      	b.n	80031b6 <HAL_PCD_SetAddress+0x42>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f004 fb5a 	bl	8007860 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	4608      	mov	r0, r1
 80031c8:	4611      	mov	r1, r2
 80031ca:	461a      	mov	r2, r3
 80031cc:	4603      	mov	r3, r0
 80031ce:	70fb      	strb	r3, [r7, #3]
 80031d0:	460b      	mov	r3, r1
 80031d2:	803b      	strh	r3, [r7, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	da0f      	bge.n	8003204 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 020f 	and.w	r2, r3, #15
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	3338      	adds	r3, #56	; 0x38
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	3304      	adds	r3, #4
 80031fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	705a      	strb	r2, [r3, #1]
 8003202:	e00f      	b.n	8003224 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	3304      	adds	r3, #4
 800321c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	b2da      	uxtb	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003230:	883a      	ldrh	r2, [r7, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	78ba      	ldrb	r2, [r7, #2]
 800323a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d004      	beq.n	800324e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800324e:	78bb      	ldrb	r3, [r7, #2]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d102      	bne.n	800325a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_PCD_EP_Open+0xaa>
 8003264:	2302      	movs	r3, #2
 8003266:	e00e      	b.n	8003286 <HAL_PCD_EP_Open+0xc8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	4618      	mov	r0, r3
 8003278:	f003 fbda 	bl	8006a30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003284:	7afb      	ldrb	r3, [r7, #11]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800329a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	da0f      	bge.n	80032c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	f003 020f 	and.w	r2, r3, #15
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	3338      	adds	r3, #56	; 0x38
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	3304      	adds	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	705a      	strb	r2, [r3, #1]
 80032c0:	e00f      	b.n	80032e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 020f 	and.w	r2, r3, #15
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	3304      	adds	r3, #4
 80032da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_PCD_EP_Close+0x6e>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e00e      	b.n	800331a <HAL_PCD_EP_Close+0x8c>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68f9      	ldr	r1, [r7, #12]
 800330a:	4618      	mov	r0, r3
 800330c:	f003 fc18 	bl	8006b40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	460b      	mov	r3, r1
 8003330:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003332:	7afb      	ldrb	r3, [r7, #11]
 8003334:	f003 020f 	and.w	r2, r3, #15
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4413      	add	r3, r2
 8003348:	3304      	adds	r3, #4
 800334a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2200      	movs	r2, #0
 800335c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2200      	movs	r2, #0
 8003362:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003364:	7afb      	ldrb	r3, [r7, #11]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	b2da      	uxtb	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d102      	bne.n	800337e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800337e:	7afb      	ldrb	r3, [r7, #11]
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	6979      	ldr	r1, [r7, #20]
 8003396:	f003 fef7 	bl	8007188 <USB_EP0StartXfer>
 800339a:	e008      	b.n	80033ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	6979      	ldr	r1, [r7, #20]
 80033aa:	f003 fca5 	bl	8006cf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 020f 	and.w	r2, r3, #15
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80033da:	681b      	ldr	r3, [r3, #0]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	460b      	mov	r3, r1
 80033f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f8:	7afb      	ldrb	r3, [r7, #11]
 80033fa:	f003 020f 	and.w	r2, r3, #15
 80033fe:	4613      	mov	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	3338      	adds	r3, #56	; 0x38
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	3304      	adds	r3, #4
 800340e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2200      	movs	r2, #0
 8003420:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2201      	movs	r2, #1
 8003426:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003428:	7afb      	ldrb	r3, [r7, #11]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	b2da      	uxtb	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d102      	bne.n	8003442 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003442:	7afb      	ldrb	r3, [r7, #11]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	2b00      	cmp	r3, #0
 800344a:	d109      	bne.n	8003460 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	6979      	ldr	r1, [r7, #20]
 800345a:	f003 fe95 	bl	8007188 <USB_EP0StartXfer>
 800345e:	e008      	b.n	8003472 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	6979      	ldr	r1, [r7, #20]
 800346e:	f003 fc43 	bl	8006cf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	f003 020f 	and.w	r2, r3, #15
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	429a      	cmp	r2, r3
 8003494:	d901      	bls.n	800349a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e050      	b.n	800353c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800349a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	da0f      	bge.n	80034c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	f003 020f 	and.w	r2, r3, #15
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	3338      	adds	r3, #56	; 0x38
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	3304      	adds	r3, #4
 80034b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	705a      	strb	r2, [r3, #1]
 80034c0:	e00d      	b.n	80034de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_PCD_EP_SetStall+0x82>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e01e      	b.n	800353c <HAL_PCD_EP_SetStall+0xc0>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	4618      	mov	r0, r3
 800350e:	f004 f8d3 	bl	80076b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	b2d9      	uxtb	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800352c:	461a      	mov	r2, r3
 800352e:	f004 fac3 	bl	8007ab8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	f003 020f 	and.w	r2, r3, #15
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	d901      	bls.n	8003562 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e042      	b.n	80035e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003566:	2b00      	cmp	r3, #0
 8003568:	da0f      	bge.n	800358a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f003 020f 	and.w	r2, r3, #15
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	3338      	adds	r3, #56	; 0x38
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	3304      	adds	r3, #4
 8003580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	705a      	strb	r2, [r3, #1]
 8003588:	e00f      	b.n	80035aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	f003 020f 	and.w	r2, r3, #15
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	4413      	add	r3, r2
 80035a0:	3304      	adds	r3, #4
 80035a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_PCD_EP_ClrStall+0x86>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e00e      	b.n	80035e8 <HAL_PCD_EP_ClrStall+0xa4>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68f9      	ldr	r1, [r7, #12]
 80035d8:	4618      	mov	r0, r3
 80035da:	f004 f8db 	bl	8007794 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003600:	2b00      	cmp	r3, #0
 8003602:	da0c      	bge.n	800361e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	f003 020f 	and.w	r2, r3, #15
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	3338      	adds	r3, #56	; 0x38
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	3304      	adds	r3, #4
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	e00c      	b.n	8003638 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	f003 020f 	and.w	r2, r3, #15
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4413      	add	r3, r2
 8003634:	3304      	adds	r3, #4
 8003636:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68f9      	ldr	r1, [r7, #12]
 800363e:	4618      	mov	r0, r3
 8003640:	f003 fefa 	bl	8007438 <USB_EPStopXfer>
 8003644:	4603      	mov	r3, r0
 8003646:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003648:	7afb      	ldrb	r3, [r7, #11]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b08a      	sub	sp, #40	; 0x28
 8003656:	af02      	add	r7, sp, #8
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	3338      	adds	r3, #56	; 0x38
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	3304      	adds	r3, #4
 8003678:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1a      	ldr	r2, [r3, #32]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	429a      	cmp	r2, r3
 8003684:	d901      	bls.n	800368a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e06c      	b.n	8003764 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	429a      	cmp	r2, r3
 800369e:	d902      	bls.n	80036a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3303      	adds	r3, #3
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ae:	e02b      	b.n	8003708 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	699a      	ldr	r2, [r3, #24]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d902      	bls.n	80036cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	3303      	adds	r3, #3
 80036d0:	089b      	lsrs	r3, r3, #2
 80036d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6919      	ldr	r1, [r3, #16]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	4603      	mov	r3, r0
 80036ea:	6978      	ldr	r0, [r7, #20]
 80036ec:	f003 ff4e 	bl	800758c <USB_WritePacket>

    ep->xfer_buff  += len;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	441a      	add	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	441a      	add	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	b29b      	uxth	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	429a      	cmp	r2, r3
 800371c:	d809      	bhi.n	8003732 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1a      	ldr	r2, [r3, #32]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003726:	429a      	cmp	r2, r3
 8003728:	d203      	bcs.n	8003732 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1be      	bne.n	80036b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	429a      	cmp	r2, r3
 800373c:	d811      	bhi.n	8003762 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	2201      	movs	r2, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	43db      	mvns	r3, r3
 8003758:	6939      	ldr	r1, [r7, #16]
 800375a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800375e:	4013      	ands	r3, r2
 8003760:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	333c      	adds	r3, #60	; 0x3c
 8003784:	3304      	adds	r3, #4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d17b      	bne.n	800389a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d015      	beq.n	80037d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	4a61      	ldr	r2, [pc, #388]	; (8003934 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	f240 80b9 	bls.w	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80b3 	beq.w	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ce:	461a      	mov	r2, r3
 80037d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d4:	6093      	str	r3, [r2, #8]
 80037d6:	e0a7      	b.n	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ee:	461a      	mov	r2, r3
 80037f0:	2320      	movs	r3, #32
 80037f2:	6093      	str	r3, [r2, #8]
 80037f4:	e098      	b.n	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f040 8093 	bne.w	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	4a4b      	ldr	r2, [pc, #300]	; (8003934 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d90f      	bls.n	800382a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003820:	461a      	mov	r2, r3
 8003822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003826:	6093      	str	r3, [r2, #8]
 8003828:	e07e      	b.n	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	3304      	adds	r3, #4
 800383e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	0159      	lsls	r1, r3, #5
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	440b      	add	r3, r1
 800384c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003856:	1ad2      	subs	r2, r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d114      	bne.n	800388c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003874:	461a      	mov	r2, r3
 8003876:	2101      	movs	r1, #1
 8003878:	f004 f91e 	bl	8007ab8 <USB_EP0_OutStart>
 800387c:	e006      	b.n	800388c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	441a      	add	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	4619      	mov	r1, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f006 fc6c 	bl	800a170 <HAL_PCD_DataOutStageCallback>
 8003898:	e046      	b.n	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	4a26      	ldr	r2, [pc, #152]	; (8003938 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d124      	bne.n	80038ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b8:	461a      	mov	r2, r3
 80038ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038be:	6093      	str	r3, [r2, #8]
 80038c0:	e032      	b.n	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d8:	461a      	mov	r2, r3
 80038da:	2320      	movs	r3, #32
 80038dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f006 fc43 	bl	800a170 <HAL_PCD_DataOutStageCallback>
 80038ea:	e01d      	b.n	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d114      	bne.n	800391c <PCD_EP_OutXfrComplete_int+0x1b0>
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d108      	bne.n	800391c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003914:	461a      	mov	r2, r3
 8003916:	2100      	movs	r1, #0
 8003918:	f004 f8ce 	bl	8007ab8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	4619      	mov	r1, r3
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f006 fc24 	bl	800a170 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3720      	adds	r7, #32
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	4f54300a 	.word	0x4f54300a
 8003938:	4f54310a 	.word	0x4f54310a

0800393c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	333c      	adds	r3, #60	; 0x3c
 8003954:	3304      	adds	r3, #4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d90e      	bls.n	8003990 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003978:	2b00      	cmp	r3, #0
 800397a:	d009      	beq.n	8003990 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003988:	461a      	mov	r2, r3
 800398a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f006 fbdb 	bl	800a14c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d90c      	bls.n	80039b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d108      	bne.n	80039b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039b0:	461a      	mov	r2, r3
 80039b2:	2101      	movs	r1, #1
 80039b4:	f004 f880 	bl	8007ab8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	4f54300a 	.word	0x4f54300a

080039c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	70fb      	strb	r3, [r7, #3]
 80039d4:	4613      	mov	r3, r2
 80039d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d107      	bne.n	80039f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039e6:	883b      	ldrh	r3, [r7, #0]
 80039e8:	0419      	lsls	r1, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28
 80039f4:	e028      	b.n	8003a48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	4413      	add	r3, r2
 8003a02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a04:	2300      	movs	r3, #0
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	e00d      	b.n	8003a26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	3340      	adds	r3, #64	; 0x40
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	3301      	adds	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
 8003a26:	7bfa      	ldrb	r2, [r7, #15]
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d3ec      	bcc.n	8003a0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a30:	883b      	ldrh	r3, [r7, #0]
 8003a32:	0418      	lsls	r0, r3, #16
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6819      	ldr	r1, [r3, #0]
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	4302      	orrs	r2, r0
 8003a40:	3340      	adds	r3, #64	; 0x40
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	887a      	ldrh	r2, [r7, #2]
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e267      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d075      	beq.n	8003b9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aae:	4b88      	ldr	r3, [pc, #544]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d00c      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aba:	4b85      	ldr	r3, [pc, #532]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d112      	bne.n	8003aec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac6:	4b82      	ldr	r3, [pc, #520]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad2:	d10b      	bne.n	8003aec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	4b7e      	ldr	r3, [pc, #504]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d05b      	beq.n	8003b98 <HAL_RCC_OscConfig+0x108>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d157      	bne.n	8003b98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e242      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af4:	d106      	bne.n	8003b04 <HAL_RCC_OscConfig+0x74>
 8003af6:	4b76      	ldr	r3, [pc, #472]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a75      	ldr	r2, [pc, #468]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e01d      	b.n	8003b40 <HAL_RCC_OscConfig+0xb0>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCC_OscConfig+0x98>
 8003b0e:	4b70      	ldr	r3, [pc, #448]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6f      	ldr	r2, [pc, #444]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	4b6d      	ldr	r3, [pc, #436]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a6c      	ldr	r2, [pc, #432]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e00b      	b.n	8003b40 <HAL_RCC_OscConfig+0xb0>
 8003b28:	4b69      	ldr	r3, [pc, #420]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a68      	ldr	r2, [pc, #416]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b66      	ldr	r3, [pc, #408]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a65      	ldr	r2, [pc, #404]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d013      	beq.n	8003b70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fe f984 	bl	8001e54 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b50:	f7fe f980 	bl	8001e54 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	; 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e207      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	4b5b      	ldr	r3, [pc, #364]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0xc0>
 8003b6e:	e014      	b.n	8003b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b70:	f7fe f970 	bl	8001e54 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b78:	f7fe f96c 	bl	8001e54 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e1f3      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	4b51      	ldr	r3, [pc, #324]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0xe8>
 8003b96:	e000      	b.n	8003b9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d063      	beq.n	8003c6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ba6:	4b4a      	ldr	r3, [pc, #296]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00b      	beq.n	8003bca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb2:	4b47      	ldr	r3, [pc, #284]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d11c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bbe:	4b44      	ldr	r3, [pc, #272]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d116      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bca:	4b41      	ldr	r3, [pc, #260]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_RCC_OscConfig+0x152>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d001      	beq.n	8003be2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e1c7      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be2:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4937      	ldr	r1, [pc, #220]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf6:	e03a      	b.n	8003c6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d020      	beq.n	8003c42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c00:	4b34      	ldr	r3, [pc, #208]	; (8003cd4 <HAL_RCC_OscConfig+0x244>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c06:	f7fe f925 	bl	8001e54 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c0e:	f7fe f921 	bl	8001e54 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e1a8      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c20:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2c:	4b28      	ldr	r3, [pc, #160]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	4925      	ldr	r1, [pc, #148]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	600b      	str	r3, [r1, #0]
 8003c40:	e015      	b.n	8003c6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_RCC_OscConfig+0x244>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fe f904 	bl	8001e54 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c50:	f7fe f900 	bl	8001e54 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e187      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c62:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d036      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d016      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c82:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <HAL_RCC_OscConfig+0x248>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c88:	f7fe f8e4 	bl	8001e54 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c90:	f7fe f8e0 	bl	8001e54 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e167      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x200>
 8003cae:	e01b      	b.n	8003ce8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <HAL_RCC_OscConfig+0x248>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb6:	f7fe f8cd 	bl	8001e54 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cbc:	e00e      	b.n	8003cdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cbe:	f7fe f8c9 	bl	8001e54 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d907      	bls.n	8003cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e150      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	42470000 	.word	0x42470000
 8003cd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cdc:	4b88      	ldr	r3, [pc, #544]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1ea      	bne.n	8003cbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8097 	beq.w	8003e24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfa:	4b81      	ldr	r3, [pc, #516]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10f      	bne.n	8003d26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	4b7d      	ldr	r3, [pc, #500]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	4a7c      	ldr	r2, [pc, #496]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d14:	6413      	str	r3, [r2, #64]	; 0x40
 8003d16:	4b7a      	ldr	r3, [pc, #488]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d26:	4b77      	ldr	r3, [pc, #476]	; (8003f04 <HAL_RCC_OscConfig+0x474>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d118      	bne.n	8003d64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d32:	4b74      	ldr	r3, [pc, #464]	; (8003f04 <HAL_RCC_OscConfig+0x474>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a73      	ldr	r2, [pc, #460]	; (8003f04 <HAL_RCC_OscConfig+0x474>)
 8003d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3e:	f7fe f889 	bl	8001e54 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d46:	f7fe f885 	bl	8001e54 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e10c      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d58:	4b6a      	ldr	r3, [pc, #424]	; (8003f04 <HAL_RCC_OscConfig+0x474>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_OscConfig+0x2ea>
 8003d6c:	4b64      	ldr	r3, [pc, #400]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	4a63      	ldr	r2, [pc, #396]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6713      	str	r3, [r2, #112]	; 0x70
 8003d78:	e01c      	b.n	8003db4 <HAL_RCC_OscConfig+0x324>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b05      	cmp	r3, #5
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x30c>
 8003d82:	4b5f      	ldr	r3, [pc, #380]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	4a5e      	ldr	r2, [pc, #376]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003d88:	f043 0304 	orr.w	r3, r3, #4
 8003d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8e:	4b5c      	ldr	r3, [pc, #368]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	4a5b      	ldr	r2, [pc, #364]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCC_OscConfig+0x324>
 8003d9c:	4b58      	ldr	r3, [pc, #352]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	4a57      	ldr	r2, [pc, #348]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	6713      	str	r3, [r2, #112]	; 0x70
 8003da8:	4b55      	ldr	r3, [pc, #340]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dac:	4a54      	ldr	r2, [pc, #336]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003dae:	f023 0304 	bic.w	r3, r3, #4
 8003db2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d015      	beq.n	8003de8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fe f84a 	bl	8001e54 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc4:	f7fe f846 	bl	8001e54 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e0cb      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dda:	4b49      	ldr	r3, [pc, #292]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0ee      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x334>
 8003de6:	e014      	b.n	8003e12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de8:	f7fe f834 	bl	8001e54 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df0:	f7fe f830 	bl	8001e54 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e0b5      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e06:	4b3e      	ldr	r3, [pc, #248]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1ee      	bne.n	8003df0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d105      	bne.n	8003e24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e18:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	4a38      	ldr	r2, [pc, #224]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80a1 	beq.w	8003f70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e2e:	4b34      	ldr	r3, [pc, #208]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d05c      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d141      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <HAL_RCC_OscConfig+0x478>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fe f804 	bl	8001e54 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fe f800 	bl	8001e54 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e087      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69da      	ldr	r2, [r3, #28]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	019b      	lsls	r3, r3, #6
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	085b      	lsrs	r3, r3, #1
 8003e86:	3b01      	subs	r3, #1
 8003e88:	041b      	lsls	r3, r3, #16
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	061b      	lsls	r3, r3, #24
 8003e92:	491b      	ldr	r1, [pc, #108]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e98:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <HAL_RCC_OscConfig+0x478>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9e:	f7fd ffd9 	bl	8001e54 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea6:	f7fd ffd5 	bl	8001e54 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e05c      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x416>
 8003ec4:	e054      	b.n	8003f70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec6:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <HAL_RCC_OscConfig+0x478>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fd ffc2 	bl	8001e54 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fd ffbe 	bl	8001e54 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e045      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_RCC_OscConfig+0x470>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x444>
 8003ef2:	e03d      	b.n	8003f70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d107      	bne.n	8003f0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e038      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40007000 	.word	0x40007000
 8003f08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <HAL_RCC_OscConfig+0x4ec>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d028      	beq.n	8003f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d121      	bne.n	8003f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d11a      	bne.n	8003f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d111      	bne.n	8003f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	3b01      	subs	r3, #1
 8003f56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d107      	bne.n	8003f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800

08003f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0cc      	b.n	800412e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f94:	4b68      	ldr	r3, [pc, #416]	; (8004138 <HAL_RCC_ClockConfig+0x1b8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d90c      	bls.n	8003fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b65      	ldr	r3, [pc, #404]	; (8004138 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003faa:	4b63      	ldr	r3, [pc, #396]	; (8004138 <HAL_RCC_ClockConfig+0x1b8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0b8      	b.n	800412e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d020      	beq.n	800400a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd4:	4b59      	ldr	r3, [pc, #356]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4a58      	ldr	r2, [pc, #352]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fec:	4b53      	ldr	r3, [pc, #332]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	4a52      	ldr	r2, [pc, #328]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff8:	4b50      	ldr	r3, [pc, #320]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	494d      	ldr	r1, [pc, #308]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d044      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d107      	bne.n	800402e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	4b47      	ldr	r3, [pc, #284]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d119      	bne.n	800405e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e07f      	b.n	800412e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d003      	beq.n	800403e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800403a:	2b03      	cmp	r3, #3
 800403c:	d107      	bne.n	800404e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403e:	4b3f      	ldr	r3, [pc, #252]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e06f      	b.n	800412e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404e:	4b3b      	ldr	r3, [pc, #236]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e067      	b.n	800412e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800405e:	4b37      	ldr	r3, [pc, #220]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f023 0203 	bic.w	r2, r3, #3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4934      	ldr	r1, [pc, #208]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	4313      	orrs	r3, r2
 800406e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004070:	f7fd fef0 	bl	8001e54 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004076:	e00a      	b.n	800408e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004078:	f7fd feec 	bl	8001e54 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e04f      	b.n	800412e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408e:	4b2b      	ldr	r3, [pc, #172]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 020c 	and.w	r2, r3, #12
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	429a      	cmp	r2, r3
 800409e:	d1eb      	bne.n	8004078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040a0:	4b25      	ldr	r3, [pc, #148]	; (8004138 <HAL_RCC_ClockConfig+0x1b8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d20c      	bcs.n	80040c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b22      	ldr	r3, [pc, #136]	; (8004138 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e032      	b.n	800412e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4916      	ldr	r1, [pc, #88]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	490e      	ldr	r1, [pc, #56]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004106:	f000 f821 	bl	800414c <HAL_RCC_GetSysClockFreq>
 800410a:	4602      	mov	r2, r0
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	490a      	ldr	r1, [pc, #40]	; (8004140 <HAL_RCC_ClockConfig+0x1c0>)
 8004118:	5ccb      	ldrb	r3, [r1, r3]
 800411a:	fa22 f303 	lsr.w	r3, r2, r3
 800411e:	4a09      	ldr	r2, [pc, #36]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004122:	4b09      	ldr	r3, [pc, #36]	; (8004148 <HAL_RCC_ClockConfig+0x1c8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fd fe50 	bl	8001dcc <HAL_InitTick>

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40023c00 	.word	0x40023c00
 800413c:	40023800 	.word	0x40023800
 8004140:	0800a7a0 	.word	0x0800a7a0
 8004144:	2000007c 	.word	0x2000007c
 8004148:	20000080 	.word	0x20000080

0800414c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800414c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004150:	b094      	sub	sp, #80	; 0x50
 8004152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	647b      	str	r3, [r7, #68]	; 0x44
 8004158:	2300      	movs	r3, #0
 800415a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800415c:	2300      	movs	r3, #0
 800415e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004164:	4b79      	ldr	r3, [pc, #484]	; (800434c <HAL_RCC_GetSysClockFreq+0x200>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 030c 	and.w	r3, r3, #12
 800416c:	2b08      	cmp	r3, #8
 800416e:	d00d      	beq.n	800418c <HAL_RCC_GetSysClockFreq+0x40>
 8004170:	2b08      	cmp	r3, #8
 8004172:	f200 80e1 	bhi.w	8004338 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x34>
 800417a:	2b04      	cmp	r3, #4
 800417c:	d003      	beq.n	8004186 <HAL_RCC_GetSysClockFreq+0x3a>
 800417e:	e0db      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004180:	4b73      	ldr	r3, [pc, #460]	; (8004350 <HAL_RCC_GetSysClockFreq+0x204>)
 8004182:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004184:	e0db      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004186:	4b73      	ldr	r3, [pc, #460]	; (8004354 <HAL_RCC_GetSysClockFreq+0x208>)
 8004188:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800418a:	e0d8      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800418c:	4b6f      	ldr	r3, [pc, #444]	; (800434c <HAL_RCC_GetSysClockFreq+0x200>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004194:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004196:	4b6d      	ldr	r3, [pc, #436]	; (800434c <HAL_RCC_GetSysClockFreq+0x200>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d063      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a2:	4b6a      	ldr	r3, [pc, #424]	; (800434c <HAL_RCC_GetSysClockFreq+0x200>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	099b      	lsrs	r3, r3, #6
 80041a8:	2200      	movs	r2, #0
 80041aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80041ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30
 80041b6:	2300      	movs	r3, #0
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041be:	4622      	mov	r2, r4
 80041c0:	462b      	mov	r3, r5
 80041c2:	f04f 0000 	mov.w	r0, #0
 80041c6:	f04f 0100 	mov.w	r1, #0
 80041ca:	0159      	lsls	r1, r3, #5
 80041cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d0:	0150      	lsls	r0, r2, #5
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4621      	mov	r1, r4
 80041d8:	1a51      	subs	r1, r2, r1
 80041da:	6139      	str	r1, [r7, #16]
 80041dc:	4629      	mov	r1, r5
 80041de:	eb63 0301 	sbc.w	r3, r3, r1
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041f0:	4659      	mov	r1, fp
 80041f2:	018b      	lsls	r3, r1, #6
 80041f4:	4651      	mov	r1, sl
 80041f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041fa:	4651      	mov	r1, sl
 80041fc:	018a      	lsls	r2, r1, #6
 80041fe:	4651      	mov	r1, sl
 8004200:	ebb2 0801 	subs.w	r8, r2, r1
 8004204:	4659      	mov	r1, fp
 8004206:	eb63 0901 	sbc.w	r9, r3, r1
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800421a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800421e:	4690      	mov	r8, r2
 8004220:	4699      	mov	r9, r3
 8004222:	4623      	mov	r3, r4
 8004224:	eb18 0303 	adds.w	r3, r8, r3
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	462b      	mov	r3, r5
 800422c:	eb49 0303 	adc.w	r3, r9, r3
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800423e:	4629      	mov	r1, r5
 8004240:	024b      	lsls	r3, r1, #9
 8004242:	4621      	mov	r1, r4
 8004244:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004248:	4621      	mov	r1, r4
 800424a:	024a      	lsls	r2, r1, #9
 800424c:	4610      	mov	r0, r2
 800424e:	4619      	mov	r1, r3
 8004250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004252:	2200      	movs	r2, #0
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28
 8004256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004258:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800425c:	f7fb ffb4 	bl	80001c8 <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4613      	mov	r3, r2
 8004266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004268:	e058      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426a:	4b38      	ldr	r3, [pc, #224]	; (800434c <HAL_RCC_GetSysClockFreq+0x200>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	099b      	lsrs	r3, r3, #6
 8004270:	2200      	movs	r2, #0
 8004272:	4618      	mov	r0, r3
 8004274:	4611      	mov	r1, r2
 8004276:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800427a:	623b      	str	r3, [r7, #32]
 800427c:	2300      	movs	r3, #0
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
 8004280:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004284:	4642      	mov	r2, r8
 8004286:	464b      	mov	r3, r9
 8004288:	f04f 0000 	mov.w	r0, #0
 800428c:	f04f 0100 	mov.w	r1, #0
 8004290:	0159      	lsls	r1, r3, #5
 8004292:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004296:	0150      	lsls	r0, r2, #5
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4641      	mov	r1, r8
 800429e:	ebb2 0a01 	subs.w	sl, r2, r1
 80042a2:	4649      	mov	r1, r9
 80042a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042bc:	ebb2 040a 	subs.w	r4, r2, sl
 80042c0:	eb63 050b 	sbc.w	r5, r3, fp
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	00eb      	lsls	r3, r5, #3
 80042ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042d2:	00e2      	lsls	r2, r4, #3
 80042d4:	4614      	mov	r4, r2
 80042d6:	461d      	mov	r5, r3
 80042d8:	4643      	mov	r3, r8
 80042da:	18e3      	adds	r3, r4, r3
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	464b      	mov	r3, r9
 80042e0:	eb45 0303 	adc.w	r3, r5, r3
 80042e4:	607b      	str	r3, [r7, #4]
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042f2:	4629      	mov	r1, r5
 80042f4:	028b      	lsls	r3, r1, #10
 80042f6:	4621      	mov	r1, r4
 80042f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042fc:	4621      	mov	r1, r4
 80042fe:	028a      	lsls	r2, r1, #10
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004306:	2200      	movs	r2, #0
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	61fa      	str	r2, [r7, #28]
 800430c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004310:	f7fb ff5a 	bl	80001c8 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4613      	mov	r3, r2
 800431a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_RCC_GetSysClockFreq+0x200>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	3301      	adds	r3, #1
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800432c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800432e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004336:	e002      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCC_GetSysClockFreq+0x204>)
 800433a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800433c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800433e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004340:	4618      	mov	r0, r3
 8004342:	3750      	adds	r7, #80	; 0x50
 8004344:	46bd      	mov	sp, r7
 8004346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
 8004350:	00f42400 	.word	0x00f42400
 8004354:	007a1200 	.word	0x007a1200

08004358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <HAL_RCC_GetHCLKFreq+0x14>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	2000007c 	.word	0x2000007c

08004370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004374:	f7ff fff0 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	0a9b      	lsrs	r3, r3, #10
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	4903      	ldr	r1, [pc, #12]	; (8004394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800438c:	4618      	mov	r0, r3
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40023800 	.word	0x40023800
 8004394:	0800a7b0 	.word	0x0800a7b0

08004398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800439c:	f7ff ffdc 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 80043a0:	4602      	mov	r2, r0
 80043a2:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	0b5b      	lsrs	r3, r3, #13
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	4903      	ldr	r1, [pc, #12]	; (80043bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ae:	5ccb      	ldrb	r3, [r1, r3]
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40023800 	.word	0x40023800
 80043bc:	0800a7b0 	.word	0x0800a7b0

080043c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e041      	b.n	8004456 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd fae4 	bl	80019b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f000 fcdc 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d001      	beq.n	8004478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e04e      	b.n	8004516 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a23      	ldr	r2, [pc, #140]	; (8004524 <HAL_TIM_Base_Start_IT+0xc4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d022      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a2:	d01d      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <HAL_TIM_Base_Start_IT+0xc8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d018      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1e      	ldr	r2, [pc, #120]	; (800452c <HAL_TIM_Base_Start_IT+0xcc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1c      	ldr	r2, [pc, #112]	; (8004530 <HAL_TIM_Base_Start_IT+0xd0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00e      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <HAL_TIM_Base_Start_IT+0xd4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a19      	ldr	r2, [pc, #100]	; (8004538 <HAL_TIM_Base_Start_IT+0xd8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a18      	ldr	r2, [pc, #96]	; (800453c <HAL_TIM_Base_Start_IT+0xdc>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d111      	bne.n	8004504 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d010      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0201 	orr.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004502:	e007      	b.n	8004514 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40010000 	.word	0x40010000
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40010400 	.word	0x40010400
 8004538:	40014000 	.word	0x40014000
 800453c:	40001800 	.word	0x40001800

08004540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e041      	b.n	80045d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fd fa6a 	bl	8001a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f000 fc1c 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <HAL_TIM_PWM_Start+0x24>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	e022      	b.n	800464a <HAL_TIM_PWM_Start+0x6a>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b04      	cmp	r3, #4
 8004608:	d109      	bne.n	800461e <HAL_TIM_PWM_Start+0x3e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	bf14      	ite	ne
 8004616:	2301      	movne	r3, #1
 8004618:	2300      	moveq	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	e015      	b.n	800464a <HAL_TIM_PWM_Start+0x6a>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d109      	bne.n	8004638 <HAL_TIM_PWM_Start+0x58>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e008      	b.n	800464a <HAL_TIM_PWM_Start+0x6a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e07c      	b.n	800474c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d104      	bne.n	8004662 <HAL_TIM_PWM_Start+0x82>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004660:	e013      	b.n	800468a <HAL_TIM_PWM_Start+0xaa>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b04      	cmp	r3, #4
 8004666:	d104      	bne.n	8004672 <HAL_TIM_PWM_Start+0x92>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004670:	e00b      	b.n	800468a <HAL_TIM_PWM_Start+0xaa>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b08      	cmp	r3, #8
 8004676:	d104      	bne.n	8004682 <HAL_TIM_PWM_Start+0xa2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004680:	e003      	b.n	800468a <HAL_TIM_PWM_Start+0xaa>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2201      	movs	r2, #1
 8004690:	6839      	ldr	r1, [r7, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fde2 	bl	800525c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2d      	ldr	r2, [pc, #180]	; (8004754 <HAL_TIM_PWM_Start+0x174>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_TIM_PWM_Start+0xcc>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a2c      	ldr	r2, [pc, #176]	; (8004758 <HAL_TIM_PWM_Start+0x178>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d101      	bne.n	80046b0 <HAL_TIM_PWM_Start+0xd0>
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <HAL_TIM_PWM_Start+0xd2>
 80046b0:	2300      	movs	r3, #0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a22      	ldr	r2, [pc, #136]	; (8004754 <HAL_TIM_PWM_Start+0x174>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d022      	beq.n	8004716 <HAL_TIM_PWM_Start+0x136>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d01d      	beq.n	8004716 <HAL_TIM_PWM_Start+0x136>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1f      	ldr	r2, [pc, #124]	; (800475c <HAL_TIM_PWM_Start+0x17c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d018      	beq.n	8004716 <HAL_TIM_PWM_Start+0x136>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1d      	ldr	r2, [pc, #116]	; (8004760 <HAL_TIM_PWM_Start+0x180>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_TIM_PWM_Start+0x136>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <HAL_TIM_PWM_Start+0x184>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_TIM_PWM_Start+0x136>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a16      	ldr	r2, [pc, #88]	; (8004758 <HAL_TIM_PWM_Start+0x178>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_TIM_PWM_Start+0x136>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a18      	ldr	r2, [pc, #96]	; (8004768 <HAL_TIM_PWM_Start+0x188>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_TIM_PWM_Start+0x136>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a16      	ldr	r2, [pc, #88]	; (800476c <HAL_TIM_PWM_Start+0x18c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d111      	bne.n	800473a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b06      	cmp	r3, #6
 8004726:	d010      	beq.n	800474a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004738:	e007      	b.n	800474a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40010000 	.word	0x40010000
 8004758:	40010400 	.word	0x40010400
 800475c:	40000400 	.word	0x40000400
 8004760:	40000800 	.word	0x40000800
 8004764:	40000c00 	.word	0x40000c00
 8004768:	40014000 	.word	0x40014000
 800476c:	40001800 	.word	0x40001800

08004770 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e097      	b.n	80048b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7fd f88d 	bl	80018b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2202      	movs	r2, #2
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b4:	f023 0307 	bic.w	r3, r3, #7
 80047b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3304      	adds	r3, #4
 80047c2:	4619      	mov	r1, r3
 80047c4:	4610      	mov	r0, r2
 80047c6:	f000 faf9 	bl	8004dbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	4313      	orrs	r3, r2
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004810:	f023 030c 	bic.w	r3, r3, #12
 8004814:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800481c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	4313      	orrs	r3, r2
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	011a      	lsls	r2, r3, #4
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	031b      	lsls	r3, r3, #12
 8004840:	4313      	orrs	r3, r2
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800484e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	4313      	orrs	r3, r2
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d110      	bne.n	800490e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d102      	bne.n	80048f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80048f2:	7b7b      	ldrb	r3, [r7, #13]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d001      	beq.n	80048fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e069      	b.n	80049d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800490c:	e031      	b.n	8004972 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b04      	cmp	r3, #4
 8004912:	d110      	bne.n	8004936 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004914:	7bbb      	ldrb	r3, [r7, #14]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d102      	bne.n	8004920 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800491a:	7b3b      	ldrb	r3, [r7, #12]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d001      	beq.n	8004924 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e055      	b.n	80049d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004934:	e01d      	b.n	8004972 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d108      	bne.n	800494e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800493c:	7bbb      	ldrb	r3, [r7, #14]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d105      	bne.n	800494e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004942:	7b7b      	ldrb	r3, [r7, #13]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d102      	bne.n	800494e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004948:	7b3b      	ldrb	r3, [r7, #12]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d001      	beq.n	8004952 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e03e      	b.n	80049d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_TIM_Encoder_Start+0xc4>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b04      	cmp	r3, #4
 800497c:	d008      	beq.n	8004990 <HAL_TIM_Encoder_Start+0xd4>
 800497e:	e00f      	b.n	80049a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2201      	movs	r2, #1
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fc67 	bl	800525c <TIM_CCxChannelCmd>
      break;
 800498e:	e016      	b.n	80049be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2201      	movs	r2, #1
 8004996:	2104      	movs	r1, #4
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fc5f 	bl	800525c <TIM_CCxChannelCmd>
      break;
 800499e:	e00e      	b.n	80049be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2201      	movs	r2, #1
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fc57 	bl	800525c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2201      	movs	r2, #1
 80049b4:	2104      	movs	r1, #4
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fc50 	bl	800525c <TIM_CCxChannelCmd>
      break;
 80049bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d122      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d11b      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0202 	mvn.w	r2, #2
 8004a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f9b0 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004a20:	e005      	b.n	8004a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f9a2 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f9b3 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d122      	bne.n	8004a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d11b      	bne.n	8004a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0204 	mvn.w	r2, #4
 8004a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f986 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004a74:	e005      	b.n	8004a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f978 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f989 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d122      	bne.n	8004adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d11b      	bne.n	8004adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0208 	mvn.w	r2, #8
 8004aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f95c 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f94e 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f95f 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d122      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b10      	cmp	r3, #16
 8004af6:	d11b      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0210 	mvn.w	r2, #16
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2208      	movs	r2, #8
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f932 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f924 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f935 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d10e      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d107      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0201 	mvn.w	r2, #1
 8004b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fc f8d2 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b80      	cmp	r3, #128	; 0x80
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b74:	2b80      	cmp	r3, #128	; 0x80
 8004b76:	d107      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fc16 	bl	80053b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b40      	cmp	r3, #64	; 0x40
 8004b94:	d10e      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b40      	cmp	r3, #64	; 0x40
 8004ba2:	d107      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8fa 	bl	8004da8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d10e      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d107      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0220 	mvn.w	r2, #32
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fbe0 	bl	80053a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e0ae      	b.n	8004d64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b0c      	cmp	r3, #12
 8004c12:	f200 809f 	bhi.w	8004d54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c16:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c51 	.word	0x08004c51
 8004c20:	08004d55 	.word	0x08004d55
 8004c24:	08004d55 	.word	0x08004d55
 8004c28:	08004d55 	.word	0x08004d55
 8004c2c:	08004c91 	.word	0x08004c91
 8004c30:	08004d55 	.word	0x08004d55
 8004c34:	08004d55 	.word	0x08004d55
 8004c38:	08004d55 	.word	0x08004d55
 8004c3c:	08004cd3 	.word	0x08004cd3
 8004c40:	08004d55 	.word	0x08004d55
 8004c44:	08004d55 	.word	0x08004d55
 8004c48:	08004d55 	.word	0x08004d55
 8004c4c:	08004d13 	.word	0x08004d13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f950 	bl	8004efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0208 	orr.w	r2, r2, #8
 8004c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0204 	bic.w	r2, r2, #4
 8004c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6999      	ldr	r1, [r3, #24]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	619a      	str	r2, [r3, #24]
      break;
 8004c8e:	e064      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f9a0 	bl	8004fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6999      	ldr	r1, [r3, #24]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	021a      	lsls	r2, r3, #8
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	619a      	str	r2, [r3, #24]
      break;
 8004cd0:	e043      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f9f5 	bl	80050c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0208 	orr.w	r2, r2, #8
 8004cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69da      	ldr	r2, [r3, #28]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0204 	bic.w	r2, r2, #4
 8004cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69d9      	ldr	r1, [r3, #28]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	61da      	str	r2, [r3, #28]
      break;
 8004d10:	e023      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fa49 	bl	80051b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69d9      	ldr	r1, [r3, #28]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	021a      	lsls	r2, r3, #8
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	61da      	str	r2, [r3, #28]
      break;
 8004d52:	e002      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	75fb      	strb	r3, [r7, #23]
      break;
 8004d58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a40      	ldr	r2, [pc, #256]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dda:	d00f      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3d      	ldr	r2, [pc, #244]	; (8004ed4 <TIM_Base_SetConfig+0x118>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <TIM_Base_SetConfig+0x11c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a3b      	ldr	r2, [pc, #236]	; (8004edc <TIM_Base_SetConfig+0x120>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a3a      	ldr	r2, [pc, #232]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d108      	bne.n	8004e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2f      	ldr	r2, [pc, #188]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d02b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d027      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	; (8004ed4 <TIM_Base_SetConfig+0x118>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d023      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2b      	ldr	r2, [pc, #172]	; (8004ed8 <TIM_Base_SetConfig+0x11c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01f      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <TIM_Base_SetConfig+0x120>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a29      	ldr	r2, [pc, #164]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d017      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a28      	ldr	r2, [pc, #160]	; (8004ee4 <TIM_Base_SetConfig+0x128>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a27      	ldr	r2, [pc, #156]	; (8004ee8 <TIM_Base_SetConfig+0x12c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00f      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a26      	ldr	r2, [pc, #152]	; (8004eec <TIM_Base_SetConfig+0x130>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a25      	ldr	r2, [pc, #148]	; (8004ef0 <TIM_Base_SetConfig+0x134>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a24      	ldr	r2, [pc, #144]	; (8004ef4 <TIM_Base_SetConfig+0x138>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a23      	ldr	r2, [pc, #140]	; (8004ef8 <TIM_Base_SetConfig+0x13c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_Base_SetConfig+0xf8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d103      	bne.n	8004ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	615a      	str	r2, [r3, #20]
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40010000 	.word	0x40010000
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800
 8004edc:	40000c00 	.word	0x40000c00
 8004ee0:	40010400 	.word	0x40010400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800
 8004ef0:	40001800 	.word	0x40001800
 8004ef4:	40001c00 	.word	0x40001c00
 8004ef8:	40002000 	.word	0x40002000

08004efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f023 0201 	bic.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 0302 	bic.w	r3, r3, #2
 8004f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a20      	ldr	r2, [pc, #128]	; (8004fd4 <TIM_OC1_SetConfig+0xd8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_OC1_SetConfig+0x64>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a1f      	ldr	r2, [pc, #124]	; (8004fd8 <TIM_OC1_SetConfig+0xdc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d10c      	bne.n	8004f7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f023 0308 	bic.w	r3, r3, #8
 8004f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 0304 	bic.w	r3, r3, #4
 8004f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <TIM_OC1_SetConfig+0xd8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <TIM_OC1_SetConfig+0x8e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a14      	ldr	r2, [pc, #80]	; (8004fd8 <TIM_OC1_SetConfig+0xdc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d111      	bne.n	8004fae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	621a      	str	r2, [r3, #32]
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	40010400 	.word	0x40010400

08004fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f023 0210 	bic.w	r2, r3, #16
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f023 0320 	bic.w	r3, r3, #32
 8005026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a22      	ldr	r2, [pc, #136]	; (80050c0 <TIM_OC2_SetConfig+0xe4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_OC2_SetConfig+0x68>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a21      	ldr	r2, [pc, #132]	; (80050c4 <TIM_OC2_SetConfig+0xe8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d10d      	bne.n	8005060 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800504a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a17      	ldr	r2, [pc, #92]	; (80050c0 <TIM_OC2_SetConfig+0xe4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_OC2_SetConfig+0x94>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a16      	ldr	r2, [pc, #88]	; (80050c4 <TIM_OC2_SetConfig+0xe8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d113      	bne.n	8005098 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800507e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40010400 	.word	0x40010400

080050c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a21      	ldr	r2, [pc, #132]	; (80051a8 <TIM_OC3_SetConfig+0xe0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_OC3_SetConfig+0x66>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a20      	ldr	r2, [pc, #128]	; (80051ac <TIM_OC3_SetConfig+0xe4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d10d      	bne.n	800514a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <TIM_OC3_SetConfig+0xe0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d003      	beq.n	800515a <TIM_OC3_SetConfig+0x92>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a15      	ldr	r2, [pc, #84]	; (80051ac <TIM_OC3_SetConfig+0xe4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d113      	bne.n	8005182 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	621a      	str	r2, [r3, #32]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40010000 	.word	0x40010000
 80051ac:	40010400 	.word	0x40010400

080051b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	031b      	lsls	r3, r3, #12
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a12      	ldr	r2, [pc, #72]	; (8005254 <TIM_OC4_SetConfig+0xa4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_OC4_SetConfig+0x68>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a11      	ldr	r2, [pc, #68]	; (8005258 <TIM_OC4_SetConfig+0xa8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d109      	bne.n	800522c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800521e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	019b      	lsls	r3, r3, #6
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40010000 	.word	0x40010000
 8005258:	40010400 	.word	0x40010400

0800525c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	2201      	movs	r2, #1
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a1a      	ldr	r2, [r3, #32]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	43db      	mvns	r3, r3
 800527e:	401a      	ands	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1a      	ldr	r2, [r3, #32]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	fa01 f303 	lsl.w	r3, r1, r3
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052bc:	2302      	movs	r3, #2
 80052be:	e05a      	b.n	8005376 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a21      	ldr	r2, [pc, #132]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d022      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530c:	d01d      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1d      	ldr	r2, [pc, #116]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d018      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a1b      	ldr	r2, [pc, #108]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1a      	ldr	r2, [pc, #104]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00e      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a18      	ldr	r2, [pc, #96]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a17      	ldr	r2, [pc, #92]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a15      	ldr	r2, [pc, #84]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d10c      	bne.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4313      	orrs	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40010400 	.word	0x40010400
 8005398:	40014000 	.word	0x40014000
 800539c:	40001800 	.word	0x40001800

080053a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e03f      	b.n	800545a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fc fc14 	bl	8001c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2224      	movs	r2, #36	; 0x24
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800540a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fd23 	bl	8005e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695a      	ldr	r2, [r3, #20]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	4613      	mov	r3, r2
 800546e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b20      	cmp	r3, #32
 800547a:	d130      	bne.n	80054de <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <HAL_UART_Transmit_IT+0x26>
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e029      	b.n	80054e0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005492:	2b01      	cmp	r3, #1
 8005494:	d101      	bne.n	800549a <HAL_UART_Transmit_IT+0x38>
 8005496:	2302      	movs	r3, #2
 8005498:	e022      	b.n	80054e0 <HAL_UART_Transmit_IT+0x7e>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	88fa      	ldrh	r2, [r7, #6]
 80054ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	88fa      	ldrh	r2, [r7, #6]
 80054b2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2221      	movs	r2, #33	; 0x21
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	e000      	b.n	80054e0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80054de:	2302      	movs	r3, #2
  }
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	4613      	mov	r3, r2
 80054f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b20      	cmp	r3, #32
 8005504:	d11d      	bne.n	8005542 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_UART_Receive_IT+0x26>
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e016      	b.n	8005544 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_UART_Receive_IT+0x38>
 8005520:	2302      	movs	r3, #2
 8005522:	e00f      	b.n	8005544 <HAL_UART_Receive_IT+0x58>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	461a      	mov	r2, r3
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 fab5 	bl	8005aa8 <UART_Start_Receive_IT>
 800553e:	4603      	mov	r3, r0
 8005540:	e000      	b.n	8005544 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005542:	2302      	movs	r3, #2
  }
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b0ba      	sub	sp, #232	; 0xe8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005572:	2300      	movs	r3, #0
 8005574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005578:	2300      	movs	r3, #0
 800557a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800557e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800558a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10f      	bne.n	80055b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <HAL_UART_IRQHandler+0x66>
 800559e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fb99 	bl	8005ce2 <UART_Receive_IT>
      return;
 80055b0:	e256      	b.n	8005a60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80de 	beq.w	8005778 <HAL_UART_IRQHandler+0x22c>
 80055bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d106      	bne.n	80055d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80d1 	beq.w	8005778 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <HAL_UART_IRQHandler+0xae>
 80055e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f043 0201 	orr.w	r2, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <HAL_UART_IRQHandler+0xd2>
 8005606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f043 0202 	orr.w	r2, r3, #2
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800561e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00b      	beq.n	8005642 <HAL_UART_IRQHandler+0xf6>
 800562a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f043 0204 	orr.w	r2, r3, #4
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d011      	beq.n	8005672 <HAL_UART_IRQHandler+0x126>
 800564e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d105      	bne.n	8005666 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800565a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d005      	beq.n	8005672 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f043 0208 	orr.w	r2, r3, #8
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 81ed 	beq.w	8005a56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800567c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_UART_IRQHandler+0x14e>
 8005688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fb24 	bl	8005ce2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a4:	2b40      	cmp	r3, #64	; 0x40
 80056a6:	bf0c      	ite	eq
 80056a8:	2301      	moveq	r3, #1
 80056aa:	2300      	movne	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d103      	bne.n	80056c6 <HAL_UART_IRQHandler+0x17a>
 80056be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d04f      	beq.n	8005766 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa2c 	bl	8005b24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d6:	2b40      	cmp	r3, #64	; 0x40
 80056d8:	d141      	bne.n	800575e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3314      	adds	r3, #20
 80056e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3314      	adds	r3, #20
 8005702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005706:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800570a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005712:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800571e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1d9      	bne.n	80056da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	2b00      	cmp	r3, #0
 800572c:	d013      	beq.n	8005756 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	4a7d      	ldr	r2, [pc, #500]	; (8005928 <HAL_UART_IRQHandler+0x3dc>)
 8005734:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	4618      	mov	r0, r3
 800573c:	f7fc fd3b 	bl	80021b6 <HAL_DMA_Abort_IT>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d016      	beq.n	8005774 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005750:	4610      	mov	r0, r2
 8005752:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005754:	e00e      	b.n	8005774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f990 	bl	8005a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800575c:	e00a      	b.n	8005774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f98c 	bl	8005a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005764:	e006      	b.n	8005774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f988 	bl	8005a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005772:	e170      	b.n	8005a56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005774:	bf00      	nop
    return;
 8005776:	e16e      	b.n	8005a56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	2b01      	cmp	r3, #1
 800577e:	f040 814a 	bne.w	8005a16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 8143 	beq.w	8005a16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005794:	f003 0310 	and.w	r3, r3, #16
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 813c 	beq.w	8005a16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800579e:	2300      	movs	r3, #0
 80057a0:	60bb      	str	r3, [r7, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	60bb      	str	r3, [r7, #8]
 80057b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	f040 80b4 	bne.w	800592c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8140 	beq.w	8005a5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057e2:	429a      	cmp	r2, r3
 80057e4:	f080 8139 	bcs.w	8005a5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fa:	f000 8088 	beq.w	800590e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005814:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800581c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	330c      	adds	r3, #12
 8005826:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800582a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800582e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005836:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1d9      	bne.n	80057fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3314      	adds	r3, #20
 8005850:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800585a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3314      	adds	r3, #20
 800586a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800586e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005872:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005876:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e1      	bne.n	800584a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3314      	adds	r3, #20
 800588c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800589c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3314      	adds	r3, #20
 80058a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e3      	bne.n	8005886 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	330c      	adds	r3, #12
 80058d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058de:	f023 0310 	bic.w	r3, r3, #16
 80058e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	330c      	adds	r3, #12
 80058ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80058f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e3      	bne.n	80058cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	4618      	mov	r0, r3
 800590a:	f7fc fbe4 	bl	80020d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005916:	b29b      	uxth	r3, r3
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	b29b      	uxth	r3, r3
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f8b6 	bl	8005a90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005924:	e099      	b.n	8005a5a <HAL_UART_IRQHandler+0x50e>
 8005926:	bf00      	nop
 8005928:	08005beb 	.word	0x08005beb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005934:	b29b      	uxth	r3, r3
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 808b 	beq.w	8005a5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8086 	beq.w	8005a5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005976:	647a      	str	r2, [r7, #68]	; 0x44
 8005978:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800597c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e3      	bne.n	8005952 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3314      	adds	r3, #20
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	623b      	str	r3, [r7, #32]
   return(result);
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3314      	adds	r3, #20
 80059aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059ae:	633a      	str	r2, [r7, #48]	; 0x30
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e3      	bne.n	800598a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	60fb      	str	r3, [r7, #12]
   return(result);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0310 	bic.w	r3, r3, #16
 80059e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	330c      	adds	r3, #12
 80059f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059f4:	61fa      	str	r2, [r7, #28]
 80059f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	69b9      	ldr	r1, [r7, #24]
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	617b      	str	r3, [r7, #20]
   return(result);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e3      	bne.n	80059d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f83e 	bl	8005a90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a14:	e023      	b.n	8005a5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <HAL_UART_IRQHandler+0x4ea>
 8005a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f8ef 	bl	8005c12 <UART_Transmit_IT>
    return;
 8005a34:	e014      	b.n	8005a60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00e      	beq.n	8005a60 <HAL_UART_IRQHandler+0x514>
 8005a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d008      	beq.n	8005a60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f92f 	bl	8005cb2 <UART_EndTransmit_IT>
    return;
 8005a54:	e004      	b.n	8005a60 <HAL_UART_IRQHandler+0x514>
    return;
 8005a56:	bf00      	nop
 8005a58:	e002      	b.n	8005a60 <HAL_UART_IRQHandler+0x514>
      return;
 8005a5a:	bf00      	nop
 8005a5c:	e000      	b.n	8005a60 <HAL_UART_IRQHandler+0x514>
      return;
 8005a5e:	bf00      	nop
  }
}
 8005a60:	37e8      	adds	r7, #232	; 0xe8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop

08005a68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	88fa      	ldrh	r2, [r7, #6]
 8005ac6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2222      	movs	r2, #34	; 0x22
 8005ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005af4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695a      	ldr	r2, [r3, #20]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0201 	orr.w	r2, r2, #1
 8005b04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0220 	orr.w	r2, r2, #32
 8005b14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b095      	sub	sp, #84	; 0x54
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	330c      	adds	r3, #12
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	330c      	adds	r3, #12
 8005b4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b4c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e5      	bne.n	8005b2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3314      	adds	r3, #20
 8005b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	f023 0301 	bic.w	r3, r3, #1
 8005b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3314      	adds	r3, #20
 8005b7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e5      	bne.n	8005b60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d119      	bne.n	8005bd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f023 0310 	bic.w	r3, r3, #16
 8005bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bbc:	61ba      	str	r2, [r7, #24]
 8005bbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	6979      	ldr	r1, [r7, #20]
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e5      	bne.n	8005b9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bde:	bf00      	nop
 8005be0:	3754      	adds	r7, #84	; 0x54
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff ff39 	bl	8005a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c0a:	bf00      	nop
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b21      	cmp	r3, #33	; 0x21
 8005c24:	d13e      	bne.n	8005ca4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2e:	d114      	bne.n	8005c5a <UART_Transmit_IT+0x48>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d110      	bne.n	8005c5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	1c9a      	adds	r2, r3, #2
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	621a      	str	r2, [r3, #32]
 8005c58:	e008      	b.n	8005c6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	1c59      	adds	r1, r3, #1
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6211      	str	r1, [r2, #32]
 8005c64:	781a      	ldrb	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10f      	bne.n	8005ca0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e000      	b.n	8005ca6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ca4:	2302      	movs	r3, #2
  }
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff fec8 	bl	8005a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b08c      	sub	sp, #48	; 0x30
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b22      	cmp	r3, #34	; 0x22
 8005cf4:	f040 80ab 	bne.w	8005e4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d00:	d117      	bne.n	8005d32 <UART_Receive_IT+0x50>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d113      	bne.n	8005d32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	1c9a      	adds	r2, r3, #2
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d30:	e026      	b.n	8005d80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d44:	d007      	beq.n	8005d56 <UART_Receive_IT+0x74>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <UART_Receive_IT+0x82>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	e008      	b.n	8005d76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d15a      	bne.n	8005e4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0220 	bic.w	r2, r2, #32
 8005da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005db2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d135      	bne.n	8005e40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	330c      	adds	r3, #12
 8005de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f023 0310 	bic.w	r3, r3, #16
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	330c      	adds	r3, #12
 8005df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfa:	623a      	str	r2, [r7, #32]
 8005dfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	69f9      	ldr	r1, [r7, #28]
 8005e00:	6a3a      	ldr	r2, [r7, #32]
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e5      	bne.n	8005dda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	2b10      	cmp	r3, #16
 8005e1a:	d10a      	bne.n	8005e32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff fe29 	bl	8005a90 <HAL_UARTEx_RxEventCallback>
 8005e3e:	e002      	b.n	8005e46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7fa fe29 	bl	8000a98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e002      	b.n	8005e50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e000      	b.n	8005e50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e4e:	2302      	movs	r3, #2
  }
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3730      	adds	r7, #48	; 0x30
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e5c:	b0c0      	sub	sp, #256	; 0x100
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e74:	68d9      	ldr	r1, [r3, #12]
 8005e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	ea40 0301 	orr.w	r3, r0, r1
 8005e80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	431a      	orrs	r2, r3
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005eb0:	f021 010c 	bic.w	r1, r1, #12
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed2:	6999      	ldr	r1, [r3, #24]
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	ea40 0301 	orr.w	r3, r0, r1
 8005ede:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4b8f      	ldr	r3, [pc, #572]	; (8006124 <UART_SetConfig+0x2cc>)
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d005      	beq.n	8005ef8 <UART_SetConfig+0xa0>
 8005eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	4b8d      	ldr	r3, [pc, #564]	; (8006128 <UART_SetConfig+0x2d0>)
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d104      	bne.n	8005f02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ef8:	f7fe fa4e 	bl	8004398 <HAL_RCC_GetPCLK2Freq>
 8005efc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f00:	e003      	b.n	8005f0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f02:	f7fe fa35 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 8005f06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f14:	f040 810c 	bne.w	8006130 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	1891      	adds	r1, r2, r2
 8005f30:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f32:	415b      	adcs	r3, r3
 8005f34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	eb12 0801 	adds.w	r8, r2, r1
 8005f40:	4629      	mov	r1, r5
 8005f42:	eb43 0901 	adc.w	r9, r3, r1
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f5a:	4690      	mov	r8, r2
 8005f5c:	4699      	mov	r9, r3
 8005f5e:	4623      	mov	r3, r4
 8005f60:	eb18 0303 	adds.w	r3, r8, r3
 8005f64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f68:	462b      	mov	r3, r5
 8005f6a:	eb49 0303 	adc.w	r3, r9, r3
 8005f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f86:	460b      	mov	r3, r1
 8005f88:	18db      	adds	r3, r3, r3
 8005f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	eb42 0303 	adc.w	r3, r2, r3
 8005f92:	657b      	str	r3, [r7, #84]	; 0x54
 8005f94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f9c:	f7fa f914 	bl	80001c8 <__aeabi_uldivmod>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4b61      	ldr	r3, [pc, #388]	; (800612c <UART_SetConfig+0x2d4>)
 8005fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	011c      	lsls	r4, r3, #4
 8005fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005fbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005fc0:	4642      	mov	r2, r8
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	1891      	adds	r1, r2, r2
 8005fc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005fc8:	415b      	adcs	r3, r3
 8005fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	eb12 0a01 	adds.w	sl, r2, r1
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	eb43 0b01 	adc.w	fp, r3, r1
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fe8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ff0:	4692      	mov	sl, r2
 8005ff2:	469b      	mov	fp, r3
 8005ff4:	4643      	mov	r3, r8
 8005ff6:	eb1a 0303 	adds.w	r3, sl, r3
 8005ffa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ffe:	464b      	mov	r3, r9
 8006000:	eb4b 0303 	adc.w	r3, fp, r3
 8006004:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006014:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006018:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800601c:	460b      	mov	r3, r1
 800601e:	18db      	adds	r3, r3, r3
 8006020:	643b      	str	r3, [r7, #64]	; 0x40
 8006022:	4613      	mov	r3, r2
 8006024:	eb42 0303 	adc.w	r3, r2, r3
 8006028:	647b      	str	r3, [r7, #68]	; 0x44
 800602a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800602e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006032:	f7fa f8c9 	bl	80001c8 <__aeabi_uldivmod>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4611      	mov	r1, r2
 800603c:	4b3b      	ldr	r3, [pc, #236]	; (800612c <UART_SetConfig+0x2d4>)
 800603e:	fba3 2301 	umull	r2, r3, r3, r1
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	2264      	movs	r2, #100	; 0x64
 8006046:	fb02 f303 	mul.w	r3, r2, r3
 800604a:	1acb      	subs	r3, r1, r3
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006052:	4b36      	ldr	r3, [pc, #216]	; (800612c <UART_SetConfig+0x2d4>)
 8006054:	fba3 2302 	umull	r2, r3, r3, r2
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006060:	441c      	add	r4, r3
 8006062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006066:	2200      	movs	r2, #0
 8006068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800606c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006070:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006074:	4642      	mov	r2, r8
 8006076:	464b      	mov	r3, r9
 8006078:	1891      	adds	r1, r2, r2
 800607a:	63b9      	str	r1, [r7, #56]	; 0x38
 800607c:	415b      	adcs	r3, r3
 800607e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006080:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006084:	4641      	mov	r1, r8
 8006086:	1851      	adds	r1, r2, r1
 8006088:	6339      	str	r1, [r7, #48]	; 0x30
 800608a:	4649      	mov	r1, r9
 800608c:	414b      	adcs	r3, r1
 800608e:	637b      	str	r3, [r7, #52]	; 0x34
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800609c:	4659      	mov	r1, fp
 800609e:	00cb      	lsls	r3, r1, #3
 80060a0:	4651      	mov	r1, sl
 80060a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a6:	4651      	mov	r1, sl
 80060a8:	00ca      	lsls	r2, r1, #3
 80060aa:	4610      	mov	r0, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	4603      	mov	r3, r0
 80060b0:	4642      	mov	r2, r8
 80060b2:	189b      	adds	r3, r3, r2
 80060b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060b8:	464b      	mov	r3, r9
 80060ba:	460a      	mov	r2, r1
 80060bc:	eb42 0303 	adc.w	r3, r2, r3
 80060c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060d8:	460b      	mov	r3, r1
 80060da:	18db      	adds	r3, r3, r3
 80060dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060de:	4613      	mov	r3, r2
 80060e0:	eb42 0303 	adc.w	r3, r2, r3
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060ee:	f7fa f86b 	bl	80001c8 <__aeabi_uldivmod>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <UART_SetConfig+0x2d4>)
 80060f8:	fba3 1302 	umull	r1, r3, r3, r2
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	2164      	movs	r1, #100	; 0x64
 8006100:	fb01 f303 	mul.w	r3, r1, r3
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	3332      	adds	r3, #50	; 0x32
 800610a:	4a08      	ldr	r2, [pc, #32]	; (800612c <UART_SetConfig+0x2d4>)
 800610c:	fba2 2303 	umull	r2, r3, r2, r3
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	f003 0207 	and.w	r2, r3, #7
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4422      	add	r2, r4
 800611e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006120:	e105      	b.n	800632e <UART_SetConfig+0x4d6>
 8006122:	bf00      	nop
 8006124:	40011000 	.word	0x40011000
 8006128:	40011400 	.word	0x40011400
 800612c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006134:	2200      	movs	r2, #0
 8006136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800613a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800613e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006142:	4642      	mov	r2, r8
 8006144:	464b      	mov	r3, r9
 8006146:	1891      	adds	r1, r2, r2
 8006148:	6239      	str	r1, [r7, #32]
 800614a:	415b      	adcs	r3, r3
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
 800614e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006152:	4641      	mov	r1, r8
 8006154:	1854      	adds	r4, r2, r1
 8006156:	4649      	mov	r1, r9
 8006158:	eb43 0501 	adc.w	r5, r3, r1
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	00eb      	lsls	r3, r5, #3
 8006166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800616a:	00e2      	lsls	r2, r4, #3
 800616c:	4614      	mov	r4, r2
 800616e:	461d      	mov	r5, r3
 8006170:	4643      	mov	r3, r8
 8006172:	18e3      	adds	r3, r4, r3
 8006174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006178:	464b      	mov	r3, r9
 800617a:	eb45 0303 	adc.w	r3, r5, r3
 800617e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800618e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006192:	f04f 0200 	mov.w	r2, #0
 8006196:	f04f 0300 	mov.w	r3, #0
 800619a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800619e:	4629      	mov	r1, r5
 80061a0:	008b      	lsls	r3, r1, #2
 80061a2:	4621      	mov	r1, r4
 80061a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061a8:	4621      	mov	r1, r4
 80061aa:	008a      	lsls	r2, r1, #2
 80061ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061b0:	f7fa f80a 	bl	80001c8 <__aeabi_uldivmod>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4b60      	ldr	r3, [pc, #384]	; (800633c <UART_SetConfig+0x4e4>)
 80061ba:	fba3 2302 	umull	r2, r3, r3, r2
 80061be:	095b      	lsrs	r3, r3, #5
 80061c0:	011c      	lsls	r4, r3, #4
 80061c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061d4:	4642      	mov	r2, r8
 80061d6:	464b      	mov	r3, r9
 80061d8:	1891      	adds	r1, r2, r2
 80061da:	61b9      	str	r1, [r7, #24]
 80061dc:	415b      	adcs	r3, r3
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061e4:	4641      	mov	r1, r8
 80061e6:	1851      	adds	r1, r2, r1
 80061e8:	6139      	str	r1, [r7, #16]
 80061ea:	4649      	mov	r1, r9
 80061ec:	414b      	adcs	r3, r1
 80061ee:	617b      	str	r3, [r7, #20]
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	f04f 0300 	mov.w	r3, #0
 80061f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061fc:	4659      	mov	r1, fp
 80061fe:	00cb      	lsls	r3, r1, #3
 8006200:	4651      	mov	r1, sl
 8006202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006206:	4651      	mov	r1, sl
 8006208:	00ca      	lsls	r2, r1, #3
 800620a:	4610      	mov	r0, r2
 800620c:	4619      	mov	r1, r3
 800620e:	4603      	mov	r3, r0
 8006210:	4642      	mov	r2, r8
 8006212:	189b      	adds	r3, r3, r2
 8006214:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006218:	464b      	mov	r3, r9
 800621a:	460a      	mov	r2, r1
 800621c:	eb42 0303 	adc.w	r3, r2, r3
 8006220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	67bb      	str	r3, [r7, #120]	; 0x78
 800622e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800623c:	4649      	mov	r1, r9
 800623e:	008b      	lsls	r3, r1, #2
 8006240:	4641      	mov	r1, r8
 8006242:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006246:	4641      	mov	r1, r8
 8006248:	008a      	lsls	r2, r1, #2
 800624a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800624e:	f7f9 ffbb 	bl	80001c8 <__aeabi_uldivmod>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	4b39      	ldr	r3, [pc, #228]	; (800633c <UART_SetConfig+0x4e4>)
 8006258:	fba3 1302 	umull	r1, r3, r3, r2
 800625c:	095b      	lsrs	r3, r3, #5
 800625e:	2164      	movs	r1, #100	; 0x64
 8006260:	fb01 f303 	mul.w	r3, r1, r3
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	3332      	adds	r3, #50	; 0x32
 800626a:	4a34      	ldr	r2, [pc, #208]	; (800633c <UART_SetConfig+0x4e4>)
 800626c:	fba2 2303 	umull	r2, r3, r2, r3
 8006270:	095b      	lsrs	r3, r3, #5
 8006272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006276:	441c      	add	r4, r3
 8006278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800627c:	2200      	movs	r2, #0
 800627e:	673b      	str	r3, [r7, #112]	; 0x70
 8006280:	677a      	str	r2, [r7, #116]	; 0x74
 8006282:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006286:	4642      	mov	r2, r8
 8006288:	464b      	mov	r3, r9
 800628a:	1891      	adds	r1, r2, r2
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	415b      	adcs	r3, r3
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006296:	4641      	mov	r1, r8
 8006298:	1851      	adds	r1, r2, r1
 800629a:	6039      	str	r1, [r7, #0]
 800629c:	4649      	mov	r1, r9
 800629e:	414b      	adcs	r3, r1
 80062a0:	607b      	str	r3, [r7, #4]
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	f04f 0300 	mov.w	r3, #0
 80062aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062ae:	4659      	mov	r1, fp
 80062b0:	00cb      	lsls	r3, r1, #3
 80062b2:	4651      	mov	r1, sl
 80062b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062b8:	4651      	mov	r1, sl
 80062ba:	00ca      	lsls	r2, r1, #3
 80062bc:	4610      	mov	r0, r2
 80062be:	4619      	mov	r1, r3
 80062c0:	4603      	mov	r3, r0
 80062c2:	4642      	mov	r2, r8
 80062c4:	189b      	adds	r3, r3, r2
 80062c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80062c8:	464b      	mov	r3, r9
 80062ca:	460a      	mov	r2, r1
 80062cc:	eb42 0303 	adc.w	r3, r2, r3
 80062d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	663b      	str	r3, [r7, #96]	; 0x60
 80062dc:	667a      	str	r2, [r7, #100]	; 0x64
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062ea:	4649      	mov	r1, r9
 80062ec:	008b      	lsls	r3, r1, #2
 80062ee:	4641      	mov	r1, r8
 80062f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062f4:	4641      	mov	r1, r8
 80062f6:	008a      	lsls	r2, r1, #2
 80062f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062fc:	f7f9 ff64 	bl	80001c8 <__aeabi_uldivmod>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4b0d      	ldr	r3, [pc, #52]	; (800633c <UART_SetConfig+0x4e4>)
 8006306:	fba3 1302 	umull	r1, r3, r3, r2
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	2164      	movs	r1, #100	; 0x64
 800630e:	fb01 f303 	mul.w	r3, r1, r3
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	3332      	adds	r3, #50	; 0x32
 8006318:	4a08      	ldr	r2, [pc, #32]	; (800633c <UART_SetConfig+0x4e4>)
 800631a:	fba2 2303 	umull	r2, r3, r2, r3
 800631e:	095b      	lsrs	r3, r3, #5
 8006320:	f003 020f 	and.w	r2, r3, #15
 8006324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4422      	add	r2, r4
 800632c:	609a      	str	r2, [r3, #8]
}
 800632e:	bf00      	nop
 8006330:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006334:	46bd      	mov	sp, r7
 8006336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800633a:	bf00      	nop
 800633c:	51eb851f 	.word	0x51eb851f

08006340 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006340:	b084      	sub	sp, #16
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	f107 001c 	add.w	r0, r7, #28
 800634e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	2b01      	cmp	r3, #1
 8006356:	d122      	bne.n	800639e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800636c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006382:	2b01      	cmp	r3, #1
 8006384:	d105      	bne.n	8006392 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 fbee 	bl	8007b74 <USB_CoreReset>
 8006398:	4603      	mov	r3, r0
 800639a:	73fb      	strb	r3, [r7, #15]
 800639c:	e01a      	b.n	80063d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 fbe2 	bl	8007b74 <USB_CoreReset>
 80063b0:	4603      	mov	r3, r0
 80063b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	639a      	str	r2, [r3, #56]	; 0x38
 80063c6:	e005      	b.n	80063d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d10b      	bne.n	80063f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f043 0206 	orr.w	r2, r3, #6
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f043 0220 	orr.w	r2, r3, #32
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063fe:	b004      	add	sp, #16
 8006400:	4770      	bx	lr
	...

08006404 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d165      	bne.n	80064e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4a41      	ldr	r2, [pc, #260]	; (8006520 <USB_SetTurnaroundTime+0x11c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d906      	bls.n	800642e <USB_SetTurnaroundTime+0x2a>
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4a40      	ldr	r2, [pc, #256]	; (8006524 <USB_SetTurnaroundTime+0x120>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d202      	bcs.n	800642e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006428:	230f      	movs	r3, #15
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	e062      	b.n	80064f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4a3c      	ldr	r2, [pc, #240]	; (8006524 <USB_SetTurnaroundTime+0x120>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d306      	bcc.n	8006444 <USB_SetTurnaroundTime+0x40>
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	4a3b      	ldr	r2, [pc, #236]	; (8006528 <USB_SetTurnaroundTime+0x124>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d202      	bcs.n	8006444 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800643e:	230e      	movs	r3, #14
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	e057      	b.n	80064f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4a38      	ldr	r2, [pc, #224]	; (8006528 <USB_SetTurnaroundTime+0x124>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d306      	bcc.n	800645a <USB_SetTurnaroundTime+0x56>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4a37      	ldr	r2, [pc, #220]	; (800652c <USB_SetTurnaroundTime+0x128>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d202      	bcs.n	800645a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006454:	230d      	movs	r3, #13
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	e04c      	b.n	80064f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4a33      	ldr	r2, [pc, #204]	; (800652c <USB_SetTurnaroundTime+0x128>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d306      	bcc.n	8006470 <USB_SetTurnaroundTime+0x6c>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	4a32      	ldr	r2, [pc, #200]	; (8006530 <USB_SetTurnaroundTime+0x12c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d802      	bhi.n	8006470 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800646a:	230c      	movs	r3, #12
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	e041      	b.n	80064f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4a2f      	ldr	r2, [pc, #188]	; (8006530 <USB_SetTurnaroundTime+0x12c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d906      	bls.n	8006486 <USB_SetTurnaroundTime+0x82>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4a2e      	ldr	r2, [pc, #184]	; (8006534 <USB_SetTurnaroundTime+0x130>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d802      	bhi.n	8006486 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006480:	230b      	movs	r3, #11
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	e036      	b.n	80064f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	4a2a      	ldr	r2, [pc, #168]	; (8006534 <USB_SetTurnaroundTime+0x130>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d906      	bls.n	800649c <USB_SetTurnaroundTime+0x98>
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	4a29      	ldr	r2, [pc, #164]	; (8006538 <USB_SetTurnaroundTime+0x134>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d802      	bhi.n	800649c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006496:	230a      	movs	r3, #10
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	e02b      	b.n	80064f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4a26      	ldr	r2, [pc, #152]	; (8006538 <USB_SetTurnaroundTime+0x134>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d906      	bls.n	80064b2 <USB_SetTurnaroundTime+0xae>
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4a25      	ldr	r2, [pc, #148]	; (800653c <USB_SetTurnaroundTime+0x138>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d202      	bcs.n	80064b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80064ac:	2309      	movs	r3, #9
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	e020      	b.n	80064f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4a21      	ldr	r2, [pc, #132]	; (800653c <USB_SetTurnaroundTime+0x138>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d306      	bcc.n	80064c8 <USB_SetTurnaroundTime+0xc4>
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	4a20      	ldr	r2, [pc, #128]	; (8006540 <USB_SetTurnaroundTime+0x13c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d802      	bhi.n	80064c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80064c2:	2308      	movs	r3, #8
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	e015      	b.n	80064f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4a1d      	ldr	r2, [pc, #116]	; (8006540 <USB_SetTurnaroundTime+0x13c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d906      	bls.n	80064de <USB_SetTurnaroundTime+0xda>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4a1c      	ldr	r2, [pc, #112]	; (8006544 <USB_SetTurnaroundTime+0x140>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d202      	bcs.n	80064de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80064d8:	2307      	movs	r3, #7
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	e00a      	b.n	80064f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80064de:	2306      	movs	r3, #6
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	e007      	b.n	80064f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d102      	bne.n	80064f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80064ea:	2309      	movs	r3, #9
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	e001      	b.n	80064f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80064f0:	2309      	movs	r3, #9
 80064f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	029b      	lsls	r3, r3, #10
 8006508:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800650c:	431a      	orrs	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	00d8acbf 	.word	0x00d8acbf
 8006524:	00e4e1c0 	.word	0x00e4e1c0
 8006528:	00f42400 	.word	0x00f42400
 800652c:	01067380 	.word	0x01067380
 8006530:	011a499f 	.word	0x011a499f
 8006534:	01312cff 	.word	0x01312cff
 8006538:	014ca43f 	.word	0x014ca43f
 800653c:	016e3600 	.word	0x016e3600
 8006540:	01a6ab1f 	.word	0x01a6ab1f
 8006544:	01e84800 	.word	0x01e84800

08006548 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f043 0201 	orr.w	r2, r3, #1
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f023 0201 	bic.w	r2, r3, #1
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d115      	bne.n	80065da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065ba:	2001      	movs	r0, #1
 80065bc:	f7fb fc56 	bl	8001e6c <HAL_Delay>
      ms++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 fa45 	bl	8007a56 <USB_GetMode>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d01e      	beq.n	8006610 <USB_SetCurrentMode+0x84>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b31      	cmp	r3, #49	; 0x31
 80065d6:	d9f0      	bls.n	80065ba <USB_SetCurrentMode+0x2e>
 80065d8:	e01a      	b.n	8006610 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d115      	bne.n	800660c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065ec:	2001      	movs	r0, #1
 80065ee:	f7fb fc3d 	bl	8001e6c <HAL_Delay>
      ms++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fa2c 	bl	8007a56 <USB_GetMode>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <USB_SetCurrentMode+0x84>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b31      	cmp	r3, #49	; 0x31
 8006608:	d9f0      	bls.n	80065ec <USB_SetCurrentMode+0x60>
 800660a:	e001      	b.n	8006610 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e005      	b.n	800661c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b32      	cmp	r3, #50	; 0x32
 8006614:	d101      	bne.n	800661a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006624:	b084      	sub	sp, #16
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	e009      	b.n	8006658 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	3340      	adds	r3, #64	; 0x40
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	2200      	movs	r2, #0
 8006650:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3301      	adds	r3, #1
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	2b0e      	cmp	r3, #14
 800665c:	d9f2      	bls.n	8006644 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800665e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d11c      	bne.n	800669e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006672:	f043 0302 	orr.w	r3, r3, #2
 8006676:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
 800669c:	e00b      	b.n	80066b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066bc:	461a      	mov	r2, r3
 80066be:	2300      	movs	r3, #0
 80066c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c8:	4619      	mov	r1, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d0:	461a      	mov	r2, r3
 80066d2:	680b      	ldr	r3, [r1, #0]
 80066d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d10c      	bne.n	80066f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d104      	bne.n	80066ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066e2:	2100      	movs	r1, #0
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f965 	bl	80069b4 <USB_SetDevSpeed>
 80066ea:	e008      	b.n	80066fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066ec:	2101      	movs	r1, #1
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f960 	bl	80069b4 <USB_SetDevSpeed>
 80066f4:	e003      	b.n	80066fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066f6:	2103      	movs	r1, #3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f95b 	bl	80069b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066fe:	2110      	movs	r1, #16
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f8f3 	bl	80068ec <USB_FlushTxFifo>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f91f 	bl	8006954 <USB_FlushRxFifo>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006726:	461a      	mov	r2, r3
 8006728:	2300      	movs	r3, #0
 800672a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006732:	461a      	mov	r2, r3
 8006734:	2300      	movs	r3, #0
 8006736:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	461a      	mov	r2, r3
 8006740:	2300      	movs	r3, #0
 8006742:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006744:	2300      	movs	r3, #0
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	e043      	b.n	80067d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800675c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006760:	d118      	bne.n	8006794 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006774:	461a      	mov	r2, r3
 8006776:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	e013      	b.n	80067a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678a:	461a      	mov	r2, r3
 800678c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e008      	b.n	80067a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a0:	461a      	mov	r2, r3
 80067a2:	2300      	movs	r3, #0
 80067a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b2:	461a      	mov	r2, r3
 80067b4:	2300      	movs	r3, #0
 80067b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c4:	461a      	mov	r2, r3
 80067c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	3301      	adds	r3, #1
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d3b7      	bcc.n	800674a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067da:	2300      	movs	r3, #0
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	e043      	b.n	8006868 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f6:	d118      	bne.n	800682a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680a:	461a      	mov	r2, r3
 800680c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	e013      	b.n	800683c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006820:	461a      	mov	r2, r3
 8006822:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	e008      	b.n	800683c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006836:	461a      	mov	r2, r3
 8006838:	2300      	movs	r3, #0
 800683a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006848:	461a      	mov	r2, r3
 800684a:	2300      	movs	r3, #0
 800684c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	461a      	mov	r2, r3
 800685c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006860:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	3301      	adds	r3, #1
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	429a      	cmp	r2, r3
 800686e:	d3b7      	bcc.n	80067e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800687e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006882:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006890:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	2b00      	cmp	r3, #0
 8006896:	d105      	bne.n	80068a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	f043 0210 	orr.w	r2, r3, #16
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699a      	ldr	r2, [r3, #24]
 80068a8:	4b0f      	ldr	r3, [pc, #60]	; (80068e8 <USB_DevInit+0x2c4>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	f043 0208 	orr.w	r2, r3, #8
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d107      	bne.n	80068d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068d0:	f043 0304 	orr.w	r3, r3, #4
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068e4:	b004      	add	sp, #16
 80068e6:	4770      	bx	lr
 80068e8:	803c3800 	.word	0x803c3800

080068ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3301      	adds	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4a13      	ldr	r2, [pc, #76]	; (8006950 <USB_FlushTxFifo+0x64>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d901      	bls.n	800690c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e01b      	b.n	8006944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	daf2      	bge.n	80068fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	019b      	lsls	r3, r3, #6
 800691c:	f043 0220 	orr.w	r2, r3, #32
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3301      	adds	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4a08      	ldr	r2, [pc, #32]	; (8006950 <USB_FlushTxFifo+0x64>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e006      	b.n	8006944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b20      	cmp	r3, #32
 8006940:	d0f0      	beq.n	8006924 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	00030d40 	.word	0x00030d40

08006954 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3301      	adds	r3, #1
 8006964:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4a11      	ldr	r2, [pc, #68]	; (80069b0 <USB_FlushRxFifo+0x5c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d901      	bls.n	8006972 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e018      	b.n	80069a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	daf2      	bge.n	8006960 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2210      	movs	r2, #16
 8006982:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3301      	adds	r3, #1
 8006988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4a08      	ldr	r2, [pc, #32]	; (80069b0 <USB_FlushRxFifo+0x5c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d901      	bls.n	8006996 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e006      	b.n	80069a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0310 	and.w	r3, r3, #16
 800699e:	2b10      	cmp	r3, #16
 80069a0:	d0f0      	beq.n	8006984 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	00030d40 	.word	0x00030d40

080069b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	68f9      	ldr	r1, [r7, #12]
 80069d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069d4:	4313      	orrs	r3, r2
 80069d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b087      	sub	sp, #28
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 0306 	and.w	r3, r3, #6
 80069fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d102      	bne.n	8006a0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a06:	2300      	movs	r3, #0
 8006a08:	75fb      	strb	r3, [r7, #23]
 8006a0a:	e00a      	b.n	8006a22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d002      	beq.n	8006a18 <USB_GetDevSpeed+0x32>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b06      	cmp	r3, #6
 8006a16:	d102      	bne.n	8006a1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	75fb      	strb	r3, [r7, #23]
 8006a1c:	e001      	b.n	8006a22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a1e:	230f      	movs	r3, #15
 8006a20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	371c      	adds	r7, #28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	785b      	ldrb	r3, [r3, #1]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d13a      	bne.n	8006ac2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	68f9      	ldr	r1, [r7, #12]
 8006a66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d155      	bne.n	8006b30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	791b      	ldrb	r3, [r3, #4]
 8006a9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006aa0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	059b      	lsls	r3, r3, #22
 8006aa6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	0151      	lsls	r1, r2, #5
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	440a      	add	r2, r1
 8006ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	e036      	b.n	8006b30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac8:	69da      	ldr	r2, [r3, #28]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad8:	041b      	lsls	r3, r3, #16
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d11a      	bne.n	8006b30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	791b      	ldrb	r3, [r3, #4]
 8006b14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b16:	430b      	orrs	r3, r1
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	0151      	lsls	r1, r2, #5
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	440a      	add	r2, r1
 8006b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
	...

08006b40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	785b      	ldrb	r3, [r3, #1]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d161      	bne.n	8006c20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b72:	d11f      	bne.n	8006bb4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	f003 030f 	and.w	r3, r3, #15
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	43db      	mvns	r3, r3
 8006bce:	68f9      	ldr	r1, [r7, #12]
 8006bd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bde:	69da      	ldr	r2, [r3, #28]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	f003 030f 	and.w	r3, r3, #15
 8006be8:	2101      	movs	r1, #1
 8006bea:	fa01 f303 	lsl.w	r3, r1, r3
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	68f9      	ldr	r1, [r7, #12]
 8006bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	0159      	lsls	r1, r3, #5
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	440b      	add	r3, r1
 8006c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c16:	4619      	mov	r1, r3
 8006c18:	4b35      	ldr	r3, [pc, #212]	; (8006cf0 <USB_DeactivateEndpoint+0x1b0>)
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	600b      	str	r3, [r1, #0]
 8006c1e:	e060      	b.n	8006ce2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c36:	d11f      	bne.n	8006c78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	0151      	lsls	r1, r2, #5
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	2101      	movs	r1, #1
 8006c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c8e:	041b      	lsls	r3, r3, #16
 8006c90:	43db      	mvns	r3, r3
 8006c92:	68f9      	ldr	r1, [r7, #12]
 8006c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c98:	4013      	ands	r3, r2
 8006c9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca2:	69da      	ldr	r2, [r3, #28]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	2101      	movs	r1, #1
 8006cae:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb2:	041b      	lsls	r3, r3, #16
 8006cb4:	43db      	mvns	r3, r3
 8006cb6:	68f9      	ldr	r1, [r7, #12]
 8006cb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	0159      	lsls	r1, r3, #5
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	440b      	add	r3, r1
 8006cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <USB_DeactivateEndpoint+0x1b4>)
 8006cde:	4013      	ands	r3, r2
 8006ce0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	ec337800 	.word	0xec337800
 8006cf4:	eff37800 	.word	0xeff37800

08006cf8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08a      	sub	sp, #40	; 0x28
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	4613      	mov	r3, r2
 8006d04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	785b      	ldrb	r3, [r3, #1]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	f040 815c 	bne.w	8006fd2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d132      	bne.n	8006d88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	0151      	lsls	r1, r2, #5
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	440a      	add	r2, r1
 8006d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	0151      	lsls	r1, r2, #5
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	440a      	add	r2, r1
 8006d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	69fa      	ldr	r2, [r7, #28]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d80:	0cdb      	lsrs	r3, r3, #19
 8006d82:	04db      	lsls	r3, r3, #19
 8006d84:	6113      	str	r3, [r2, #16]
 8006d86:	e074      	b.n	8006e72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	0151      	lsls	r1, r2, #5
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	440a      	add	r2, r1
 8006d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da2:	0cdb      	lsrs	r3, r3, #19
 8006da4:	04db      	lsls	r3, r3, #19
 8006da6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	0151      	lsls	r1, r2, #5
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	440a      	add	r2, r1
 8006dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	6999      	ldr	r1, [r3, #24]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	440b      	add	r3, r1
 8006de4:	1e59      	subs	r1, r3, #1
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	fbb1 f3f3 	udiv	r3, r1, r3
 8006dee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006df0:	4b9d      	ldr	r3, [pc, #628]	; (8007068 <USB_EPStartXfer+0x370>)
 8006df2:	400b      	ands	r3, r1
 8006df4:	69b9      	ldr	r1, [r7, #24]
 8006df6:	0148      	lsls	r0, r1, #5
 8006df8:	69f9      	ldr	r1, [r7, #28]
 8006dfa:	4401      	add	r1, r0
 8006dfc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e00:	4313      	orrs	r3, r2
 8006e02:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e10:	691a      	ldr	r2, [r3, #16]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e1a:	69b9      	ldr	r1, [r7, #24]
 8006e1c:	0148      	lsls	r0, r1, #5
 8006e1e:	69f9      	ldr	r1, [r7, #28]
 8006e20:	4401      	add	r1, r0
 8006e22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e26:	4313      	orrs	r3, r2
 8006e28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	791b      	ldrb	r3, [r3, #4]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d11f      	bne.n	8006e72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	0151      	lsls	r1, r2, #5
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	440a      	add	r2, r1
 8006e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006e50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d14b      	bne.n	8006f10 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d009      	beq.n	8006e94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	791b      	ldrb	r3, [r3, #4]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d128      	bne.n	8006eee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d110      	bne.n	8006ece <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	0151      	lsls	r1, r2, #5
 8006ebe:	69fa      	ldr	r2, [r7, #28]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	e00f      	b.n	8006eee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	e133      	b.n	8007178 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	0151      	lsls	r1, r2, #5
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	440a      	add	r2, r1
 8006f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f2e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	791b      	ldrb	r3, [r3, #4]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d015      	beq.n	8006f64 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 811b 	beq.w	8007178 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	2101      	movs	r1, #1
 8006f54:	fa01 f303 	lsl.w	r3, r1, r3
 8006f58:	69f9      	ldr	r1, [r7, #28]
 8006f5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	634b      	str	r3, [r1, #52]	; 0x34
 8006f62:	e109      	b.n	8007178 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d110      	bne.n	8006f96 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	0151      	lsls	r1, r2, #5
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	440a      	add	r2, r1
 8006f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	e00f      	b.n	8006fb6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	0151      	lsls	r1, r2, #5
 8006fa8:	69fa      	ldr	r2, [r7, #28]
 8006faa:	440a      	add	r2, r1
 8006fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fb4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	6919      	ldr	r1, [r3, #16]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	781a      	ldrb	r2, [r3, #0]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	b298      	uxth	r0, r3
 8006fc4:	79fb      	ldrb	r3, [r7, #7]
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	4603      	mov	r3, r0
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 fade 	bl	800758c <USB_WritePacket>
 8006fd0:	e0d2      	b.n	8007178 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fec:	0cdb      	lsrs	r3, r3, #19
 8006fee:	04db      	lsls	r3, r3, #19
 8006ff0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800700c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007010:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007014:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d126      	bne.n	800706c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702a:	691a      	ldr	r2, [r3, #16]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007034:	69b9      	ldr	r1, [r7, #24]
 8007036:	0148      	lsls	r0, r1, #5
 8007038:	69f9      	ldr	r1, [r7, #28]
 800703a:	4401      	add	r1, r0
 800703c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007040:	4313      	orrs	r3, r2
 8007042:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	69fa      	ldr	r2, [r7, #28]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800705e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007062:	6113      	str	r3, [r2, #16]
 8007064:	e03a      	b.n	80070dc <USB_EPStartXfer+0x3e4>
 8007066:	bf00      	nop
 8007068:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	699a      	ldr	r2, [r3, #24]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	4413      	add	r3, r2
 8007076:	1e5a      	subs	r2, r3, #1
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007080:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	8afa      	ldrh	r2, [r7, #22]
 8007088:	fb03 f202 	mul.w	r2, r3, r2
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709c:	691a      	ldr	r2, [r3, #16]
 800709e:	8afb      	ldrh	r3, [r7, #22]
 80070a0:	04d9      	lsls	r1, r3, #19
 80070a2:	4b38      	ldr	r3, [pc, #224]	; (8007184 <USB_EPStartXfer+0x48c>)
 80070a4:	400b      	ands	r3, r1
 80070a6:	69b9      	ldr	r1, [r7, #24]
 80070a8:	0148      	lsls	r0, r1, #5
 80070aa:	69f9      	ldr	r1, [r7, #28]
 80070ac:	4401      	add	r1, r0
 80070ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070b2:	4313      	orrs	r3, r2
 80070b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070cc:	69b9      	ldr	r1, [r7, #24]
 80070ce:	0148      	lsls	r0, r1, #5
 80070d0:	69f9      	ldr	r1, [r7, #28]
 80070d2:	4401      	add	r1, r0
 80070d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070d8:	4313      	orrs	r3, r2
 80070da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d10d      	bne.n	80070fe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d009      	beq.n	80070fe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	6919      	ldr	r1, [r3, #16]
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fa:	460a      	mov	r2, r1
 80070fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	791b      	ldrb	r3, [r3, #4]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d128      	bne.n	8007158 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007112:	2b00      	cmp	r3, #0
 8007114:	d110      	bne.n	8007138 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007130:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	e00f      	b.n	8007158 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007156:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	440a      	add	r2, r1
 800716e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007172:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007176:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3720      	adds	r7, #32
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	1ff80000 	.word	0x1ff80000

08007188 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	4613      	mov	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	785b      	ldrb	r3, [r3, #1]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	f040 80ce 	bne.w	8007346 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d132      	bne.n	8007218 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	0151      	lsls	r1, r2, #5
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	440a      	add	r2, r1
 80071ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	0151      	lsls	r1, r2, #5
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	440a      	add	r2, r1
 800720c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007210:	0cdb      	lsrs	r3, r3, #19
 8007212:	04db      	lsls	r3, r3, #19
 8007214:	6113      	str	r3, [r2, #16]
 8007216:	e04e      	b.n	80072b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	0151      	lsls	r1, r2, #5
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	440a      	add	r2, r1
 800722e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007232:	0cdb      	lsrs	r3, r3, #19
 8007234:	04db      	lsls	r3, r3, #19
 8007236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	0151      	lsls	r1, r2, #5
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	440a      	add	r2, r1
 800724e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007252:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007256:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800725a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	699a      	ldr	r2, [r3, #24]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	429a      	cmp	r2, r3
 8007266:	d903      	bls.n	8007270 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	0151      	lsls	r1, r2, #5
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	440a      	add	r2, r1
 8007286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800728a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800728e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729c:	691a      	ldr	r2, [r3, #16]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072a6:	6939      	ldr	r1, [r7, #16]
 80072a8:	0148      	lsls	r0, r1, #5
 80072aa:	6979      	ldr	r1, [r7, #20]
 80072ac:	4401      	add	r1, r0
 80072ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072b2:	4313      	orrs	r3, r2
 80072b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d11e      	bne.n	80072fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d009      	beq.n	80072d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d0:	461a      	mov	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	0151      	lsls	r1, r2, #5
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	440a      	add	r2, r1
 80072ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072f6:	6013      	str	r3, [r2, #0]
 80072f8:	e097      	b.n	800742a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	0151      	lsls	r1, r2, #5
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	440a      	add	r2, r1
 8007310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007314:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007318:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 8083 	beq.w	800742a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	2101      	movs	r1, #1
 8007336:	fa01 f303 	lsl.w	r3, r1, r3
 800733a:	6979      	ldr	r1, [r7, #20]
 800733c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007340:	4313      	orrs	r3, r2
 8007342:	634b      	str	r3, [r1, #52]	; 0x34
 8007344:	e071      	b.n	800742a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	0151      	lsls	r1, r2, #5
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	440a      	add	r2, r1
 800735c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007360:	0cdb      	lsrs	r3, r3, #19
 8007362:	04db      	lsls	r3, r3, #19
 8007364:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	440a      	add	r2, r1
 800737c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007380:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007384:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007388:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073d8:	6939      	ldr	r1, [r7, #16]
 80073da:	0148      	lsls	r0, r1, #5
 80073dc:	6979      	ldr	r1, [r7, #20]
 80073de:	4401      	add	r1, r0
 80073e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073e4:	4313      	orrs	r3, r2
 80073e6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d10d      	bne.n	800740a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d009      	beq.n	800740a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6919      	ldr	r1, [r3, #16]
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007406:	460a      	mov	r2, r1
 8007408:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	440a      	add	r2, r1
 8007420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007424:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007428:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	371c      	adds	r7, #28
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	785b      	ldrb	r3, [r3, #1]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d14a      	bne.n	80074ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800746a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800746e:	f040 8086 	bne.w	800757e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	7812      	ldrb	r2, [r2, #0]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	440a      	add	r2, r1
 800748c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007490:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007494:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	7812      	ldrb	r2, [r2, #0]
 80074aa:	0151      	lsls	r1, r2, #5
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	440a      	add	r2, r1
 80074b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3301      	adds	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d902      	bls.n	80074d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	75fb      	strb	r3, [r7, #23]
          break;
 80074ce:	e056      	b.n	800757e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074e8:	d0e7      	beq.n	80074ba <USB_EPStopXfer+0x82>
 80074ea:	e048      	b.n	800757e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007504:	d13b      	bne.n	800757e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	7812      	ldrb	r2, [r2, #0]
 800751a:	0151      	lsls	r1, r2, #5
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	440a      	add	r2, r1
 8007520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007524:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007528:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	7812      	ldrb	r2, [r2, #0]
 800753e:	0151      	lsls	r1, r2, #5
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	440a      	add	r2, r1
 8007544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007548:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800754c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3301      	adds	r3, #1
 8007552:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f242 7210 	movw	r2, #10000	; 0x2710
 800755a:	4293      	cmp	r3, r2
 800755c:	d902      	bls.n	8007564 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	75fb      	strb	r3, [r7, #23]
          break;
 8007562:	e00c      	b.n	800757e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800757c:	d0e7      	beq.n	800754e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800757e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007580:	4618      	mov	r0, r3
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800758c:	b480      	push	{r7}
 800758e:	b089      	sub	sp, #36	; 0x24
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	4611      	mov	r1, r2
 8007598:	461a      	mov	r2, r3
 800759a:	460b      	mov	r3, r1
 800759c:	71fb      	strb	r3, [r7, #7]
 800759e:	4613      	mov	r3, r2
 80075a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80075aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d123      	bne.n	80075fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80075b2:	88bb      	ldrh	r3, [r7, #4]
 80075b4:	3303      	adds	r3, #3
 80075b6:	089b      	lsrs	r3, r3, #2
 80075b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80075ba:	2300      	movs	r3, #0
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	e018      	b.n	80075f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075c0:	79fb      	ldrb	r3, [r7, #7]
 80075c2:	031a      	lsls	r2, r3, #12
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075cc:	461a      	mov	r2, r3
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	3301      	adds	r3, #1
 80075d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	3301      	adds	r3, #1
 80075de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	3301      	adds	r3, #1
 80075e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	3301      	adds	r3, #1
 80075ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	3301      	adds	r3, #1
 80075f0:	61bb      	str	r3, [r7, #24]
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d3e2      	bcc.n	80075c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3724      	adds	r7, #36	; 0x24
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007608:	b480      	push	{r7}
 800760a:	b08b      	sub	sp, #44	; 0x2c
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	4613      	mov	r3, r2
 8007614:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	089b      	lsrs	r3, r3, #2
 8007622:	b29b      	uxth	r3, r3
 8007624:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007626:	88fb      	ldrh	r3, [r7, #6]
 8007628:	f003 0303 	and.w	r3, r3, #3
 800762c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800762e:	2300      	movs	r3, #0
 8007630:	623b      	str	r3, [r7, #32]
 8007632:	e014      	b.n	800765e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	3301      	adds	r3, #1
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	3301      	adds	r3, #1
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	3301      	adds	r3, #1
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	3301      	adds	r3, #1
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	3301      	adds	r3, #1
 800765c:	623b      	str	r3, [r7, #32]
 800765e:	6a3a      	ldr	r2, [r7, #32]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	429a      	cmp	r2, r3
 8007664:	d3e6      	bcc.n	8007634 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007666:	8bfb      	ldrh	r3, [r7, #30]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01e      	beq.n	80076aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800766c:	2300      	movs	r3, #0
 800766e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007676:	461a      	mov	r2, r3
 8007678:	f107 0310 	add.w	r3, r7, #16
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	fa22 f303 	lsr.w	r3, r2, r3
 800768c:	b2da      	uxtb	r2, r3
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	701a      	strb	r2, [r3, #0]
      i++;
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	3301      	adds	r3, #1
 8007696:	623b      	str	r3, [r7, #32]
      pDest++;
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	3301      	adds	r3, #1
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800769e:	8bfb      	ldrh	r3, [r7, #30]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076a4:	8bfb      	ldrh	r3, [r7, #30]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1ea      	bne.n	8007680 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	372c      	adds	r7, #44	; 0x2c
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	785b      	ldrb	r3, [r3, #1]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d12c      	bne.n	800772e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	db12      	blt.n	800770c <USB_EPSetStall+0x54>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00f      	beq.n	800770c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	0151      	lsls	r1, r2, #5
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	440a      	add	r2, r1
 8007702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007706:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800770a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	440a      	add	r2, r1
 8007722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007726:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	e02b      	b.n	8007786 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	db12      	blt.n	8007766 <USB_EPSetStall+0xae>
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00f      	beq.n	8007766 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	015a      	lsls	r2, r3, #5
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4413      	add	r3, r2
 800774e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	0151      	lsls	r1, r2, #5
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	440a      	add	r2, r1
 800775c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007760:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007764:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	0151      	lsls	r1, r2, #5
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	440a      	add	r2, r1
 800777c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007784:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	785b      	ldrb	r3, [r3, #1]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d128      	bne.n	8007802 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	0151      	lsls	r1, r2, #5
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	440a      	add	r2, r1
 80077c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	791b      	ldrb	r3, [r3, #4]
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	d003      	beq.n	80077e0 <USB_EPClearStall+0x4c>
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	791b      	ldrb	r3, [r3, #4]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d138      	bne.n	8007852 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	0151      	lsls	r1, r2, #5
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	440a      	add	r2, r1
 80077f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	e027      	b.n	8007852 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	0151      	lsls	r1, r2, #5
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	440a      	add	r2, r1
 8007818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800781c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007820:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	791b      	ldrb	r3, [r3, #4]
 8007826:	2b03      	cmp	r3, #3
 8007828:	d003      	beq.n	8007832 <USB_EPClearStall+0x9e>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	791b      	ldrb	r3, [r3, #4]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d10f      	bne.n	8007852 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800784c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007850:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	460b      	mov	r3, r1
 800786a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800787e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007882:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	011b      	lsls	r3, r3, #4
 8007890:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007894:	68f9      	ldr	r1, [r7, #12]
 8007896:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800789a:	4313      	orrs	r3, r2
 800789c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078c6:	f023 0303 	bic.w	r3, r3, #3
 80078ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078da:	f023 0302 	bic.w	r3, r3, #2
 80078de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b085      	sub	sp, #20
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007908:	f023 0303 	bic.w	r3, r3, #3
 800790c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800791c:	f043 0302 	orr.w	r3, r3, #2
 8007920:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	4013      	ands	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007948:	68fb      	ldr	r3, [r7, #12]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	4013      	ands	r3, r2
 8007978:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	0c1b      	lsrs	r3, r3, #16
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800798a:	b480      	push	{r7}
 800798c:	b085      	sub	sp, #20
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	4013      	ands	r3, r2
 80079ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	b29b      	uxth	r3, r3
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079be:	b480      	push	{r7}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	460b      	mov	r3, r1
 80079c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	4013      	ands	r3, r2
 80079ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079ec:	68bb      	ldr	r3, [r7, #8]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b087      	sub	sp, #28
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	460b      	mov	r3, r1
 8007a04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007a1e:	78fb      	ldrb	r3, [r7, #3]
 8007a20:	f003 030f 	and.w	r3, r3, #15
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	fa22 f303 	lsr.w	r3, r2, r3
 8007a2a:	01db      	lsls	r3, r3, #7
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007a34:	78fb      	ldrb	r3, [r7, #3]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	4013      	ands	r3, r2
 8007a46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a48:	68bb      	ldr	r3, [r7, #8]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	f003 0301 	and.w	r3, r3, #1
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a90:	f023 0307 	bic.w	r3, r3, #7
 8007a94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aa8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	333c      	adds	r3, #60	; 0x3c
 8007ace:	3304      	adds	r3, #4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	4a26      	ldr	r2, [pc, #152]	; (8007b70 <USB_EP0_OutStart+0xb8>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d90a      	bls.n	8007af2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007aec:	d101      	bne.n	8007af2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	e037      	b.n	8007b62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af8:	461a      	mov	r2, r3
 8007afa:	2300      	movs	r3, #0
 8007afc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b20:	f043 0318 	orr.w	r3, r3, #24
 8007b24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007b38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007b3a:	7afb      	ldrb	r3, [r7, #11]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d10f      	bne.n	8007b60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b46:	461a      	mov	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007b5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	4f54300a 	.word	0x4f54300a

08007b74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3301      	adds	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4a13      	ldr	r2, [pc, #76]	; (8007bd8 <USB_CoreReset+0x64>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d901      	bls.n	8007b92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e01b      	b.n	8007bca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	daf2      	bge.n	8007b80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f043 0201 	orr.w	r2, r3, #1
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4a09      	ldr	r2, [pc, #36]	; (8007bd8 <USB_CoreReset+0x64>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d901      	bls.n	8007bbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e006      	b.n	8007bca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d0f0      	beq.n	8007baa <USB_CoreReset+0x36>

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	00030d40 	.word	0x00030d40

08007bdc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007be8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007bec:	f002 fd2a 	bl	800a644 <USBD_static_malloc>
 8007bf0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d109      	bne.n	8007c0c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	32b0      	adds	r2, #176	; 0xb0
 8007c02:	2100      	movs	r1, #0
 8007c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e0d4      	b.n	8007db6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007c0c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007c10:	2100      	movs	r1, #0
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f002 fd8c 	bl	800a730 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	32b0      	adds	r2, #176	; 0xb0
 8007c22:	68f9      	ldr	r1, [r7, #12]
 8007c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	32b0      	adds	r2, #176	; 0xb0
 8007c32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	7c1b      	ldrb	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d138      	bne.n	8007cb6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c44:	4b5e      	ldr	r3, [pc, #376]	; (8007dc0 <USBD_CDC_Init+0x1e4>)
 8007c46:	7819      	ldrb	r1, [r3, #0]
 8007c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f002 fbd5 	bl	800a3fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c54:	4b5a      	ldr	r3, [pc, #360]	; (8007dc0 <USBD_CDC_Init+0x1e4>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	f003 020f 	and.w	r2, r3, #15
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	440b      	add	r3, r1
 8007c68:	3324      	adds	r3, #36	; 0x24
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c6e:	4b55      	ldr	r3, [pc, #340]	; (8007dc4 <USBD_CDC_Init+0x1e8>)
 8007c70:	7819      	ldrb	r1, [r3, #0]
 8007c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c76:	2202      	movs	r2, #2
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f002 fbc0 	bl	800a3fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c7e:	4b51      	ldr	r3, [pc, #324]	; (8007dc4 <USBD_CDC_Init+0x1e8>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	f003 020f 	and.w	r2, r3, #15
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c96:	2201      	movs	r2, #1
 8007c98:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c9a:	4b4b      	ldr	r3, [pc, #300]	; (8007dc8 <USBD_CDC_Init+0x1ec>)
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	f003 020f 	and.w	r2, r3, #15
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	440b      	add	r3, r1
 8007cae:	3326      	adds	r3, #38	; 0x26
 8007cb0:	2210      	movs	r2, #16
 8007cb2:	801a      	strh	r2, [r3, #0]
 8007cb4:	e035      	b.n	8007d22 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007cb6:	4b42      	ldr	r3, [pc, #264]	; (8007dc0 <USBD_CDC_Init+0x1e4>)
 8007cb8:	7819      	ldrb	r1, [r3, #0]
 8007cba:	2340      	movs	r3, #64	; 0x40
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f002 fb9d 	bl	800a3fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007cc4:	4b3e      	ldr	r3, [pc, #248]	; (8007dc0 <USBD_CDC_Init+0x1e4>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	f003 020f 	and.w	r2, r3, #15
 8007ccc:	6879      	ldr	r1, [r7, #4]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	440b      	add	r3, r1
 8007cd8:	3324      	adds	r3, #36	; 0x24
 8007cda:	2201      	movs	r2, #1
 8007cdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007cde:	4b39      	ldr	r3, [pc, #228]	; (8007dc4 <USBD_CDC_Init+0x1e8>)
 8007ce0:	7819      	ldrb	r1, [r3, #0]
 8007ce2:	2340      	movs	r3, #64	; 0x40
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f002 fb89 	bl	800a3fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007cec:	4b35      	ldr	r3, [pc, #212]	; (8007dc4 <USBD_CDC_Init+0x1e8>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	f003 020f 	and.w	r2, r3, #15
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d04:	2201      	movs	r2, #1
 8007d06:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d08:	4b2f      	ldr	r3, [pc, #188]	; (8007dc8 <USBD_CDC_Init+0x1ec>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	f003 020f 	and.w	r2, r3, #15
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	4613      	mov	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	3326      	adds	r3, #38	; 0x26
 8007d1e:	2210      	movs	r2, #16
 8007d20:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d22:	4b29      	ldr	r3, [pc, #164]	; (8007dc8 <USBD_CDC_Init+0x1ec>)
 8007d24:	7819      	ldrb	r1, [r3, #0]
 8007d26:	2308      	movs	r3, #8
 8007d28:	2203      	movs	r2, #3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f002 fb67 	bl	800a3fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007d30:	4b25      	ldr	r3, [pc, #148]	; (8007dc8 <USBD_CDC_Init+0x1ec>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	f003 020f 	and.w	r2, r3, #15
 8007d38:	6879      	ldr	r1, [r7, #4]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	440b      	add	r3, r1
 8007d44:	3324      	adds	r3, #36	; 0x24
 8007d46:	2201      	movs	r2, #1
 8007d48:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	33b0      	adds	r3, #176	; 0xb0
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007d80:	2302      	movs	r3, #2
 8007d82:	e018      	b.n	8007db6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	7c1b      	ldrb	r3, [r3, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d8c:	4b0d      	ldr	r3, [pc, #52]	; (8007dc4 <USBD_CDC_Init+0x1e8>)
 8007d8e:	7819      	ldrb	r1, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f002 fc1e 	bl	800a5dc <USBD_LL_PrepareReceive>
 8007da0:	e008      	b.n	8007db4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007da2:	4b08      	ldr	r3, [pc, #32]	; (8007dc4 <USBD_CDC_Init+0x1e8>)
 8007da4:	7819      	ldrb	r1, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dac:	2340      	movs	r3, #64	; 0x40
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f002 fc14 	bl	800a5dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	2000010f 	.word	0x2000010f
 8007dc4:	20000110 	.word	0x20000110
 8007dc8:	20000111 	.word	0x20000111

08007dcc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007dd8:	4b3a      	ldr	r3, [pc, #232]	; (8007ec4 <USBD_CDC_DeInit+0xf8>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f002 fb33 	bl	800a44a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007de4:	4b37      	ldr	r3, [pc, #220]	; (8007ec4 <USBD_CDC_DeInit+0xf8>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f003 020f 	and.w	r2, r3, #15
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	440b      	add	r3, r1
 8007df8:	3324      	adds	r3, #36	; 0x24
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007dfe:	4b32      	ldr	r3, [pc, #200]	; (8007ec8 <USBD_CDC_DeInit+0xfc>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f002 fb20 	bl	800a44a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007e0a:	4b2f      	ldr	r3, [pc, #188]	; (8007ec8 <USBD_CDC_DeInit+0xfc>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	f003 020f 	and.w	r2, r3, #15
 8007e12:	6879      	ldr	r1, [r7, #4]
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	440b      	add	r3, r1
 8007e1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e22:	2200      	movs	r2, #0
 8007e24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007e26:	4b29      	ldr	r3, [pc, #164]	; (8007ecc <USBD_CDC_DeInit+0x100>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f002 fb0c 	bl	800a44a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007e32:	4b26      	ldr	r3, [pc, #152]	; (8007ecc <USBD_CDC_DeInit+0x100>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	f003 020f 	and.w	r2, r3, #15
 8007e3a:	6879      	ldr	r1, [r7, #4]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	440b      	add	r3, r1
 8007e46:	3324      	adds	r3, #36	; 0x24
 8007e48:	2200      	movs	r2, #0
 8007e4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007e4c:	4b1f      	ldr	r3, [pc, #124]	; (8007ecc <USBD_CDC_DeInit+0x100>)
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	f003 020f 	and.w	r2, r3, #15
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	440b      	add	r3, r1
 8007e60:	3326      	adds	r3, #38	; 0x26
 8007e62:	2200      	movs	r2, #0
 8007e64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	32b0      	adds	r2, #176	; 0xb0
 8007e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01f      	beq.n	8007eb8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	33b0      	adds	r3, #176	; 0xb0
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	32b0      	adds	r2, #176	; 0xb0
 8007e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f002 fbe0 	bl	800a660 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	32b0      	adds	r2, #176	; 0xb0
 8007eaa:	2100      	movs	r1, #0
 8007eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	2000010f 	.word	0x2000010f
 8007ec8:	20000110 	.word	0x20000110
 8007ecc:	20000111 	.word	0x20000111

08007ed0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	32b0      	adds	r2, #176	; 0xb0
 8007ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e0bf      	b.n	8008080 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d050      	beq.n	8007fae <USBD_CDC_Setup+0xde>
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	f040 80af 	bne.w	8008070 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	88db      	ldrh	r3, [r3, #6]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d03a      	beq.n	8007f90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	b25b      	sxtb	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	da1b      	bge.n	8007f5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	33b0      	adds	r3, #176	; 0xb0
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007f3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	88d2      	ldrh	r2, [r2, #6]
 8007f40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	88db      	ldrh	r3, [r3, #6]
 8007f46:	2b07      	cmp	r3, #7
 8007f48:	bf28      	it	cs
 8007f4a:	2307      	movcs	r3, #7
 8007f4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	89fa      	ldrh	r2, [r7, #14]
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 fd89 	bl	8009a6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007f5a:	e090      	b.n	800807e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	785a      	ldrb	r2, [r3, #1]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	88db      	ldrh	r3, [r3, #6]
 8007f6a:	2b3f      	cmp	r3, #63	; 0x3f
 8007f6c:	d803      	bhi.n	8007f76 <USBD_CDC_Setup+0xa6>
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	88db      	ldrh	r3, [r3, #6]
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	e000      	b.n	8007f78 <USBD_CDC_Setup+0xa8>
 8007f76:	2240      	movs	r2, #64	; 0x40
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007f7e:	6939      	ldr	r1, [r7, #16]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007f86:	461a      	mov	r2, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 fd9b 	bl	8009ac4 <USBD_CtlPrepareRx>
      break;
 8007f8e:	e076      	b.n	800807e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	33b0      	adds	r3, #176	; 0xb0
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	7850      	ldrb	r0, [r2, #1]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	4798      	blx	r3
      break;
 8007fac:	e067      	b.n	800807e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	785b      	ldrb	r3, [r3, #1]
 8007fb2:	2b0b      	cmp	r3, #11
 8007fb4:	d851      	bhi.n	800805a <USBD_CDC_Setup+0x18a>
 8007fb6:	a201      	add	r2, pc, #4	; (adr r2, 8007fbc <USBD_CDC_Setup+0xec>)
 8007fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbc:	08007fed 	.word	0x08007fed
 8007fc0:	08008069 	.word	0x08008069
 8007fc4:	0800805b 	.word	0x0800805b
 8007fc8:	0800805b 	.word	0x0800805b
 8007fcc:	0800805b 	.word	0x0800805b
 8007fd0:	0800805b 	.word	0x0800805b
 8007fd4:	0800805b 	.word	0x0800805b
 8007fd8:	0800805b 	.word	0x0800805b
 8007fdc:	0800805b 	.word	0x0800805b
 8007fe0:	0800805b 	.word	0x0800805b
 8007fe4:	08008017 	.word	0x08008017
 8007fe8:	08008041 	.word	0x08008041
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d107      	bne.n	8008008 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ff8:	f107 030a 	add.w	r3, r7, #10
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 fd33 	bl	8009a6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008006:	e032      	b.n	800806e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 fcbd 	bl	800998a <USBD_CtlError>
            ret = USBD_FAIL;
 8008010:	2303      	movs	r3, #3
 8008012:	75fb      	strb	r3, [r7, #23]
          break;
 8008014:	e02b      	b.n	800806e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b03      	cmp	r3, #3
 8008020:	d107      	bne.n	8008032 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008022:	f107 030d 	add.w	r3, r7, #13
 8008026:	2201      	movs	r2, #1
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f001 fd1e 	bl	8009a6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008030:	e01d      	b.n	800806e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 fca8 	bl	800998a <USBD_CtlError>
            ret = USBD_FAIL;
 800803a:	2303      	movs	r3, #3
 800803c:	75fb      	strb	r3, [r7, #23]
          break;
 800803e:	e016      	b.n	800806e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b03      	cmp	r3, #3
 800804a:	d00f      	beq.n	800806c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 fc9b 	bl	800998a <USBD_CtlError>
            ret = USBD_FAIL;
 8008054:	2303      	movs	r3, #3
 8008056:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008058:	e008      	b.n	800806c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 fc94 	bl	800998a <USBD_CtlError>
          ret = USBD_FAIL;
 8008062:	2303      	movs	r3, #3
 8008064:	75fb      	strb	r3, [r7, #23]
          break;
 8008066:	e002      	b.n	800806e <USBD_CDC_Setup+0x19e>
          break;
 8008068:	bf00      	nop
 800806a:	e008      	b.n	800807e <USBD_CDC_Setup+0x1ae>
          break;
 800806c:	bf00      	nop
      }
      break;
 800806e:	e006      	b.n	800807e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 fc89 	bl	800998a <USBD_CtlError>
      ret = USBD_FAIL;
 8008078:	2303      	movs	r3, #3
 800807a:	75fb      	strb	r3, [r7, #23]
      break;
 800807c:	bf00      	nop
  }

  return (uint8_t)ret;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800809a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	32b0      	adds	r2, #176	; 0xb0
 80080a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e065      	b.n	800817e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	32b0      	adds	r2, #176	; 0xb0
 80080bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80080c2:	78fb      	ldrb	r3, [r7, #3]
 80080c4:	f003 020f 	and.w	r2, r3, #15
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	440b      	add	r3, r1
 80080d4:	3318      	adds	r3, #24
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d02f      	beq.n	800813c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	f003 020f 	and.w	r2, r3, #15
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	3318      	adds	r3, #24
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	f003 010f 	and.w	r1, r3, #15
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	460b      	mov	r3, r1
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	440b      	add	r3, r1
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4403      	add	r3, r0
 8008104:	3348      	adds	r3, #72	; 0x48
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	fbb2 f1f3 	udiv	r1, r2, r3
 800810c:	fb01 f303 	mul.w	r3, r1, r3
 8008110:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008112:	2b00      	cmp	r3, #0
 8008114:	d112      	bne.n	800813c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008116:	78fb      	ldrb	r3, [r7, #3]
 8008118:	f003 020f 	and.w	r2, r3, #15
 800811c:	6879      	ldr	r1, [r7, #4]
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	440b      	add	r3, r1
 8008128:	3318      	adds	r3, #24
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800812e:	78f9      	ldrb	r1, [r7, #3]
 8008130:	2300      	movs	r3, #0
 8008132:	2200      	movs	r2, #0
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f002 fa30 	bl	800a59a <USBD_LL_Transmit>
 800813a:	e01f      	b.n	800817c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2200      	movs	r2, #0
 8008140:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	33b0      	adds	r3, #176	; 0xb0
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d010      	beq.n	800817c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	33b0      	adds	r3, #176	; 0xb0
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008178:	78fa      	ldrb	r2, [r7, #3]
 800817a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	32b0      	adds	r2, #176	; 0xb0
 800819c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	32b0      	adds	r2, #176	; 0xb0
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e01a      	b.n	80081ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80081b8:	78fb      	ldrb	r3, [r7, #3]
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f002 fa2e 	bl	800a61e <USBD_LL_GetRxDataSize>
 80081c2:	4602      	mov	r2, r0
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	33b0      	adds	r3, #176	; 0xb0
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80081e8:	4611      	mov	r1, r2
 80081ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	32b0      	adds	r2, #176	; 0xb0
 8008208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008214:	2303      	movs	r3, #3
 8008216:	e025      	b.n	8008264 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	33b0      	adds	r3, #176	; 0xb0
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d01a      	beq.n	8008262 <USBD_CDC_EP0_RxReady+0x6c>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008232:	2bff      	cmp	r3, #255	; 0xff
 8008234:	d015      	beq.n	8008262 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	33b0      	adds	r3, #176	; 0xb0
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800824e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008256:	b292      	uxth	r2, r2
 8008258:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	22ff      	movs	r2, #255	; 0xff
 800825e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008274:	2182      	movs	r1, #130	; 0x82
 8008276:	4818      	ldr	r0, [pc, #96]	; (80082d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008278:	f000 fd4f 	bl	8008d1a <USBD_GetEpDesc>
 800827c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800827e:	2101      	movs	r1, #1
 8008280:	4815      	ldr	r0, [pc, #84]	; (80082d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008282:	f000 fd4a 	bl	8008d1a <USBD_GetEpDesc>
 8008286:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008288:	2181      	movs	r1, #129	; 0x81
 800828a:	4813      	ldr	r0, [pc, #76]	; (80082d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800828c:	f000 fd45 	bl	8008d1a <USBD_GetEpDesc>
 8008290:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2210      	movs	r2, #16
 800829c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d006      	beq.n	80082b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082ac:	711a      	strb	r2, [r3, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d006      	beq.n	80082c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082c0:	711a      	strb	r2, [r3, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2243      	movs	r2, #67	; 0x43
 80082ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082cc:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	200000cc 	.word	0x200000cc

080082dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082e4:	2182      	movs	r1, #130	; 0x82
 80082e6:	4818      	ldr	r0, [pc, #96]	; (8008348 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80082e8:	f000 fd17 	bl	8008d1a <USBD_GetEpDesc>
 80082ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082ee:	2101      	movs	r1, #1
 80082f0:	4815      	ldr	r0, [pc, #84]	; (8008348 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80082f2:	f000 fd12 	bl	8008d1a <USBD_GetEpDesc>
 80082f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80082f8:	2181      	movs	r1, #129	; 0x81
 80082fa:	4813      	ldr	r0, [pc, #76]	; (8008348 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80082fc:	f000 fd0d 	bl	8008d1a <USBD_GetEpDesc>
 8008300:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2210      	movs	r2, #16
 800830c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d006      	beq.n	8008322 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	2200      	movs	r2, #0
 8008318:	711a      	strb	r2, [r3, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f042 0202 	orr.w	r2, r2, #2
 8008320:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d006      	beq.n	8008336 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	711a      	strb	r2, [r3, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f042 0202 	orr.w	r2, r2, #2
 8008334:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2243      	movs	r2, #67	; 0x43
 800833a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800833c:	4b02      	ldr	r3, [pc, #8]	; (8008348 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	200000cc 	.word	0x200000cc

0800834c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008354:	2182      	movs	r1, #130	; 0x82
 8008356:	4818      	ldr	r0, [pc, #96]	; (80083b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008358:	f000 fcdf 	bl	8008d1a <USBD_GetEpDesc>
 800835c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800835e:	2101      	movs	r1, #1
 8008360:	4815      	ldr	r0, [pc, #84]	; (80083b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008362:	f000 fcda 	bl	8008d1a <USBD_GetEpDesc>
 8008366:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008368:	2181      	movs	r1, #129	; 0x81
 800836a:	4813      	ldr	r0, [pc, #76]	; (80083b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800836c:	f000 fcd5 	bl	8008d1a <USBD_GetEpDesc>
 8008370:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	2210      	movs	r2, #16
 800837c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d006      	beq.n	8008392 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	2200      	movs	r2, #0
 8008388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800838c:	711a      	strb	r2, [r3, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d006      	beq.n	80083a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083a0:	711a      	strb	r2, [r3, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2243      	movs	r2, #67	; 0x43
 80083aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80083ac:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	200000cc 	.word	0x200000cc

080083bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	220a      	movs	r2, #10
 80083c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80083ca:	4b03      	ldr	r3, [pc, #12]	; (80083d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	20000088 	.word	0x20000088

080083dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e009      	b.n	8008404 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	33b0      	adds	r3, #176	; 0xb0
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	32b0      	adds	r2, #176	; 0xb0
 8008426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008432:	2303      	movs	r3, #3
 8008434:	e008      	b.n	8008448 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	371c      	adds	r7, #28
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	32b0      	adds	r2, #176	; 0xb0
 8008468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008474:	2303      	movs	r3, #3
 8008476:	e004      	b.n	8008482 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
	...

08008490 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	32b0      	adds	r2, #176	; 0xb0
 80084a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80084a8:	2301      	movs	r3, #1
 80084aa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	32b0      	adds	r2, #176	; 0xb0
 80084b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80084be:	2303      	movs	r3, #3
 80084c0:	e025      	b.n	800850e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d11f      	bne.n	800850c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80084d4:	4b10      	ldr	r3, [pc, #64]	; (8008518 <USBD_CDC_TransmitPacket+0x88>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	f003 020f 	and.w	r2, r3, #15
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4403      	add	r3, r0
 80084ee:	3318      	adds	r3, #24
 80084f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80084f2:	4b09      	ldr	r3, [pc, #36]	; (8008518 <USBD_CDC_TransmitPacket+0x88>)
 80084f4:	7819      	ldrb	r1, [r3, #0]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f002 f849 	bl	800a59a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800850c:	7bfb      	ldrb	r3, [r7, #15]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	2000010f 	.word	0x2000010f

0800851c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	32b0      	adds	r2, #176	; 0xb0
 800852e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008532:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	32b0      	adds	r2, #176	; 0xb0
 800853e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008546:	2303      	movs	r3, #3
 8008548:	e018      	b.n	800857c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	7c1b      	ldrb	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10a      	bne.n	8008568 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008552:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <USBD_CDC_ReceivePacket+0x68>)
 8008554:	7819      	ldrb	r1, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800855c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f002 f83b 	bl	800a5dc <USBD_LL_PrepareReceive>
 8008566:	e008      	b.n	800857a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008568:	4b06      	ldr	r3, [pc, #24]	; (8008584 <USBD_CDC_ReceivePacket+0x68>)
 800856a:	7819      	ldrb	r1, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008572:	2340      	movs	r3, #64	; 0x40
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f002 f831 	bl	800a5dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20000110 	.word	0x20000110

08008588 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4613      	mov	r3, r2
 8008594:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800859c:	2303      	movs	r3, #3
 800859e:	e01f      	b.n	80085e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	79fa      	ldrb	r2, [r7, #7]
 80085d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f001 feab 	bl	800a330 <USBD_LL_Init>
 80085da:	4603      	mov	r3, r0
 80085dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80085de:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e025      	b.n	800864c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	32ae      	adds	r2, #174	; 0xae
 8008612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00f      	beq.n	800863c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	32ae      	adds	r2, #174	; 0xae
 8008626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862c:	f107 020e 	add.w	r2, r7, #14
 8008630:	4610      	mov	r0, r2
 8008632:	4798      	blx	r3
 8008634:	4602      	mov	r2, r0
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 feb3 	bl	800a3c8 <USBD_LL_Start>
 8008662:	4603      	mov	r3, r0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008674:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008676:	4618      	mov	r0, r3
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	460b      	mov	r3, r1
 800868c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008698:	2b00      	cmp	r3, #0
 800869a:	d009      	beq.n	80086b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	78fa      	ldrb	r2, [r7, #3]
 80086a6:	4611      	mov	r1, r2
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	4798      	blx	r3
 80086ac:	4603      	mov	r3, r0
 80086ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	4611      	mov	r1, r2
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	4798      	blx	r3
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80086e0:	2303      	movs	r3, #3
 80086e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	4618      	mov	r0, r3
 8008702:	f001 f908 	bl	8009916 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008714:	461a      	mov	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008722:	f003 031f 	and.w	r3, r3, #31
 8008726:	2b02      	cmp	r3, #2
 8008728:	d01a      	beq.n	8008760 <USBD_LL_SetupStage+0x72>
 800872a:	2b02      	cmp	r3, #2
 800872c:	d822      	bhi.n	8008774 <USBD_LL_SetupStage+0x86>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <USBD_LL_SetupStage+0x4a>
 8008732:	2b01      	cmp	r3, #1
 8008734:	d00a      	beq.n	800874c <USBD_LL_SetupStage+0x5e>
 8008736:	e01d      	b.n	8008774 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fb5f 	bl	8008e04 <USBD_StdDevReq>
 8008746:	4603      	mov	r3, r0
 8008748:	73fb      	strb	r3, [r7, #15]
      break;
 800874a:	e020      	b.n	800878e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fbc7 	bl	8008ee8 <USBD_StdItfReq>
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]
      break;
 800875e:	e016      	b.n	800878e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fc29 	bl	8008fc0 <USBD_StdEPReq>
 800876e:	4603      	mov	r3, r0
 8008770:	73fb      	strb	r3, [r7, #15]
      break;
 8008772:	e00c      	b.n	800878e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800877a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800877e:	b2db      	uxtb	r3, r3
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 fe80 	bl	800a488 <USBD_LL_StallEP>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]
      break;
 800878c:	bf00      	nop
  }

  return ret;
 800878e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	460b      	mov	r3, r1
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80087aa:	7afb      	ldrb	r3, [r7, #11]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d16e      	bne.n	800888e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80087b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087be:	2b03      	cmp	r3, #3
 80087c0:	f040 8098 	bne.w	80088f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	689a      	ldr	r2, [r3, #8]
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d913      	bls.n	80087f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	1ad2      	subs	r2, r2, r3
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	4293      	cmp	r3, r2
 80087e8:	bf28      	it	cs
 80087ea:	4613      	movcs	r3, r2
 80087ec:	461a      	mov	r2, r3
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f001 f984 	bl	8009afe <USBD_CtlContinueRx>
 80087f6:	e07d      	b.n	80088f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80087fe:	f003 031f 	and.w	r3, r3, #31
 8008802:	2b02      	cmp	r3, #2
 8008804:	d014      	beq.n	8008830 <USBD_LL_DataOutStage+0x98>
 8008806:	2b02      	cmp	r3, #2
 8008808:	d81d      	bhi.n	8008846 <USBD_LL_DataOutStage+0xae>
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <USBD_LL_DataOutStage+0x7c>
 800880e:	2b01      	cmp	r3, #1
 8008810:	d003      	beq.n	800881a <USBD_LL_DataOutStage+0x82>
 8008812:	e018      	b.n	8008846 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	75bb      	strb	r3, [r7, #22]
            break;
 8008818:	e018      	b.n	800884c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008820:	b2db      	uxtb	r3, r3
 8008822:	4619      	mov	r1, r3
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 fa5e 	bl	8008ce6 <USBD_CoreFindIF>
 800882a:	4603      	mov	r3, r0
 800882c:	75bb      	strb	r3, [r7, #22]
            break;
 800882e:	e00d      	b.n	800884c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008836:	b2db      	uxtb	r3, r3
 8008838:	4619      	mov	r1, r3
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 fa60 	bl	8008d00 <USBD_CoreFindEP>
 8008840:	4603      	mov	r3, r0
 8008842:	75bb      	strb	r3, [r7, #22]
            break;
 8008844:	e002      	b.n	800884c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	75bb      	strb	r3, [r7, #22]
            break;
 800884a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800884c:	7dbb      	ldrb	r3, [r7, #22]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d119      	bne.n	8008886 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b03      	cmp	r3, #3
 800885c:	d113      	bne.n	8008886 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800885e:	7dba      	ldrb	r2, [r7, #22]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	32ae      	adds	r2, #174	; 0xae
 8008864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00b      	beq.n	8008886 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800886e:	7dba      	ldrb	r2, [r7, #22]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008876:	7dba      	ldrb	r2, [r7, #22]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	32ae      	adds	r2, #174	; 0xae
 800887c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f001 f94a 	bl	8009b20 <USBD_CtlSendStatus>
 800888c:	e032      	b.n	80088f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008894:	b2db      	uxtb	r3, r3
 8008896:	4619      	mov	r1, r3
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 fa31 	bl	8008d00 <USBD_CoreFindEP>
 800889e:	4603      	mov	r3, r0
 80088a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088a2:	7dbb      	ldrb	r3, [r7, #22]
 80088a4:	2bff      	cmp	r3, #255	; 0xff
 80088a6:	d025      	beq.n	80088f4 <USBD_LL_DataOutStage+0x15c>
 80088a8:	7dbb      	ldrb	r3, [r7, #22]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d122      	bne.n	80088f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d117      	bne.n	80088ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80088ba:	7dba      	ldrb	r2, [r7, #22]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	32ae      	adds	r2, #174	; 0xae
 80088c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00f      	beq.n	80088ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80088ca:	7dba      	ldrb	r2, [r7, #22]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80088d2:	7dba      	ldrb	r2, [r7, #22]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	32ae      	adds	r2, #174	; 0xae
 80088d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	7afa      	ldrb	r2, [r7, #11]
 80088e0:	4611      	mov	r1, r2
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	4798      	blx	r3
 80088e6:	4603      	mov	r3, r0
 80088e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	e000      	b.n	80088f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b086      	sub	sp, #24
 8008902:	af00      	add	r7, sp, #0
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	460b      	mov	r3, r1
 8008908:	607a      	str	r2, [r7, #4]
 800890a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800890c:	7afb      	ldrb	r3, [r7, #11]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d16f      	bne.n	80089f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3314      	adds	r3, #20
 8008916:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800891e:	2b02      	cmp	r3, #2
 8008920:	d15a      	bne.n	80089d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	689a      	ldr	r2, [r3, #8]
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	429a      	cmp	r2, r3
 800892c:	d914      	bls.n	8008958 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	689a      	ldr	r2, [r3, #8]
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	1ad2      	subs	r2, r2, r3
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	461a      	mov	r2, r3
 8008942:	6879      	ldr	r1, [r7, #4]
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f001 f8ac 	bl	8009aa2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800894a:	2300      	movs	r3, #0
 800894c:	2200      	movs	r2, #0
 800894e:	2100      	movs	r1, #0
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f001 fe43 	bl	800a5dc <USBD_LL_PrepareReceive>
 8008956:	e03f      	b.n	80089d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	68da      	ldr	r2, [r3, #12]
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	429a      	cmp	r2, r3
 8008962:	d11c      	bne.n	800899e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800896c:	429a      	cmp	r2, r3
 800896e:	d316      	bcc.n	800899e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800897a:	429a      	cmp	r2, r3
 800897c:	d20f      	bcs.n	800899e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800897e:	2200      	movs	r2, #0
 8008980:	2100      	movs	r1, #0
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f001 f88d 	bl	8009aa2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008990:	2300      	movs	r3, #0
 8008992:	2200      	movs	r2, #0
 8008994:	2100      	movs	r1, #0
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f001 fe20 	bl	800a5dc <USBD_LL_PrepareReceive>
 800899c:	e01c      	b.n	80089d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d10f      	bne.n	80089ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d009      	beq.n	80089ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ca:	2180      	movs	r1, #128	; 0x80
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f001 fd5b 	bl	800a488 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f001 f8b7 	bl	8009b46 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d03a      	beq.n	8008a58 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f7ff fe42 	bl	800866c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80089f0:	e032      	b.n	8008a58 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80089f2:	7afb      	ldrb	r3, [r7, #11]
 80089f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	4619      	mov	r1, r3
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 f97f 	bl	8008d00 <USBD_CoreFindEP>
 8008a02:	4603      	mov	r3, r0
 8008a04:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
 8008a08:	2bff      	cmp	r3, #255	; 0xff
 8008a0a:	d025      	beq.n	8008a58 <USBD_LL_DataInStage+0x15a>
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d122      	bne.n	8008a58 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d11c      	bne.n	8008a58 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008a1e:	7dfa      	ldrb	r2, [r7, #23]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	32ae      	adds	r2, #174	; 0xae
 8008a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d014      	beq.n	8008a58 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008a2e:	7dfa      	ldrb	r2, [r7, #23]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008a36:	7dfa      	ldrb	r2, [r7, #23]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	32ae      	adds	r2, #174	; 0xae
 8008a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	7afa      	ldrb	r2, [r7, #11]
 8008a44:	4611      	mov	r1, r2
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	4798      	blx	r3
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008a4e:	7dbb      	ldrb	r3, [r7, #22]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008a54:	7dbb      	ldrb	r3, [r7, #22]
 8008a56:	e000      	b.n	8008a5a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d014      	beq.n	8008ac8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00e      	beq.n	8008ac8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	6852      	ldr	r2, [r2, #4]
 8008ab6:	b2d2      	uxtb	r2, r2
 8008ab8:	4611      	mov	r1, r2
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	4798      	blx	r3
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ac8:	2340      	movs	r3, #64	; 0x40
 8008aca:	2200      	movs	r2, #0
 8008acc:	2100      	movs	r1, #0
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 fc95 	bl	800a3fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2240      	movs	r2, #64	; 0x40
 8008ae0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ae4:	2340      	movs	r3, #64	; 0x40
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2180      	movs	r1, #128	; 0x80
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f001 fc87 	bl	800a3fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2240      	movs	r2, #64	; 0x40
 8008afa:	621a      	str	r2, [r3, #32]

  return ret;
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b083      	sub	sp, #12
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	78fa      	ldrb	r2, [r7, #3]
 8008b16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2204      	movs	r2, #4
 8008b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d106      	bne.n	8008b74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d110      	bne.n	8008bb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00b      	beq.n	8008bb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	32ae      	adds	r2, #174	; 0xae
 8008bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e01c      	b.n	8008c1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d115      	bne.n	8008c1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	32ae      	adds	r2, #174	; 0xae
 8008bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00b      	beq.n	8008c1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	32ae      	adds	r2, #174	; 0xae
 8008c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	78fa      	ldrb	r2, [r7, #3]
 8008c16:	4611      	mov	r1, r2
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	32ae      	adds	r2, #174	; 0xae
 8008c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e01c      	b.n	8008c82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b03      	cmp	r3, #3
 8008c52:	d115      	bne.n	8008c80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	32ae      	adds	r2, #174	; 0xae
 8008c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00b      	beq.n	8008c80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	32ae      	adds	r2, #174	; 0xae
 8008c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	78fa      	ldrb	r2, [r7, #3]
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00e      	beq.n	8008cdc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	6852      	ldr	r2, [r2, #4]
 8008cca:	b2d2      	uxtb	r2, r2
 8008ccc:	4611      	mov	r1, r2
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	4798      	blx	r3
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b083      	sub	sp, #12
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008cf2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	370c      	adds	r7, #12
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b086      	sub	sp, #24
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	885b      	ldrh	r3, [r3, #2]
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d920      	bls.n	8008d84 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008d4a:	e013      	b.n	8008d74 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008d4c:	f107 030a 	add.w	r3, r7, #10
 8008d50:	4619      	mov	r1, r3
 8008d52:	6978      	ldr	r0, [r7, #20]
 8008d54:	f000 f81b 	bl	8008d8e <USBD_GetNextDesc>
 8008d58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	785b      	ldrb	r3, [r3, #1]
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	d108      	bne.n	8008d74 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	789b      	ldrb	r3, [r3, #2]
 8008d6a:	78fa      	ldrb	r2, [r7, #3]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d008      	beq.n	8008d82 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d70:	2300      	movs	r3, #0
 8008d72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	885b      	ldrh	r3, [r3, #2]
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	897b      	ldrh	r3, [r7, #10]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d8e5      	bhi.n	8008d4c <USBD_GetEpDesc+0x32>
 8008d80:	e000      	b.n	8008d84 <USBD_GetEpDesc+0x6a>
          break;
 8008d82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d84:	693b      	ldr	r3, [r7, #16]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3718      	adds	r7, #24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b085      	sub	sp, #20
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	881a      	ldrh	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	4413      	add	r3, r2
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4413      	add	r3, r2
 8008db8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008dba:	68fb      	ldr	r3, [r7, #12]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b087      	sub	sp, #28
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008de6:	8a3b      	ldrh	r3, [r7, #16]
 8008de8:	021b      	lsls	r3, r3, #8
 8008dea:	b21a      	sxth	r2, r3
 8008dec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	b21b      	sxth	r3, r3
 8008df4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008df6:	89fb      	ldrh	r3, [r7, #14]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	371c      	adds	r7, #28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e1a:	2b40      	cmp	r3, #64	; 0x40
 8008e1c:	d005      	beq.n	8008e2a <USBD_StdDevReq+0x26>
 8008e1e:	2b40      	cmp	r3, #64	; 0x40
 8008e20:	d857      	bhi.n	8008ed2 <USBD_StdDevReq+0xce>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00f      	beq.n	8008e46 <USBD_StdDevReq+0x42>
 8008e26:	2b20      	cmp	r3, #32
 8008e28:	d153      	bne.n	8008ed2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	32ae      	adds	r2, #174	; 0xae
 8008e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	4798      	blx	r3
 8008e40:	4603      	mov	r3, r0
 8008e42:	73fb      	strb	r3, [r7, #15]
      break;
 8008e44:	e04a      	b.n	8008edc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	785b      	ldrb	r3, [r3, #1]
 8008e4a:	2b09      	cmp	r3, #9
 8008e4c:	d83b      	bhi.n	8008ec6 <USBD_StdDevReq+0xc2>
 8008e4e:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <USBD_StdDevReq+0x50>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008ea9 	.word	0x08008ea9
 8008e58:	08008ebd 	.word	0x08008ebd
 8008e5c:	08008ec7 	.word	0x08008ec7
 8008e60:	08008eb3 	.word	0x08008eb3
 8008e64:	08008ec7 	.word	0x08008ec7
 8008e68:	08008e87 	.word	0x08008e87
 8008e6c:	08008e7d 	.word	0x08008e7d
 8008e70:	08008ec7 	.word	0x08008ec7
 8008e74:	08008e9f 	.word	0x08008e9f
 8008e78:	08008e91 	.word	0x08008e91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fa3c 	bl	80092fc <USBD_GetDescriptor>
          break;
 8008e84:	e024      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fba1 	bl	80095d0 <USBD_SetAddress>
          break;
 8008e8e:	e01f      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fbe0 	bl	8009658 <USBD_SetConfig>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]
          break;
 8008e9c:	e018      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fc83 	bl	80097ac <USBD_GetConfig>
          break;
 8008ea6:	e013      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fcb4 	bl	8009818 <USBD_GetStatus>
          break;
 8008eb0:	e00e      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fce3 	bl	8009880 <USBD_SetFeature>
          break;
 8008eba:	e009      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fd07 	bl	80098d2 <USBD_ClrFeature>
          break;
 8008ec4:	e004      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fd5e 	bl	800998a <USBD_CtlError>
          break;
 8008ece:	bf00      	nop
      }
      break;
 8008ed0:	e004      	b.n	8008edc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fd58 	bl	800998a <USBD_CtlError>
      break;
 8008eda:	bf00      	nop
  }

  return ret;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop

08008ee8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008efe:	2b40      	cmp	r3, #64	; 0x40
 8008f00:	d005      	beq.n	8008f0e <USBD_StdItfReq+0x26>
 8008f02:	2b40      	cmp	r3, #64	; 0x40
 8008f04:	d852      	bhi.n	8008fac <USBD_StdItfReq+0xc4>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <USBD_StdItfReq+0x26>
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d14e      	bne.n	8008fac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d840      	bhi.n	8008f9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	889b      	ldrh	r3, [r3, #4]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d836      	bhi.n	8008f94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	889b      	ldrh	r3, [r3, #4]
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff fed9 	bl	8008ce6 <USBD_CoreFindIF>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	2bff      	cmp	r3, #255	; 0xff
 8008f3c:	d01d      	beq.n	8008f7a <USBD_StdItfReq+0x92>
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d11a      	bne.n	8008f7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008f44:	7bba      	ldrb	r2, [r7, #14]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	32ae      	adds	r2, #174	; 0xae
 8008f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00f      	beq.n	8008f74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008f54:	7bba      	ldrb	r2, [r7, #14]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f5c:	7bba      	ldrb	r2, [r7, #14]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	32ae      	adds	r2, #174	; 0xae
 8008f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f72:	e004      	b.n	8008f7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008f74:	2303      	movs	r3, #3
 8008f76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f78:	e001      	b.n	8008f7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	88db      	ldrh	r3, [r3, #6]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d110      	bne.n	8008fa8 <USBD_StdItfReq+0xc0>
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10d      	bne.n	8008fa8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fdc7 	bl	8009b20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f92:	e009      	b.n	8008fa8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fcf7 	bl	800998a <USBD_CtlError>
          break;
 8008f9c:	e004      	b.n	8008fa8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fcf2 	bl	800998a <USBD_CtlError>
          break;
 8008fa6:	e000      	b.n	8008faa <USBD_StdItfReq+0xc2>
          break;
 8008fa8:	bf00      	nop
      }
      break;
 8008faa:	e004      	b.n	8008fb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fceb 	bl	800998a <USBD_CtlError>
      break;
 8008fb4:	bf00      	nop
  }

  return ret;
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	889b      	ldrh	r3, [r3, #4]
 8008fd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fdc:	2b40      	cmp	r3, #64	; 0x40
 8008fde:	d007      	beq.n	8008ff0 <USBD_StdEPReq+0x30>
 8008fe0:	2b40      	cmp	r3, #64	; 0x40
 8008fe2:	f200 817f 	bhi.w	80092e4 <USBD_StdEPReq+0x324>
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d02a      	beq.n	8009040 <USBD_StdEPReq+0x80>
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	f040 817a 	bne.w	80092e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff fe83 	bl	8008d00 <USBD_CoreFindEP>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ffe:	7b7b      	ldrb	r3, [r7, #13]
 8009000:	2bff      	cmp	r3, #255	; 0xff
 8009002:	f000 8174 	beq.w	80092ee <USBD_StdEPReq+0x32e>
 8009006:	7b7b      	ldrb	r3, [r7, #13]
 8009008:	2b00      	cmp	r3, #0
 800900a:	f040 8170 	bne.w	80092ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800900e:	7b7a      	ldrb	r2, [r7, #13]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009016:	7b7a      	ldrb	r2, [r7, #13]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	32ae      	adds	r2, #174	; 0xae
 800901c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 8163 	beq.w	80092ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009028:	7b7a      	ldrb	r2, [r7, #13]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	32ae      	adds	r2, #174	; 0xae
 800902e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	4798      	blx	r3
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800903e:	e156      	b.n	80092ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	785b      	ldrb	r3, [r3, #1]
 8009044:	2b03      	cmp	r3, #3
 8009046:	d008      	beq.n	800905a <USBD_StdEPReq+0x9a>
 8009048:	2b03      	cmp	r3, #3
 800904a:	f300 8145 	bgt.w	80092d8 <USBD_StdEPReq+0x318>
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 809b 	beq.w	800918a <USBD_StdEPReq+0x1ca>
 8009054:	2b01      	cmp	r3, #1
 8009056:	d03c      	beq.n	80090d2 <USBD_StdEPReq+0x112>
 8009058:	e13e      	b.n	80092d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b02      	cmp	r3, #2
 8009064:	d002      	beq.n	800906c <USBD_StdEPReq+0xac>
 8009066:	2b03      	cmp	r3, #3
 8009068:	d016      	beq.n	8009098 <USBD_StdEPReq+0xd8>
 800906a:	e02c      	b.n	80090c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00d      	beq.n	800908e <USBD_StdEPReq+0xce>
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b80      	cmp	r3, #128	; 0x80
 8009076:	d00a      	beq.n	800908e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 fa03 	bl	800a488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009082:	2180      	movs	r1, #128	; 0x80
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f001 f9ff 	bl	800a488 <USBD_LL_StallEP>
 800908a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800908c:	e020      	b.n	80090d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fc7a 	bl	800998a <USBD_CtlError>
              break;
 8009096:	e01b      	b.n	80090d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	885b      	ldrh	r3, [r3, #2]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10e      	bne.n	80090be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00b      	beq.n	80090be <USBD_StdEPReq+0xfe>
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
 80090a8:	2b80      	cmp	r3, #128	; 0x80
 80090aa:	d008      	beq.n	80090be <USBD_StdEPReq+0xfe>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	88db      	ldrh	r3, [r3, #6]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d104      	bne.n	80090be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f001 f9e5 	bl	800a488 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fd2e 	bl	8009b20 <USBD_CtlSendStatus>

              break;
 80090c4:	e004      	b.n	80090d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fc5e 	bl	800998a <USBD_CtlError>
              break;
 80090ce:	bf00      	nop
          }
          break;
 80090d0:	e107      	b.n	80092e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d002      	beq.n	80090e4 <USBD_StdEPReq+0x124>
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d016      	beq.n	8009110 <USBD_StdEPReq+0x150>
 80090e2:	e04b      	b.n	800917c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00d      	beq.n	8009106 <USBD_StdEPReq+0x146>
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b80      	cmp	r3, #128	; 0x80
 80090ee:	d00a      	beq.n	8009106 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f001 f9c7 	bl	800a488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090fa:	2180      	movs	r1, #128	; 0x80
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 f9c3 	bl	800a488 <USBD_LL_StallEP>
 8009102:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009104:	e040      	b.n	8009188 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fc3e 	bl	800998a <USBD_CtlError>
              break;
 800910e:	e03b      	b.n	8009188 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	885b      	ldrh	r3, [r3, #2]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d136      	bne.n	8009186 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800911e:	2b00      	cmp	r3, #0
 8009120:	d004      	beq.n	800912c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 f9cd 	bl	800a4c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fcf7 	bl	8009b20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7ff fde2 	bl	8008d00 <USBD_CoreFindEP>
 800913c:	4603      	mov	r3, r0
 800913e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009140:	7b7b      	ldrb	r3, [r7, #13]
 8009142:	2bff      	cmp	r3, #255	; 0xff
 8009144:	d01f      	beq.n	8009186 <USBD_StdEPReq+0x1c6>
 8009146:	7b7b      	ldrb	r3, [r7, #13]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d11c      	bne.n	8009186 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800914c:	7b7a      	ldrb	r2, [r7, #13]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009154:	7b7a      	ldrb	r2, [r7, #13]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	32ae      	adds	r2, #174	; 0xae
 800915a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d010      	beq.n	8009186 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009164:	7b7a      	ldrb	r2, [r7, #13]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	32ae      	adds	r2, #174	; 0xae
 800916a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	4798      	blx	r3
 8009176:	4603      	mov	r3, r0
 8009178:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800917a:	e004      	b.n	8009186 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fc03 	bl	800998a <USBD_CtlError>
              break;
 8009184:	e000      	b.n	8009188 <USBD_StdEPReq+0x1c8>
              break;
 8009186:	bf00      	nop
          }
          break;
 8009188:	e0ab      	b.n	80092e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b02      	cmp	r3, #2
 8009194:	d002      	beq.n	800919c <USBD_StdEPReq+0x1dc>
 8009196:	2b03      	cmp	r3, #3
 8009198:	d032      	beq.n	8009200 <USBD_StdEPReq+0x240>
 800919a:	e097      	b.n	80092cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d007      	beq.n	80091b2 <USBD_StdEPReq+0x1f2>
 80091a2:	7bbb      	ldrb	r3, [r7, #14]
 80091a4:	2b80      	cmp	r3, #128	; 0x80
 80091a6:	d004      	beq.n	80091b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fbed 	bl	800998a <USBD_CtlError>
                break;
 80091b0:	e091      	b.n	80092d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	da0b      	bge.n	80091d2 <USBD_StdEPReq+0x212>
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	3310      	adds	r3, #16
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	4413      	add	r3, r2
 80091ce:	3304      	adds	r3, #4
 80091d0:	e00b      	b.n	80091ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091d8:	4613      	mov	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	4413      	add	r3, r2
 80091e8:	3304      	adds	r3, #4
 80091ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2202      	movs	r2, #2
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fc37 	bl	8009a6c <USBD_CtlSendData>
              break;
 80091fe:	e06a      	b.n	80092d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009200:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009204:	2b00      	cmp	r3, #0
 8009206:	da11      	bge.n	800922c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009208:	7bbb      	ldrb	r3, [r7, #14]
 800920a:	f003 020f 	and.w	r2, r3, #15
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	440b      	add	r3, r1
 800921a:	3324      	adds	r3, #36	; 0x24
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d117      	bne.n	8009252 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fbb0 	bl	800998a <USBD_CtlError>
                  break;
 800922a:	e054      	b.n	80092d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800922c:	7bbb      	ldrb	r3, [r7, #14]
 800922e:	f003 020f 	and.w	r2, r3, #15
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	440b      	add	r3, r1
 800923e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d104      	bne.n	8009252 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fb9d 	bl	800998a <USBD_CtlError>
                  break;
 8009250:	e041      	b.n	80092d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009252:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009256:	2b00      	cmp	r3, #0
 8009258:	da0b      	bge.n	8009272 <USBD_StdEPReq+0x2b2>
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009260:	4613      	mov	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	3310      	adds	r3, #16
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	4413      	add	r3, r2
 800926e:	3304      	adds	r3, #4
 8009270:	e00b      	b.n	800928a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009278:	4613      	mov	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	4413      	add	r3, r2
 8009288:	3304      	adds	r3, #4
 800928a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <USBD_StdEPReq+0x2d8>
 8009292:	7bbb      	ldrb	r3, [r7, #14]
 8009294:	2b80      	cmp	r3, #128	; 0x80
 8009296:	d103      	bne.n	80092a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	e00e      	b.n	80092be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 f92d 	bl	800a504 <USBD_LL_IsStallEP>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2201      	movs	r2, #1
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	e002      	b.n	80092be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2200      	movs	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2202      	movs	r2, #2
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fbd1 	bl	8009a6c <USBD_CtlSendData>
              break;
 80092ca:	e004      	b.n	80092d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fb5b 	bl	800998a <USBD_CtlError>
              break;
 80092d4:	bf00      	nop
          }
          break;
 80092d6:	e004      	b.n	80092e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fb55 	bl	800998a <USBD_CtlError>
          break;
 80092e0:	bf00      	nop
      }
      break;
 80092e2:	e005      	b.n	80092f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fb4f 	bl	800998a <USBD_CtlError>
      break;
 80092ec:	e000      	b.n	80092f0 <USBD_StdEPReq+0x330>
      break;
 80092ee:	bf00      	nop
  }

  return ret;
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009306:	2300      	movs	r3, #0
 8009308:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	885b      	ldrh	r3, [r3, #2]
 8009316:	0a1b      	lsrs	r3, r3, #8
 8009318:	b29b      	uxth	r3, r3
 800931a:	3b01      	subs	r3, #1
 800931c:	2b06      	cmp	r3, #6
 800931e:	f200 8128 	bhi.w	8009572 <USBD_GetDescriptor+0x276>
 8009322:	a201      	add	r2, pc, #4	; (adr r2, 8009328 <USBD_GetDescriptor+0x2c>)
 8009324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009328:	08009345 	.word	0x08009345
 800932c:	0800935d 	.word	0x0800935d
 8009330:	0800939d 	.word	0x0800939d
 8009334:	08009573 	.word	0x08009573
 8009338:	08009573 	.word	0x08009573
 800933c:	08009513 	.word	0x08009513
 8009340:	0800953f 	.word	0x0800953f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	7c12      	ldrb	r2, [r2, #16]
 8009350:	f107 0108 	add.w	r1, r7, #8
 8009354:	4610      	mov	r0, r2
 8009356:	4798      	blx	r3
 8009358:	60f8      	str	r0, [r7, #12]
      break;
 800935a:	e112      	b.n	8009582 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	7c1b      	ldrb	r3, [r3, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10d      	bne.n	8009380 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936c:	f107 0208 	add.w	r2, r7, #8
 8009370:	4610      	mov	r0, r2
 8009372:	4798      	blx	r3
 8009374:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3301      	adds	r3, #1
 800937a:	2202      	movs	r2, #2
 800937c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800937e:	e100      	b.n	8009582 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009388:	f107 0208 	add.w	r2, r7, #8
 800938c:	4610      	mov	r0, r2
 800938e:	4798      	blx	r3
 8009390:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3301      	adds	r3, #1
 8009396:	2202      	movs	r2, #2
 8009398:	701a      	strb	r2, [r3, #0]
      break;
 800939a:	e0f2      	b.n	8009582 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	885b      	ldrh	r3, [r3, #2]
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b05      	cmp	r3, #5
 80093a4:	f200 80ac 	bhi.w	8009500 <USBD_GetDescriptor+0x204>
 80093a8:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <USBD_GetDescriptor+0xb4>)
 80093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ae:	bf00      	nop
 80093b0:	080093c9 	.word	0x080093c9
 80093b4:	080093fd 	.word	0x080093fd
 80093b8:	08009431 	.word	0x08009431
 80093bc:	08009465 	.word	0x08009465
 80093c0:	08009499 	.word	0x08009499
 80093c4:	080094cd 	.word	0x080094cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00b      	beq.n	80093ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	7c12      	ldrb	r2, [r2, #16]
 80093e0:	f107 0108 	add.w	r1, r7, #8
 80093e4:	4610      	mov	r0, r2
 80093e6:	4798      	blx	r3
 80093e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ea:	e091      	b.n	8009510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 facb 	bl	800998a <USBD_CtlError>
            err++;
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	3301      	adds	r3, #1
 80093f8:	72fb      	strb	r3, [r7, #11]
          break;
 80093fa:	e089      	b.n	8009510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00b      	beq.n	8009420 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	7c12      	ldrb	r2, [r2, #16]
 8009414:	f107 0108 	add.w	r1, r7, #8
 8009418:	4610      	mov	r0, r2
 800941a:	4798      	blx	r3
 800941c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800941e:	e077      	b.n	8009510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fab1 	bl	800998a <USBD_CtlError>
            err++;
 8009428:	7afb      	ldrb	r3, [r7, #11]
 800942a:	3301      	adds	r3, #1
 800942c:	72fb      	strb	r3, [r7, #11]
          break;
 800942e:	e06f      	b.n	8009510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00b      	beq.n	8009454 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	7c12      	ldrb	r2, [r2, #16]
 8009448:	f107 0108 	add.w	r1, r7, #8
 800944c:	4610      	mov	r0, r2
 800944e:	4798      	blx	r3
 8009450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009452:	e05d      	b.n	8009510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fa97 	bl	800998a <USBD_CtlError>
            err++;
 800945c:	7afb      	ldrb	r3, [r7, #11]
 800945e:	3301      	adds	r3, #1
 8009460:	72fb      	strb	r3, [r7, #11]
          break;
 8009462:	e055      	b.n	8009510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00b      	beq.n	8009488 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	7c12      	ldrb	r2, [r2, #16]
 800947c:	f107 0108 	add.w	r1, r7, #8
 8009480:	4610      	mov	r0, r2
 8009482:	4798      	blx	r3
 8009484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009486:	e043      	b.n	8009510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa7d 	bl	800998a <USBD_CtlError>
            err++;
 8009490:	7afb      	ldrb	r3, [r7, #11]
 8009492:	3301      	adds	r3, #1
 8009494:	72fb      	strb	r3, [r7, #11]
          break;
 8009496:	e03b      	b.n	8009510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00b      	beq.n	80094bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	7c12      	ldrb	r2, [r2, #16]
 80094b0:	f107 0108 	add.w	r1, r7, #8
 80094b4:	4610      	mov	r0, r2
 80094b6:	4798      	blx	r3
 80094b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ba:	e029      	b.n	8009510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa63 	bl	800998a <USBD_CtlError>
            err++;
 80094c4:	7afb      	ldrb	r3, [r7, #11]
 80094c6:	3301      	adds	r3, #1
 80094c8:	72fb      	strb	r3, [r7, #11]
          break;
 80094ca:	e021      	b.n	8009510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00b      	beq.n	80094f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	7c12      	ldrb	r2, [r2, #16]
 80094e4:	f107 0108 	add.w	r1, r7, #8
 80094e8:	4610      	mov	r0, r2
 80094ea:	4798      	blx	r3
 80094ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ee:	e00f      	b.n	8009510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fa49 	bl	800998a <USBD_CtlError>
            err++;
 80094f8:	7afb      	ldrb	r3, [r7, #11]
 80094fa:	3301      	adds	r3, #1
 80094fc:	72fb      	strb	r3, [r7, #11]
          break;
 80094fe:	e007      	b.n	8009510 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fa41 	bl	800998a <USBD_CtlError>
          err++;
 8009508:	7afb      	ldrb	r3, [r7, #11]
 800950a:	3301      	adds	r3, #1
 800950c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800950e:	bf00      	nop
      }
      break;
 8009510:	e037      	b.n	8009582 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	7c1b      	ldrb	r3, [r3, #16]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d109      	bne.n	800952e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009522:	f107 0208 	add.w	r2, r7, #8
 8009526:	4610      	mov	r0, r2
 8009528:	4798      	blx	r3
 800952a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800952c:	e029      	b.n	8009582 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fa2a 	bl	800998a <USBD_CtlError>
        err++;
 8009536:	7afb      	ldrb	r3, [r7, #11]
 8009538:	3301      	adds	r3, #1
 800953a:	72fb      	strb	r3, [r7, #11]
      break;
 800953c:	e021      	b.n	8009582 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7c1b      	ldrb	r3, [r3, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10d      	bne.n	8009562 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	f107 0208 	add.w	r2, r7, #8
 8009552:	4610      	mov	r0, r2
 8009554:	4798      	blx	r3
 8009556:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3301      	adds	r3, #1
 800955c:	2207      	movs	r2, #7
 800955e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009560:	e00f      	b.n	8009582 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fa10 	bl	800998a <USBD_CtlError>
        err++;
 800956a:	7afb      	ldrb	r3, [r7, #11]
 800956c:	3301      	adds	r3, #1
 800956e:	72fb      	strb	r3, [r7, #11]
      break;
 8009570:	e007      	b.n	8009582 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fa08 	bl	800998a <USBD_CtlError>
      err++;
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	3301      	adds	r3, #1
 800957e:	72fb      	strb	r3, [r7, #11]
      break;
 8009580:	bf00      	nop
  }

  if (err != 0U)
 8009582:	7afb      	ldrb	r3, [r7, #11]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d11e      	bne.n	80095c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	88db      	ldrh	r3, [r3, #6]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d016      	beq.n	80095be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009590:	893b      	ldrh	r3, [r7, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00e      	beq.n	80095b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	88da      	ldrh	r2, [r3, #6]
 800959a:	893b      	ldrh	r3, [r7, #8]
 800959c:	4293      	cmp	r3, r2
 800959e:	bf28      	it	cs
 80095a0:	4613      	movcs	r3, r2
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095a6:	893b      	ldrh	r3, [r7, #8]
 80095a8:	461a      	mov	r2, r3
 80095aa:	68f9      	ldr	r1, [r7, #12]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fa5d 	bl	8009a6c <USBD_CtlSendData>
 80095b2:	e009      	b.n	80095c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f9e7 	bl	800998a <USBD_CtlError>
 80095bc:	e004      	b.n	80095c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 faae 	bl	8009b20 <USBD_CtlSendStatus>
 80095c4:	e000      	b.n	80095c8 <USBD_GetDescriptor+0x2cc>
    return;
 80095c6:	bf00      	nop
  }
}
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop

080095d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	889b      	ldrh	r3, [r3, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d131      	bne.n	8009646 <USBD_SetAddress+0x76>
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	88db      	ldrh	r3, [r3, #6]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d12d      	bne.n	8009646 <USBD_SetAddress+0x76>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	885b      	ldrh	r3, [r3, #2]
 80095ee:	2b7f      	cmp	r3, #127	; 0x7f
 80095f0:	d829      	bhi.n	8009646 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	885b      	ldrh	r3, [r3, #2]
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b03      	cmp	r3, #3
 8009608:	d104      	bne.n	8009614 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f9bc 	bl	800998a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009612:	e01d      	b.n	8009650 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	7bfa      	ldrb	r2, [r7, #15]
 8009618:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 ff9b 	bl	800a55c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fa7a 	bl	8009b20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d004      	beq.n	800963c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2202      	movs	r2, #2
 8009636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963a:	e009      	b.n	8009650 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009644:	e004      	b.n	8009650 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f99e 	bl	800998a <USBD_CtlError>
  }
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	885b      	ldrh	r3, [r3, #2]
 800966a:	b2da      	uxtb	r2, r3
 800966c:	4b4e      	ldr	r3, [pc, #312]	; (80097a8 <USBD_SetConfig+0x150>)
 800966e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009670:	4b4d      	ldr	r3, [pc, #308]	; (80097a8 <USBD_SetConfig+0x150>)
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d905      	bls.n	8009684 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f985 	bl	800998a <USBD_CtlError>
    return USBD_FAIL;
 8009680:	2303      	movs	r3, #3
 8009682:	e08c      	b.n	800979e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b02      	cmp	r3, #2
 800968e:	d002      	beq.n	8009696 <USBD_SetConfig+0x3e>
 8009690:	2b03      	cmp	r3, #3
 8009692:	d029      	beq.n	80096e8 <USBD_SetConfig+0x90>
 8009694:	e075      	b.n	8009782 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009696:	4b44      	ldr	r3, [pc, #272]	; (80097a8 <USBD_SetConfig+0x150>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d020      	beq.n	80096e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800969e:	4b42      	ldr	r3, [pc, #264]	; (80097a8 <USBD_SetConfig+0x150>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096a8:	4b3f      	ldr	r3, [pc, #252]	; (80097a8 <USBD_SetConfig+0x150>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7fe ffe7 	bl	8008682 <USBD_SetClassConfig>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d008      	beq.n	80096d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f962 	bl	800998a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2202      	movs	r2, #2
 80096ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096ce:	e065      	b.n	800979c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fa25 	bl	8009b20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2203      	movs	r2, #3
 80096da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096de:	e05d      	b.n	800979c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fa1d 	bl	8009b20 <USBD_CtlSendStatus>
      break;
 80096e6:	e059      	b.n	800979c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80096e8:	4b2f      	ldr	r3, [pc, #188]	; (80097a8 <USBD_SetConfig+0x150>)
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d112      	bne.n	8009716 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80096f8:	4b2b      	ldr	r3, [pc, #172]	; (80097a8 <USBD_SetConfig+0x150>)
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	461a      	mov	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009702:	4b29      	ldr	r3, [pc, #164]	; (80097a8 <USBD_SetConfig+0x150>)
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7fe ffd6 	bl	80086ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fa06 	bl	8009b20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009714:	e042      	b.n	800979c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009716:	4b24      	ldr	r3, [pc, #144]	; (80097a8 <USBD_SetConfig+0x150>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	461a      	mov	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	429a      	cmp	r2, r3
 8009722:	d02a      	beq.n	800977a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	b2db      	uxtb	r3, r3
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7fe ffc4 	bl	80086ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009732:	4b1d      	ldr	r3, [pc, #116]	; (80097a8 <USBD_SetConfig+0x150>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800973c:	4b1a      	ldr	r3, [pc, #104]	; (80097a8 <USBD_SetConfig+0x150>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7fe ff9d 	bl	8008682 <USBD_SetClassConfig>
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00f      	beq.n	8009772 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f918 	bl	800998a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7fe ffa9 	bl	80086ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009770:	e014      	b.n	800979c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f9d4 	bl	8009b20 <USBD_CtlSendStatus>
      break;
 8009778:	e010      	b.n	800979c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f9d0 	bl	8009b20 <USBD_CtlSendStatus>
      break;
 8009780:	e00c      	b.n	800979c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f900 	bl	800998a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800978a:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <USBD_SetConfig+0x150>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7fe ff92 	bl	80086ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009796:	2303      	movs	r3, #3
 8009798:	73fb      	strb	r3, [r7, #15]
      break;
 800979a:	bf00      	nop
  }

  return ret;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	200004d8 	.word	0x200004d8

080097ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	88db      	ldrh	r3, [r3, #6]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d004      	beq.n	80097c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f8e2 	bl	800998a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80097c6:	e023      	b.n	8009810 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	dc02      	bgt.n	80097da <USBD_GetConfig+0x2e>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	dc03      	bgt.n	80097e0 <USBD_GetConfig+0x34>
 80097d8:	e015      	b.n	8009806 <USBD_GetConfig+0x5a>
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d00b      	beq.n	80097f6 <USBD_GetConfig+0x4a>
 80097de:	e012      	b.n	8009806 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	3308      	adds	r3, #8
 80097ea:	2201      	movs	r2, #1
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f93c 	bl	8009a6c <USBD_CtlSendData>
        break;
 80097f4:	e00c      	b.n	8009810 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	3304      	adds	r3, #4
 80097fa:	2201      	movs	r2, #1
 80097fc:	4619      	mov	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f934 	bl	8009a6c <USBD_CtlSendData>
        break;
 8009804:	e004      	b.n	8009810 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f8be 	bl	800998a <USBD_CtlError>
        break;
 800980e:	bf00      	nop
}
 8009810:	bf00      	nop
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009828:	b2db      	uxtb	r3, r3
 800982a:	3b01      	subs	r3, #1
 800982c:	2b02      	cmp	r3, #2
 800982e:	d81e      	bhi.n	800986e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	88db      	ldrh	r3, [r3, #6]
 8009834:	2b02      	cmp	r3, #2
 8009836:	d004      	beq.n	8009842 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f8a5 	bl	800998a <USBD_CtlError>
        break;
 8009840:	e01a      	b.n	8009878 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800984e:	2b00      	cmp	r3, #0
 8009850:	d005      	beq.n	800985e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	f043 0202 	orr.w	r2, r3, #2
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	330c      	adds	r3, #12
 8009862:	2202      	movs	r2, #2
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f900 	bl	8009a6c <USBD_CtlSendData>
      break;
 800986c:	e004      	b.n	8009878 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f88a 	bl	800998a <USBD_CtlError>
      break;
 8009876:	bf00      	nop
  }
}
 8009878:	bf00      	nop
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	885b      	ldrh	r3, [r3, #2]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d107      	bne.n	80098a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f940 	bl	8009b20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80098a0:	e013      	b.n	80098ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	885b      	ldrh	r3, [r3, #2]
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d10b      	bne.n	80098c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	889b      	ldrh	r3, [r3, #4]
 80098ae:	0a1b      	lsrs	r3, r3, #8
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f930 	bl	8009b20 <USBD_CtlSendStatus>
}
 80098c0:	e003      	b.n	80098ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f860 	bl	800998a <USBD_CtlError>
}
 80098ca:	bf00      	nop
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b082      	sub	sp, #8
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	3b01      	subs	r3, #1
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d80b      	bhi.n	8009902 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	885b      	ldrh	r3, [r3, #2]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d10c      	bne.n	800990c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f910 	bl	8009b20 <USBD_CtlSendStatus>
      }
      break;
 8009900:	e004      	b.n	800990c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009902:	6839      	ldr	r1, [r7, #0]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f840 	bl	800998a <USBD_CtlError>
      break;
 800990a:	e000      	b.n	800990e <USBD_ClrFeature+0x3c>
      break;
 800990c:	bf00      	nop
  }
}
 800990e:	bf00      	nop
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	781a      	ldrb	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3301      	adds	r3, #1
 8009930:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	781a      	ldrb	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3301      	adds	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f7ff fa41 	bl	8008dc8 <SWAPBYTE>
 8009946:	4603      	mov	r3, r0
 8009948:	461a      	mov	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3301      	adds	r3, #1
 8009952:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3301      	adds	r3, #1
 8009958:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f7ff fa34 	bl	8008dc8 <SWAPBYTE>
 8009960:	4603      	mov	r3, r0
 8009962:	461a      	mov	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3301      	adds	r3, #1
 800996c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3301      	adds	r3, #1
 8009972:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f7ff fa27 	bl	8008dc8 <SWAPBYTE>
 800997a:	4603      	mov	r3, r0
 800997c:	461a      	mov	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	80da      	strh	r2, [r3, #6]
}
 8009982:	bf00      	nop
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009994:	2180      	movs	r1, #128	; 0x80
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fd76 	bl	800a488 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800999c:	2100      	movs	r1, #0
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fd72 	bl	800a488 <USBD_LL_StallEP>
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d036      	beq.n	8009a30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80099c6:	6938      	ldr	r0, [r7, #16]
 80099c8:	f000 f836 	bl	8009a38 <USBD_GetLen>
 80099cc:	4603      	mov	r3, r0
 80099ce:	3301      	adds	r3, #1
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099da:	7dfb      	ldrb	r3, [r7, #23]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	4413      	add	r3, r2
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	7812      	ldrb	r2, [r2, #0]
 80099e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80099e6:	7dfb      	ldrb	r3, [r7, #23]
 80099e8:	3301      	adds	r3, #1
 80099ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	4413      	add	r3, r2
 80099f2:	2203      	movs	r2, #3
 80099f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	3301      	adds	r3, #1
 80099fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099fc:	e013      	b.n	8009a26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	4413      	add	r3, r2
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	7812      	ldrb	r2, [r2, #0]
 8009a08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	613b      	str	r3, [r7, #16]
    idx++;
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
 8009a12:	3301      	adds	r3, #1
 8009a14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a20:	7dfb      	ldrb	r3, [r7, #23]
 8009a22:	3301      	adds	r3, #1
 8009a24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1e7      	bne.n	80099fe <USBD_GetString+0x52>
 8009a2e:	e000      	b.n	8009a32 <USBD_GetString+0x86>
    return;
 8009a30:	bf00      	nop
  }
}
 8009a32:	3718      	adds	r7, #24
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a48:	e005      	b.n	8009a56 <USBD_GetLen+0x1e>
  {
    len++;
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	3301      	adds	r3, #1
 8009a54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1f5      	bne.n	8009a4a <USBD_GetLen+0x12>
  }

  return len;
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	2100      	movs	r1, #0
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 fd81 	bl	800a59a <USBD_LL_Transmit>

  return USBD_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	60f8      	str	r0, [r7, #12]
 8009aaa:	60b9      	str	r1, [r7, #8]
 8009aac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f000 fd70 	bl	800a59a <USBD_LL_Transmit>

  return USBD_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2203      	movs	r2, #3
 8009ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	2100      	movs	r1, #0
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f000 fd74 	bl	800a5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b084      	sub	sp, #16
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	60f8      	str	r0, [r7, #12]
 8009b06:	60b9      	str	r1, [r7, #8]
 8009b08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	2100      	movs	r1, #0
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 fd63 	bl	800a5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2204      	movs	r2, #4
 8009b2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b30:	2300      	movs	r3, #0
 8009b32:	2200      	movs	r2, #0
 8009b34:	2100      	movs	r1, #0
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fd2f 	bl	800a59a <USBD_LL_Transmit>

  return USBD_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2205      	movs	r2, #5
 8009b52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b56:	2300      	movs	r3, #0
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fd3d 	bl	800a5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b70:	2200      	movs	r2, #0
 8009b72:	4912      	ldr	r1, [pc, #72]	; (8009bbc <MX_USB_DEVICE_Init+0x50>)
 8009b74:	4812      	ldr	r0, [pc, #72]	; (8009bc0 <MX_USB_DEVICE_Init+0x54>)
 8009b76:	f7fe fd07 	bl	8008588 <USBD_Init>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b80:	f7f7 fa30 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b84:	490f      	ldr	r1, [pc, #60]	; (8009bc4 <MX_USB_DEVICE_Init+0x58>)
 8009b86:	480e      	ldr	r0, [pc, #56]	; (8009bc0 <MX_USB_DEVICE_Init+0x54>)
 8009b88:	f7fe fd2e 	bl	80085e8 <USBD_RegisterClass>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b92:	f7f7 fa27 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b96:	490c      	ldr	r1, [pc, #48]	; (8009bc8 <MX_USB_DEVICE_Init+0x5c>)
 8009b98:	4809      	ldr	r0, [pc, #36]	; (8009bc0 <MX_USB_DEVICE_Init+0x54>)
 8009b9a:	f7fe fc1f 	bl	80083dc <USBD_CDC_RegisterInterface>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ba4:	f7f7 fa1e 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009ba8:	4805      	ldr	r0, [pc, #20]	; (8009bc0 <MX_USB_DEVICE_Init+0x54>)
 8009baa:	f7fe fd53 	bl	8008654 <USBD_Start>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009bb4:	f7f7 fa16 	bl	8000fe4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009bb8:	bf00      	nop
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20000128 	.word	0x20000128
 8009bc0:	200004dc 	.word	0x200004dc
 8009bc4:	20000094 	.word	0x20000094
 8009bc8:	20000114 	.word	0x20000114

08009bcc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	4905      	ldr	r1, [pc, #20]	; (8009be8 <CDC_Init_FS+0x1c>)
 8009bd4:	4805      	ldr	r0, [pc, #20]	; (8009bec <CDC_Init_FS+0x20>)
 8009bd6:	f7fe fc1b 	bl	8008410 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009bda:	4905      	ldr	r1, [pc, #20]	; (8009bf0 <CDC_Init_FS+0x24>)
 8009bdc:	4803      	ldr	r0, [pc, #12]	; (8009bec <CDC_Init_FS+0x20>)
 8009bde:	f7fe fc39 	bl	8008454 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009be2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	20000fe4 	.word	0x20000fe4
 8009bec:	200004dc 	.word	0x200004dc
 8009bf0:	200007e4 	.word	0x200007e4

08009bf4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009bf8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	6039      	str	r1, [r7, #0]
 8009c0e:	71fb      	strb	r3, [r7, #7]
 8009c10:	4613      	mov	r3, r2
 8009c12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009c14:	79fb      	ldrb	r3, [r7, #7]
 8009c16:	2b23      	cmp	r3, #35	; 0x23
 8009c18:	d84a      	bhi.n	8009cb0 <CDC_Control_FS+0xac>
 8009c1a:	a201      	add	r2, pc, #4	; (adr r2, 8009c20 <CDC_Control_FS+0x1c>)
 8009c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c20:	08009cb1 	.word	0x08009cb1
 8009c24:	08009cb1 	.word	0x08009cb1
 8009c28:	08009cb1 	.word	0x08009cb1
 8009c2c:	08009cb1 	.word	0x08009cb1
 8009c30:	08009cb1 	.word	0x08009cb1
 8009c34:	08009cb1 	.word	0x08009cb1
 8009c38:	08009cb1 	.word	0x08009cb1
 8009c3c:	08009cb1 	.word	0x08009cb1
 8009c40:	08009cb1 	.word	0x08009cb1
 8009c44:	08009cb1 	.word	0x08009cb1
 8009c48:	08009cb1 	.word	0x08009cb1
 8009c4c:	08009cb1 	.word	0x08009cb1
 8009c50:	08009cb1 	.word	0x08009cb1
 8009c54:	08009cb1 	.word	0x08009cb1
 8009c58:	08009cb1 	.word	0x08009cb1
 8009c5c:	08009cb1 	.word	0x08009cb1
 8009c60:	08009cb1 	.word	0x08009cb1
 8009c64:	08009cb1 	.word	0x08009cb1
 8009c68:	08009cb1 	.word	0x08009cb1
 8009c6c:	08009cb1 	.word	0x08009cb1
 8009c70:	08009cb1 	.word	0x08009cb1
 8009c74:	08009cb1 	.word	0x08009cb1
 8009c78:	08009cb1 	.word	0x08009cb1
 8009c7c:	08009cb1 	.word	0x08009cb1
 8009c80:	08009cb1 	.word	0x08009cb1
 8009c84:	08009cb1 	.word	0x08009cb1
 8009c88:	08009cb1 	.word	0x08009cb1
 8009c8c:	08009cb1 	.word	0x08009cb1
 8009c90:	08009cb1 	.word	0x08009cb1
 8009c94:	08009cb1 	.word	0x08009cb1
 8009c98:	08009cb1 	.word	0x08009cb1
 8009c9c:	08009cb1 	.word	0x08009cb1
 8009ca0:	08009cb1 	.word	0x08009cb1
 8009ca4:	08009cb1 	.word	0x08009cb1
 8009ca8:	08009cb1 	.word	0x08009cb1
 8009cac:	08009cb1 	.word	0x08009cb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009cb0:	bf00      	nop
  }

  return (USBD_OK);
 8009cb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	4845      	ldr	r0, [pc, #276]	; (8009de4 <CDC_Receive_FS+0x124>)
 8009cce:	f7fe fbc1 	bl	8008454 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009cd2:	4844      	ldr	r0, [pc, #272]	; (8009de4 <CDC_Receive_FS+0x124>)
 8009cd4:	f7fe fc22 	bl	800851c <USBD_CDC_ReceivePacket>




  if(*Len >= 43)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8009cde:	d97c      	bls.n	8009dda <CDC_Receive_FS+0x11a>
  {
	  memcpy(recv_dummy,Buf,43);
 8009ce0:	4a41      	ldr	r2, [pc, #260]	; (8009de8 <CDC_Receive_FS+0x128>)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	461c      	mov	r4, r3
 8009ce6:	4616      	mov	r6, r2
 8009ce8:	f104 0c20 	add.w	ip, r4, #32
 8009cec:	4635      	mov	r5, r6
 8009cee:	4623      	mov	r3, r4
 8009cf0:	6818      	ldr	r0, [r3, #0]
 8009cf2:	6859      	ldr	r1, [r3, #4]
 8009cf4:	689a      	ldr	r2, [r3, #8]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009cfa:	3410      	adds	r4, #16
 8009cfc:	3610      	adds	r6, #16
 8009cfe:	4564      	cmp	r4, ip
 8009d00:	d1f4      	bne.n	8009cec <CDC_Receive_FS+0x2c>
 8009d02:	4633      	mov	r3, r6
 8009d04:	4622      	mov	r2, r4
 8009d06:	6810      	ldr	r0, [r2, #0]
 8009d08:	6851      	ldr	r1, [r2, #4]
 8009d0a:	c303      	stmia	r3!, {r0, r1}
 8009d0c:	8911      	ldrh	r1, [r2, #8]
 8009d0e:	7a92      	ldrb	r2, [r2, #10]
 8009d10:	8019      	strh	r1, [r3, #0]
 8009d12:	709a      	strb	r2, [r3, #2]
	  if(Buf[0] == 'i' && Buf[1] == 't' && Buf[2] == 's')
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	2b69      	cmp	r3, #105	; 0x69
 8009d1a:	d15e      	bne.n	8009dda <CDC_Receive_FS+0x11a>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	2b74      	cmp	r3, #116	; 0x74
 8009d24:	d159      	bne.n	8009dda <CDC_Receive_FS+0x11a>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3302      	adds	r3, #2
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	2b73      	cmp	r3, #115	; 0x73
 8009d2e:	d154      	bne.n	8009dda <CDC_Receive_FS+0x11a>
	  {
		  var = 0;
 8009d30:	4b2e      	ldr	r3, [pc, #184]	; (8009dec <CDC_Receive_FS+0x12c>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
		  uint16_t check_s_stm=0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	82fb      	strh	r3, [r7, #22]

		  for(int i = 3; i<41; i++)
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	613b      	str	r3, [r7, #16]
 8009d3e:	e00a      	b.n	8009d56 <CDC_Receive_FS+0x96>
		  {
			  check_s_stm += Buf[i];
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	4413      	add	r3, r2
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	8afb      	ldrh	r3, [r7, #22]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	82fb      	strh	r3, [r7, #22]
		  for(int i = 3; i<41; i++)
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	3301      	adds	r3, #1
 8009d54:	613b      	str	r3, [r7, #16]
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2b28      	cmp	r3, #40	; 0x28
 8009d5a:	ddf1      	ble.n	8009d40 <CDC_Receive_FS+0x80>
		  }
		  check_s_stm = ~check_s_stm;
 8009d5c:	8afb      	ldrh	r3, [r7, #22]
 8009d5e:	43db      	mvns	r3, r3
 8009d60:	82fb      	strh	r3, [r7, #22]

		  uint16_t check_recv;

		  memcpy(&check_recv, Buf+41, 2);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	3329      	adds	r3, #41	; 0x29
 8009d66:	881b      	ldrh	r3, [r3, #0]
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	81fb      	strh	r3, [r7, #14]

		  if(check_recv == check_s_stm){
 8009d6c:	89fb      	ldrh	r3, [r7, #14]
 8009d6e:	8afa      	ldrh	r2, [r7, #22]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d132      	bne.n	8009dda <CDC_Receive_FS+0x11a>
			  memcpy(RobotSpeed, Buf+3, 12);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	3303      	adds	r3, #3
 8009d78:	220c      	movs	r2, #12
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	481c      	ldr	r0, [pc, #112]	; (8009df0 <CDC_Receive_FS+0x130>)
 8009d7e:	f000 fcc9 	bl	800a714 <memcpy>
			  memcpy(&tarArm, Buf+15, 2);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	330f      	adds	r3, #15
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	4b1a      	ldr	r3, [pc, #104]	; (8009df4 <CDC_Receive_FS+0x134>)
 8009d8c:	801a      	strh	r2, [r3, #0]
			  memcpy(&limArm, Buf+17, 2);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	3311      	adds	r3, #17
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	4b18      	ldr	r3, [pc, #96]	; (8009df8 <CDC_Receive_FS+0x138>)
 8009d98:	801a      	strh	r2, [r3, #0]
			  memcpy(&tarLifter, Buf+19, 2);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	3313      	adds	r3, #19
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	4b16      	ldr	r3, [pc, #88]	; (8009dfc <CDC_Receive_FS+0x13c>)
 8009da4:	801a      	strh	r2, [r3, #0]
			  memcpy(&limLifter, Buf+21, 2);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	3315      	adds	r3, #21
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	4b14      	ldr	r3, [pc, #80]	; (8009e00 <CDC_Receive_FS+0x140>)
 8009db0:	801a      	strh	r2, [r3, #0]
			  memcpy(&vacuum_status, Buf+23, 1);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3317      	adds	r3, #23
 8009db6:	781a      	ldrb	r2, [r3, #0]
 8009db8:	4b12      	ldr	r3, [pc, #72]	; (8009e04 <CDC_Receive_FS+0x144>)
 8009dba:	701a      	strb	r2, [r3, #0]
			  memcpy(&pneumatic_stat, Buf+24, 1);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3318      	adds	r3, #24
 8009dc0:	781a      	ldrb	r2, [r3, #0]
 8009dc2:	4b11      	ldr	r3, [pc, #68]	; (8009e08 <CDC_Receive_FS+0x148>)
 8009dc4:	701a      	strb	r2, [r3, #0]
			  memcpy(&pump_stat, Buf+25, 1);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	3319      	adds	r3, #25
 8009dca:	781a      	ldrb	r2, [r3, #0]
 8009dcc:	4b0f      	ldr	r3, [pc, #60]	; (8009e0c <CDC_Receive_FS+0x14c>)
 8009dce:	701a      	strb	r2, [r3, #0]
			  memcpy(&servo_stat, Buf+26, 1);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	331a      	adds	r3, #26
 8009dd4:	781a      	ldrb	r2, [r3, #0]
 8009dd6:	4b0e      	ldr	r3, [pc, #56]	; (8009e10 <CDC_Receive_FS+0x150>)
 8009dd8:	701a      	strb	r2, [r3, #0]
		  }

	  }
  }

  return (USBD_OK);
 8009dda:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	371c      	adds	r7, #28
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009de4:	200004dc 	.word	0x200004dc
 8009de8:	200007b8 	.word	0x200007b8
 8009dec:	2000020c 	.word	0x2000020c
 8009df0:	200001d8 	.word	0x200001d8
 8009df4:	200001ee 	.word	0x200001ee
 8009df8:	200001f0 	.word	0x200001f0
 8009dfc:	200001f4 	.word	0x200001f4
 8009e00:	200001f6 	.word	0x200001f6
 8009e04:	200001e4 	.word	0x200001e4
 8009e08:	200001e5 	.word	0x200001e5
 8009e0c:	200001e9 	.word	0x200001e9
 8009e10:	200001ea 	.word	0x200001ea

08009e14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009e24:	4b0d      	ldr	r3, [pc, #52]	; (8009e5c <CDC_Transmit_FS+0x48>)
 8009e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e00b      	b.n	8009e52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009e3a:	887b      	ldrh	r3, [r7, #2]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	6879      	ldr	r1, [r7, #4]
 8009e40:	4806      	ldr	r0, [pc, #24]	; (8009e5c <CDC_Transmit_FS+0x48>)
 8009e42:	f7fe fae5 	bl	8008410 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009e46:	4805      	ldr	r0, [pc, #20]	; (8009e5c <CDC_Transmit_FS+0x48>)
 8009e48:	f7fe fb22 	bl	8008490 <USBD_CDC_TransmitPacket>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	200004dc 	.word	0x200004dc

08009e60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009e72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	371c      	adds	r7, #28
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
	...

08009e84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	6039      	str	r1, [r7, #0]
 8009e8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	2212      	movs	r2, #18
 8009e94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e96:	4b03      	ldr	r3, [pc, #12]	; (8009ea4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr
 8009ea4:	20000144 	.word	0x20000144

08009ea8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	6039      	str	r1, [r7, #0]
 8009eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2204      	movs	r2, #4
 8009eb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009eba:	4b03      	ldr	r3, [pc, #12]	; (8009ec8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr
 8009ec8:	20000158 	.word	0x20000158

08009ecc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	6039      	str	r1, [r7, #0]
 8009ed6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ed8:	79fb      	ldrb	r3, [r7, #7]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d105      	bne.n	8009eea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	4907      	ldr	r1, [pc, #28]	; (8009f00 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ee2:	4808      	ldr	r0, [pc, #32]	; (8009f04 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ee4:	f7ff fd62 	bl	80099ac <USBD_GetString>
 8009ee8:	e004      	b.n	8009ef4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	4904      	ldr	r1, [pc, #16]	; (8009f00 <USBD_FS_ProductStrDescriptor+0x34>)
 8009eee:	4805      	ldr	r0, [pc, #20]	; (8009f04 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ef0:	f7ff fd5c 	bl	80099ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ef4:	4b02      	ldr	r3, [pc, #8]	; (8009f00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	200017e4 	.word	0x200017e4
 8009f04:	0800a758 	.word	0x0800a758

08009f08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	6039      	str	r1, [r7, #0]
 8009f12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	4904      	ldr	r1, [pc, #16]	; (8009f28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009f18:	4804      	ldr	r0, [pc, #16]	; (8009f2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009f1a:	f7ff fd47 	bl	80099ac <USBD_GetString>
  return USBD_StrDesc;
 8009f1e:	4b02      	ldr	r3, [pc, #8]	; (8009f28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	200017e4 	.word	0x200017e4
 8009f2c:	0800a770 	.word	0x0800a770

08009f30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	4603      	mov	r3, r0
 8009f38:	6039      	str	r1, [r7, #0]
 8009f3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	221a      	movs	r2, #26
 8009f40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f42:	f000 f843 	bl	8009fcc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009f46:	4b02      	ldr	r3, [pc, #8]	; (8009f50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	2000015c 	.word	0x2000015c

08009f54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	6039      	str	r1, [r7, #0]
 8009f5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f60:	79fb      	ldrb	r3, [r7, #7]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d105      	bne.n	8009f72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	4907      	ldr	r1, [pc, #28]	; (8009f88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f6a:	4808      	ldr	r0, [pc, #32]	; (8009f8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f6c:	f7ff fd1e 	bl	80099ac <USBD_GetString>
 8009f70:	e004      	b.n	8009f7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	4904      	ldr	r1, [pc, #16]	; (8009f88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f76:	4805      	ldr	r0, [pc, #20]	; (8009f8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f78:	f7ff fd18 	bl	80099ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f7c:	4b02      	ldr	r3, [pc, #8]	; (8009f88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	200017e4 	.word	0x200017e4
 8009f8c:	0800a784 	.word	0x0800a784

08009f90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	6039      	str	r1, [r7, #0]
 8009f9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f9c:	79fb      	ldrb	r3, [r7, #7]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d105      	bne.n	8009fae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	4907      	ldr	r1, [pc, #28]	; (8009fc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009fa6:	4808      	ldr	r0, [pc, #32]	; (8009fc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009fa8:	f7ff fd00 	bl	80099ac <USBD_GetString>
 8009fac:	e004      	b.n	8009fb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	4904      	ldr	r1, [pc, #16]	; (8009fc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009fb2:	4805      	ldr	r0, [pc, #20]	; (8009fc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009fb4:	f7ff fcfa 	bl	80099ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fb8:	4b02      	ldr	r3, [pc, #8]	; (8009fc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	200017e4 	.word	0x200017e4
 8009fc8:	0800a790 	.word	0x0800a790

08009fcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009fd2:	4b0f      	ldr	r3, [pc, #60]	; (800a010 <Get_SerialNum+0x44>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009fd8:	4b0e      	ldr	r3, [pc, #56]	; (800a014 <Get_SerialNum+0x48>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009fde:	4b0e      	ldr	r3, [pc, #56]	; (800a018 <Get_SerialNum+0x4c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4413      	add	r3, r2
 8009fea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d009      	beq.n	800a006 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ff2:	2208      	movs	r2, #8
 8009ff4:	4909      	ldr	r1, [pc, #36]	; (800a01c <Get_SerialNum+0x50>)
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 f814 	bl	800a024 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ffc:	2204      	movs	r2, #4
 8009ffe:	4908      	ldr	r1, [pc, #32]	; (800a020 <Get_SerialNum+0x54>)
 800a000:	68b8      	ldr	r0, [r7, #8]
 800a002:	f000 f80f 	bl	800a024 <IntToUnicode>
  }
}
 800a006:	bf00      	nop
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	1fff7a10 	.word	0x1fff7a10
 800a014:	1fff7a14 	.word	0x1fff7a14
 800a018:	1fff7a18 	.word	0x1fff7a18
 800a01c:	2000015e 	.word	0x2000015e
 800a020:	2000016e 	.word	0x2000016e

0800a024 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a024:	b480      	push	{r7}
 800a026:	b087      	sub	sp, #28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	4613      	mov	r3, r2
 800a030:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a036:	2300      	movs	r3, #0
 800a038:	75fb      	strb	r3, [r7, #23]
 800a03a:	e027      	b.n	800a08c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	0f1b      	lsrs	r3, r3, #28
 800a040:	2b09      	cmp	r3, #9
 800a042:	d80b      	bhi.n	800a05c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	0f1b      	lsrs	r3, r3, #28
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	005b      	lsls	r3, r3, #1
 800a04e:	4619      	mov	r1, r3
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	440b      	add	r3, r1
 800a054:	3230      	adds	r2, #48	; 0x30
 800a056:	b2d2      	uxtb	r2, r2
 800a058:	701a      	strb	r2, [r3, #0]
 800a05a:	e00a      	b.n	800a072 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	0f1b      	lsrs	r3, r3, #28
 800a060:	b2da      	uxtb	r2, r3
 800a062:	7dfb      	ldrb	r3, [r7, #23]
 800a064:	005b      	lsls	r3, r3, #1
 800a066:	4619      	mov	r1, r3
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	440b      	add	r3, r1
 800a06c:	3237      	adds	r2, #55	; 0x37
 800a06e:	b2d2      	uxtb	r2, r2
 800a070:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a078:	7dfb      	ldrb	r3, [r7, #23]
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	3301      	adds	r3, #1
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	4413      	add	r3, r2
 800a082:	2200      	movs	r2, #0
 800a084:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a086:	7dfb      	ldrb	r3, [r7, #23]
 800a088:	3301      	adds	r3, #1
 800a08a:	75fb      	strb	r3, [r7, #23]
 800a08c:	7dfa      	ldrb	r2, [r7, #23]
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	429a      	cmp	r2, r3
 800a092:	d3d3      	bcc.n	800a03c <IntToUnicode+0x18>
  }
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop
 800a098:	371c      	adds	r7, #28
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
	...

0800a0a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08a      	sub	sp, #40	; 0x28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0ac:	f107 0314 	add.w	r3, r7, #20
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	605a      	str	r2, [r3, #4]
 800a0b6:	609a      	str	r2, [r3, #8]
 800a0b8:	60da      	str	r2, [r3, #12]
 800a0ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0c4:	d13a      	bne.n	800a13c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	613b      	str	r3, [r7, #16]
 800a0ca:	4b1e      	ldr	r3, [pc, #120]	; (800a144 <HAL_PCD_MspInit+0xa0>)
 800a0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ce:	4a1d      	ldr	r2, [pc, #116]	; (800a144 <HAL_PCD_MspInit+0xa0>)
 800a0d0:	f043 0301 	orr.w	r3, r3, #1
 800a0d4:	6313      	str	r3, [r2, #48]	; 0x30
 800a0d6:	4b1b      	ldr	r3, [pc, #108]	; (800a144 <HAL_PCD_MspInit+0xa0>)
 800a0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	613b      	str	r3, [r7, #16]
 800a0e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a0e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a0e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a0f4:	230a      	movs	r3, #10
 800a0f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0f8:	f107 0314 	add.w	r3, r7, #20
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4812      	ldr	r0, [pc, #72]	; (800a148 <HAL_PCD_MspInit+0xa4>)
 800a100:	f7f8 f87c 	bl	80021fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a104:	4b0f      	ldr	r3, [pc, #60]	; (800a144 <HAL_PCD_MspInit+0xa0>)
 800a106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a108:	4a0e      	ldr	r2, [pc, #56]	; (800a144 <HAL_PCD_MspInit+0xa0>)
 800a10a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a10e:	6353      	str	r3, [r2, #52]	; 0x34
 800a110:	2300      	movs	r3, #0
 800a112:	60fb      	str	r3, [r7, #12]
 800a114:	4b0b      	ldr	r3, [pc, #44]	; (800a144 <HAL_PCD_MspInit+0xa0>)
 800a116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a118:	4a0a      	ldr	r2, [pc, #40]	; (800a144 <HAL_PCD_MspInit+0xa0>)
 800a11a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a11e:	6453      	str	r3, [r2, #68]	; 0x44
 800a120:	4b08      	ldr	r3, [pc, #32]	; (800a144 <HAL_PCD_MspInit+0xa0>)
 800a122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a12c:	2200      	movs	r2, #0
 800a12e:	2100      	movs	r1, #0
 800a130:	2043      	movs	r0, #67	; 0x43
 800a132:	f7f7 ff9a 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a136:	2043      	movs	r0, #67	; 0x43
 800a138:	f7f7 ffb3 	bl	80020a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a13c:	bf00      	nop
 800a13e:	3728      	adds	r7, #40	; 0x28
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	40023800 	.word	0x40023800
 800a148:	40020000 	.word	0x40020000

0800a14c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f7fe fac3 	bl	80086ee <USBD_LL_SetupStage>
}
 800a168:	bf00      	nop
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	460b      	mov	r3, r1
 800a17a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a182:	78fa      	ldrb	r2, [r7, #3]
 800a184:	6879      	ldr	r1, [r7, #4]
 800a186:	4613      	mov	r3, r2
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	4413      	add	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	440b      	add	r3, r1
 800a190:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	78fb      	ldrb	r3, [r7, #3]
 800a198:	4619      	mov	r1, r3
 800a19a:	f7fe fafd 	bl	8008798 <USBD_LL_DataOutStage>
}
 800a19e:	bf00      	nop
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a1b8:	78fa      	ldrb	r2, [r7, #3]
 800a1ba:	6879      	ldr	r1, [r7, #4]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	4413      	add	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	440b      	add	r3, r1
 800a1c6:	334c      	adds	r3, #76	; 0x4c
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	78fb      	ldrb	r3, [r7, #3]
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	f7fe fb96 	bl	80088fe <USBD_LL_DataInStage>
}
 800a1d2:	bf00      	nop
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b082      	sub	sp, #8
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fe fcca 	bl	8008b82 <USBD_LL_SOF>
}
 800a1ee:	bf00      	nop
 800a1f0:	3708      	adds	r7, #8
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a1fe:	2301      	movs	r3, #1
 800a200:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d102      	bne.n	800a210 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a20a:	2300      	movs	r3, #0
 800a20c:	73fb      	strb	r3, [r7, #15]
 800a20e:	e008      	b.n	800a222 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	2b02      	cmp	r3, #2
 800a216:	d102      	bne.n	800a21e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a218:	2301      	movs	r3, #1
 800a21a:	73fb      	strb	r3, [r7, #15]
 800a21c:	e001      	b.n	800a222 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a21e:	f7f6 fee1 	bl	8000fe4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a228:	7bfa      	ldrb	r2, [r7, #15]
 800a22a:	4611      	mov	r1, r2
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fe fc6a 	bl	8008b06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fe fc12 	bl	8008a62 <USBD_LL_Reset>
}
 800a23e:	bf00      	nop
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
	...

0800a248 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe fc65 	bl	8008b26 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	6812      	ldr	r2, [r2, #0]
 800a26a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a26e:	f043 0301 	orr.w	r3, r3, #1
 800a272:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d005      	beq.n	800a288 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a27c:	4b04      	ldr	r3, [pc, #16]	; (800a290 <HAL_PCD_SuspendCallback+0x48>)
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	4a03      	ldr	r2, [pc, #12]	; (800a290 <HAL_PCD_SuspendCallback+0x48>)
 800a282:	f043 0306 	orr.w	r3, r3, #6
 800a286:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	e000ed00 	.word	0xe000ed00

0800a294 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe fc55 	bl	8008b52 <USBD_LL_Resume>
}
 800a2a8:	bf00      	nop
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2c2:	78fa      	ldrb	r2, [r7, #3]
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fe fcad 	bl	8008c26 <USBD_LL_IsoOUTIncomplete>
}
 800a2cc:	bf00      	nop
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2e6:	78fa      	ldrb	r2, [r7, #3]
 800a2e8:	4611      	mov	r1, r2
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe fc69 	bl	8008bc2 <USBD_LL_IsoINIncomplete>
}
 800a2f0:	bf00      	nop
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a306:	4618      	mov	r0, r3
 800a308:	f7fe fcbf 	bl	8008c8a <USBD_LL_DevConnected>
}
 800a30c:	bf00      	nop
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a322:	4618      	mov	r0, r3
 800a324:	f7fe fcbc 	bl	8008ca0 <USBD_LL_DevDisconnected>
}
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d13c      	bne.n	800a3ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a340:	4a20      	ldr	r2, [pc, #128]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a1e      	ldr	r2, [pc, #120]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a34c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a350:	4b1c      	ldr	r3, [pc, #112]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a352:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a356:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a358:	4b1a      	ldr	r3, [pc, #104]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a35a:	2204      	movs	r2, #4
 800a35c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a35e:	4b19      	ldr	r3, [pc, #100]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a360:	2202      	movs	r2, #2
 800a362:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a364:	4b17      	ldr	r3, [pc, #92]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a366:	2200      	movs	r2, #0
 800a368:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a36a:	4b16      	ldr	r3, [pc, #88]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a36c:	2202      	movs	r2, #2
 800a36e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a370:	4b14      	ldr	r3, [pc, #80]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a372:	2200      	movs	r2, #0
 800a374:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a376:	4b13      	ldr	r3, [pc, #76]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a378:	2200      	movs	r2, #0
 800a37a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a37c:	4b11      	ldr	r3, [pc, #68]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a37e:	2200      	movs	r2, #0
 800a380:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a382:	4b10      	ldr	r3, [pc, #64]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a384:	2200      	movs	r2, #0
 800a386:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a388:	4b0e      	ldr	r3, [pc, #56]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a38e:	480d      	ldr	r0, [pc, #52]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a390:	f7f8 f901 	bl	8002596 <HAL_PCD_Init>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a39a:	f7f6 fe23 	bl	8000fe4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a39e:	2180      	movs	r1, #128	; 0x80
 800a3a0:	4808      	ldr	r0, [pc, #32]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a3a2:	f7f9 fb58 	bl	8003a56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a3a6:	2240      	movs	r2, #64	; 0x40
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	4806      	ldr	r0, [pc, #24]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a3ac:	f7f9 fb0c 	bl	80039c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a3b0:	2280      	movs	r2, #128	; 0x80
 800a3b2:	2101      	movs	r1, #1
 800a3b4:	4803      	ldr	r0, [pc, #12]	; (800a3c4 <USBD_LL_Init+0x94>)
 800a3b6:	f7f9 fb07 	bl	80039c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	200019e4 	.word	0x200019e4

0800a3c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7f8 f9f6 	bl	80027d0 <HAL_PCD_Start>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 f942 	bl	800a674 <USBD_Get_USB_Status>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b084      	sub	sp, #16
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	4608      	mov	r0, r1
 800a408:	4611      	mov	r1, r2
 800a40a:	461a      	mov	r2, r3
 800a40c:	4603      	mov	r3, r0
 800a40e:	70fb      	strb	r3, [r7, #3]
 800a410:	460b      	mov	r3, r1
 800a412:	70bb      	strb	r3, [r7, #2]
 800a414:	4613      	mov	r3, r2
 800a416:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a426:	78bb      	ldrb	r3, [r7, #2]
 800a428:	883a      	ldrh	r2, [r7, #0]
 800a42a:	78f9      	ldrb	r1, [r7, #3]
 800a42c:	f7f8 fec7 	bl	80031be <HAL_PCD_EP_Open>
 800a430:	4603      	mov	r3, r0
 800a432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a434:	7bfb      	ldrb	r3, [r7, #15]
 800a436:	4618      	mov	r0, r3
 800a438:	f000 f91c 	bl	800a674 <USBD_Get_USB_Status>
 800a43c:	4603      	mov	r3, r0
 800a43e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a440:	7bbb      	ldrb	r3, [r7, #14]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a464:	78fa      	ldrb	r2, [r7, #3]
 800a466:	4611      	mov	r1, r2
 800a468:	4618      	mov	r0, r3
 800a46a:	f7f8 ff10 	bl	800328e <HAL_PCD_EP_Close>
 800a46e:	4603      	mov	r3, r0
 800a470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a472:	7bfb      	ldrb	r3, [r7, #15]
 800a474:	4618      	mov	r0, r3
 800a476:	f000 f8fd 	bl	800a674 <USBD_Get_USB_Status>
 800a47a:	4603      	mov	r3, r0
 800a47c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a47e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4a2:	78fa      	ldrb	r2, [r7, #3]
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7f8 ffe8 	bl	800347c <HAL_PCD_EP_SetStall>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 f8de 	bl	800a674 <USBD_Get_USB_Status>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4e0:	78fa      	ldrb	r2, [r7, #3]
 800a4e2:	4611      	mov	r1, r2
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7f9 f82d 	bl	8003544 <HAL_PCD_EP_ClrStall>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f000 f8bf 	bl	800a674 <USBD_Get_USB_Status>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a516:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	da0b      	bge.n	800a538 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a520:	78fb      	ldrb	r3, [r7, #3]
 800a522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a526:	68f9      	ldr	r1, [r7, #12]
 800a528:	4613      	mov	r3, r2
 800a52a:	00db      	lsls	r3, r3, #3
 800a52c:	4413      	add	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	440b      	add	r3, r1
 800a532:	333e      	adds	r3, #62	; 0x3e
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	e00b      	b.n	800a550 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a538:	78fb      	ldrb	r3, [r7, #3]
 800a53a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a53e:	68f9      	ldr	r1, [r7, #12]
 800a540:	4613      	mov	r3, r2
 800a542:	00db      	lsls	r3, r3, #3
 800a544:	4413      	add	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	440b      	add	r3, r1
 800a54a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a54e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a550:	4618      	mov	r0, r3
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a576:	78fa      	ldrb	r2, [r7, #3]
 800a578:	4611      	mov	r1, r2
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7f8 fdfa 	bl	8003174 <HAL_PCD_SetAddress>
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a584:	7bfb      	ldrb	r3, [r7, #15]
 800a586:	4618      	mov	r0, r3
 800a588:	f000 f874 	bl	800a674 <USBD_Get_USB_Status>
 800a58c:	4603      	mov	r3, r0
 800a58e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a590:	7bbb      	ldrb	r3, [r7, #14]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b086      	sub	sp, #24
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	60f8      	str	r0, [r7, #12]
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	603b      	str	r3, [r7, #0]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a5b8:	7af9      	ldrb	r1, [r7, #11]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	f7f8 ff13 	bl	80033e8 <HAL_PCD_EP_Transmit>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 f853 	bl	800a674 <USBD_Get_USB_Status>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b086      	sub	sp, #24
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	607a      	str	r2, [r7, #4]
 800a5e6:	603b      	str	r3, [r7, #0]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a5fa:	7af9      	ldrb	r1, [r7, #11]
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	f7f8 fe8f 	bl	8003322 <HAL_PCD_EP_Receive>
 800a604:	4603      	mov	r3, r0
 800a606:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a608:	7dfb      	ldrb	r3, [r7, #23]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 f832 	bl	800a674 <USBD_Get_USB_Status>
 800a610:	4603      	mov	r3, r0
 800a612:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a614:	7dbb      	ldrb	r3, [r7, #22]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3718      	adds	r7, #24
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b082      	sub	sp, #8
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	460b      	mov	r3, r1
 800a628:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a630:	78fa      	ldrb	r2, [r7, #3]
 800a632:	4611      	mov	r1, r2
 800a634:	4618      	mov	r0, r3
 800a636:	f7f8 febf 	bl	80033b8 <HAL_PCD_EP_GetRxCount>
 800a63a:	4603      	mov	r3, r0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a64c:	4b03      	ldr	r3, [pc, #12]	; (800a65c <USBD_static_malloc+0x18>)
}
 800a64e:	4618      	mov	r0, r3
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	20001ef0 	.word	0x20001ef0

0800a660 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]

}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a682:	79fb      	ldrb	r3, [r7, #7]
 800a684:	2b03      	cmp	r3, #3
 800a686:	d817      	bhi.n	800a6b8 <USBD_Get_USB_Status+0x44>
 800a688:	a201      	add	r2, pc, #4	; (adr r2, 800a690 <USBD_Get_USB_Status+0x1c>)
 800a68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68e:	bf00      	nop
 800a690:	0800a6a1 	.word	0x0800a6a1
 800a694:	0800a6a7 	.word	0x0800a6a7
 800a698:	0800a6ad 	.word	0x0800a6ad
 800a69c:	0800a6b3 	.word	0x0800a6b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a6a4:	e00b      	b.n	800a6be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a6aa:	e008      	b.n	800a6be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a6b0:	e005      	b.n	800a6be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a6b6:	e002      	b.n	800a6be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a6bc:	bf00      	nop
  }
  return usb_status;
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <__libc_init_array>:
 800a6cc:	b570      	push	{r4, r5, r6, lr}
 800a6ce:	4d0d      	ldr	r5, [pc, #52]	; (800a704 <__libc_init_array+0x38>)
 800a6d0:	4c0d      	ldr	r4, [pc, #52]	; (800a708 <__libc_init_array+0x3c>)
 800a6d2:	1b64      	subs	r4, r4, r5
 800a6d4:	10a4      	asrs	r4, r4, #2
 800a6d6:	2600      	movs	r6, #0
 800a6d8:	42a6      	cmp	r6, r4
 800a6da:	d109      	bne.n	800a6f0 <__libc_init_array+0x24>
 800a6dc:	4d0b      	ldr	r5, [pc, #44]	; (800a70c <__libc_init_array+0x40>)
 800a6de:	4c0c      	ldr	r4, [pc, #48]	; (800a710 <__libc_init_array+0x44>)
 800a6e0:	f000 f82e 	bl	800a740 <_init>
 800a6e4:	1b64      	subs	r4, r4, r5
 800a6e6:	10a4      	asrs	r4, r4, #2
 800a6e8:	2600      	movs	r6, #0
 800a6ea:	42a6      	cmp	r6, r4
 800a6ec:	d105      	bne.n	800a6fa <__libc_init_array+0x2e>
 800a6ee:	bd70      	pop	{r4, r5, r6, pc}
 800a6f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6f4:	4798      	blx	r3
 800a6f6:	3601      	adds	r6, #1
 800a6f8:	e7ee      	b.n	800a6d8 <__libc_init_array+0xc>
 800a6fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6fe:	4798      	blx	r3
 800a700:	3601      	adds	r6, #1
 800a702:	e7f2      	b.n	800a6ea <__libc_init_array+0x1e>
 800a704:	0800a7c0 	.word	0x0800a7c0
 800a708:	0800a7c0 	.word	0x0800a7c0
 800a70c:	0800a7c0 	.word	0x0800a7c0
 800a710:	0800a7c4 	.word	0x0800a7c4

0800a714 <memcpy>:
 800a714:	440a      	add	r2, r1
 800a716:	4291      	cmp	r1, r2
 800a718:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a71c:	d100      	bne.n	800a720 <memcpy+0xc>
 800a71e:	4770      	bx	lr
 800a720:	b510      	push	{r4, lr}
 800a722:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a72a:	4291      	cmp	r1, r2
 800a72c:	d1f9      	bne.n	800a722 <memcpy+0xe>
 800a72e:	bd10      	pop	{r4, pc}

0800a730 <memset>:
 800a730:	4402      	add	r2, r0
 800a732:	4603      	mov	r3, r0
 800a734:	4293      	cmp	r3, r2
 800a736:	d100      	bne.n	800a73a <memset+0xa>
 800a738:	4770      	bx	lr
 800a73a:	f803 1b01 	strb.w	r1, [r3], #1
 800a73e:	e7f9      	b.n	800a734 <memset+0x4>

0800a740 <_init>:
 800a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a742:	bf00      	nop
 800a744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a746:	bc08      	pop	{r3}
 800a748:	469e      	mov	lr, r3
 800a74a:	4770      	bx	lr

0800a74c <_fini>:
 800a74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74e:	bf00      	nop
 800a750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a752:	bc08      	pop	{r3}
 800a754:	469e      	mov	lr, r3
 800a756:	4770      	bx	lr

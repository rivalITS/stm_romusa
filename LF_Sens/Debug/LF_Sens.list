
LF_Sens.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002a48  08002a48  00012a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a60  08002a60  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08002a60  08002a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a68  08002a68  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a68  08002a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a6c  08002a6c  00012a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08002a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000038  08002aa4  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002aa4  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f72c  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027de  00000000  00000000  0002f7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000759a  00000000  00000000  00031fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000900  00000000  00000000  00039550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c55  00000000  00000000  00039e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000177a7  00000000  00000000  0003aaa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000123dc  00000000  00000000  0005224c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00097054  00000000  00000000  00064628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001eb8  00000000  00000000  000fb67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000fd534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000038 	.word	0x20000038
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002a30 	.word	0x08002a30

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000003c 	.word	0x2000003c
 80001d4:	08002a30 	.word	0x08002a30

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000854:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000858:	f000 b970 	b.w	8000b3c <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9e08      	ldr	r6, [sp, #32]
 800087a:	460d      	mov	r5, r1
 800087c:	4604      	mov	r4, r0
 800087e:	460f      	mov	r7, r1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d14a      	bne.n	800091a <__udivmoddi4+0xa6>
 8000884:	428a      	cmp	r2, r1
 8000886:	4694      	mov	ip, r2
 8000888:	d965      	bls.n	8000956 <__udivmoddi4+0xe2>
 800088a:	fab2 f382 	clz	r3, r2
 800088e:	b143      	cbz	r3, 80008a2 <__udivmoddi4+0x2e>
 8000890:	fa02 fc03 	lsl.w	ip, r2, r3
 8000894:	f1c3 0220 	rsb	r2, r3, #32
 8000898:	409f      	lsls	r7, r3
 800089a:	fa20 f202 	lsr.w	r2, r0, r2
 800089e:	4317      	orrs	r7, r2
 80008a0:	409c      	lsls	r4, r3
 80008a2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008a6:	fa1f f58c 	uxth.w	r5, ip
 80008aa:	fbb7 f1fe 	udiv	r1, r7, lr
 80008ae:	0c22      	lsrs	r2, r4, #16
 80008b0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008b4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008b8:	fb01 f005 	mul.w	r0, r1, r5
 80008bc:	4290      	cmp	r0, r2
 80008be:	d90a      	bls.n	80008d6 <__udivmoddi4+0x62>
 80008c0:	eb1c 0202 	adds.w	r2, ip, r2
 80008c4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80008c8:	f080 811c 	bcs.w	8000b04 <__udivmoddi4+0x290>
 80008cc:	4290      	cmp	r0, r2
 80008ce:	f240 8119 	bls.w	8000b04 <__udivmoddi4+0x290>
 80008d2:	3902      	subs	r1, #2
 80008d4:	4462      	add	r2, ip
 80008d6:	1a12      	subs	r2, r2, r0
 80008d8:	b2a4      	uxth	r4, r4
 80008da:	fbb2 f0fe 	udiv	r0, r2, lr
 80008de:	fb0e 2210 	mls	r2, lr, r0, r2
 80008e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008e6:	fb00 f505 	mul.w	r5, r0, r5
 80008ea:	42a5      	cmp	r5, r4
 80008ec:	d90a      	bls.n	8000904 <__udivmoddi4+0x90>
 80008ee:	eb1c 0404 	adds.w	r4, ip, r4
 80008f2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80008f6:	f080 8107 	bcs.w	8000b08 <__udivmoddi4+0x294>
 80008fa:	42a5      	cmp	r5, r4
 80008fc:	f240 8104 	bls.w	8000b08 <__udivmoddi4+0x294>
 8000900:	4464      	add	r4, ip
 8000902:	3802      	subs	r0, #2
 8000904:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000908:	1b64      	subs	r4, r4, r5
 800090a:	2100      	movs	r1, #0
 800090c:	b11e      	cbz	r6, 8000916 <__udivmoddi4+0xa2>
 800090e:	40dc      	lsrs	r4, r3
 8000910:	2300      	movs	r3, #0
 8000912:	e9c6 4300 	strd	r4, r3, [r6]
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	428b      	cmp	r3, r1
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0xbc>
 800091e:	2e00      	cmp	r6, #0
 8000920:	f000 80ed 	beq.w	8000afe <__udivmoddi4+0x28a>
 8000924:	2100      	movs	r1, #0
 8000926:	e9c6 0500 	strd	r0, r5, [r6]
 800092a:	4608      	mov	r0, r1
 800092c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000930:	fab3 f183 	clz	r1, r3
 8000934:	2900      	cmp	r1, #0
 8000936:	d149      	bne.n	80009cc <__udivmoddi4+0x158>
 8000938:	42ab      	cmp	r3, r5
 800093a:	d302      	bcc.n	8000942 <__udivmoddi4+0xce>
 800093c:	4282      	cmp	r2, r0
 800093e:	f200 80f8 	bhi.w	8000b32 <__udivmoddi4+0x2be>
 8000942:	1a84      	subs	r4, r0, r2
 8000944:	eb65 0203 	sbc.w	r2, r5, r3
 8000948:	2001      	movs	r0, #1
 800094a:	4617      	mov	r7, r2
 800094c:	2e00      	cmp	r6, #0
 800094e:	d0e2      	beq.n	8000916 <__udivmoddi4+0xa2>
 8000950:	e9c6 4700 	strd	r4, r7, [r6]
 8000954:	e7df      	b.n	8000916 <__udivmoddi4+0xa2>
 8000956:	b902      	cbnz	r2, 800095a <__udivmoddi4+0xe6>
 8000958:	deff      	udf	#255	; 0xff
 800095a:	fab2 f382 	clz	r3, r2
 800095e:	2b00      	cmp	r3, #0
 8000960:	f040 8090 	bne.w	8000a84 <__udivmoddi4+0x210>
 8000964:	1a8a      	subs	r2, r1, r2
 8000966:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800096a:	fa1f fe8c 	uxth.w	lr, ip
 800096e:	2101      	movs	r1, #1
 8000970:	fbb2 f5f7 	udiv	r5, r2, r7
 8000974:	fb07 2015 	mls	r0, r7, r5, r2
 8000978:	0c22      	lsrs	r2, r4, #16
 800097a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800097e:	fb0e f005 	mul.w	r0, lr, r5
 8000982:	4290      	cmp	r0, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x124>
 8000986:	eb1c 0202 	adds.w	r2, ip, r2
 800098a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800098e:	d202      	bcs.n	8000996 <__udivmoddi4+0x122>
 8000990:	4290      	cmp	r0, r2
 8000992:	f200 80cb 	bhi.w	8000b2c <__udivmoddi4+0x2b8>
 8000996:	4645      	mov	r5, r8
 8000998:	1a12      	subs	r2, r2, r0
 800099a:	b2a4      	uxth	r4, r4
 800099c:	fbb2 f0f7 	udiv	r0, r2, r7
 80009a0:	fb07 2210 	mls	r2, r7, r0, r2
 80009a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009a8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x14e>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80009b8:	d202      	bcs.n	80009c0 <__udivmoddi4+0x14c>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	f200 80bb 	bhi.w	8000b36 <__udivmoddi4+0x2c2>
 80009c0:	4610      	mov	r0, r2
 80009c2:	eba4 040e 	sub.w	r4, r4, lr
 80009c6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ca:	e79f      	b.n	800090c <__udivmoddi4+0x98>
 80009cc:	f1c1 0720 	rsb	r7, r1, #32
 80009d0:	408b      	lsls	r3, r1
 80009d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009da:	fa05 f401 	lsl.w	r4, r5, r1
 80009de:	fa20 f307 	lsr.w	r3, r0, r7
 80009e2:	40fd      	lsrs	r5, r7
 80009e4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e8:	4323      	orrs	r3, r4
 80009ea:	fbb5 f8f9 	udiv	r8, r5, r9
 80009ee:	fa1f fe8c 	uxth.w	lr, ip
 80009f2:	fb09 5518 	mls	r5, r9, r8, r5
 80009f6:	0c1c      	lsrs	r4, r3, #16
 80009f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009fc:	fb08 f50e 	mul.w	r5, r8, lr
 8000a00:	42a5      	cmp	r5, r4
 8000a02:	fa02 f201 	lsl.w	r2, r2, r1
 8000a06:	fa00 f001 	lsl.w	r0, r0, r1
 8000a0a:	d90b      	bls.n	8000a24 <__udivmoddi4+0x1b0>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a14:	f080 8088 	bcs.w	8000b28 <__udivmoddi4+0x2b4>
 8000a18:	42a5      	cmp	r5, r4
 8000a1a:	f240 8085 	bls.w	8000b28 <__udivmoddi4+0x2b4>
 8000a1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a22:	4464      	add	r4, ip
 8000a24:	1b64      	subs	r4, r4, r5
 8000a26:	b29d      	uxth	r5, r3
 8000a28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a38:	45a6      	cmp	lr, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x1da>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000a44:	d26c      	bcs.n	8000b20 <__udivmoddi4+0x2ac>
 8000a46:	45a6      	cmp	lr, r4
 8000a48:	d96a      	bls.n	8000b20 <__udivmoddi4+0x2ac>
 8000a4a:	3b02      	subs	r3, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a52:	fba3 9502 	umull	r9, r5, r3, r2
 8000a56:	eba4 040e 	sub.w	r4, r4, lr
 8000a5a:	42ac      	cmp	r4, r5
 8000a5c:	46c8      	mov	r8, r9
 8000a5e:	46ae      	mov	lr, r5
 8000a60:	d356      	bcc.n	8000b10 <__udivmoddi4+0x29c>
 8000a62:	d053      	beq.n	8000b0c <__udivmoddi4+0x298>
 8000a64:	b156      	cbz	r6, 8000a7c <__udivmoddi4+0x208>
 8000a66:	ebb0 0208 	subs.w	r2, r0, r8
 8000a6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a72:	40ca      	lsrs	r2, r1
 8000a74:	40cc      	lsrs	r4, r1
 8000a76:	4317      	orrs	r7, r2
 8000a78:	e9c6 7400 	strd	r7, r4, [r6]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a84:	f1c3 0120 	rsb	r1, r3, #32
 8000a88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a90:	fa25 f101 	lsr.w	r1, r5, r1
 8000a94:	409d      	lsls	r5, r3
 8000a96:	432a      	orrs	r2, r5
 8000a98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9c:	fa1f fe8c 	uxth.w	lr, ip
 8000aa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000aa8:	0c11      	lsrs	r1, r2, #16
 8000aaa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aae:	fb00 f50e 	mul.w	r5, r0, lr
 8000ab2:	428d      	cmp	r5, r1
 8000ab4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x258>
 8000aba:	eb1c 0101 	adds.w	r1, ip, r1
 8000abe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ac2:	d22f      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000ac4:	428d      	cmp	r5, r1
 8000ac6:	d92d      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000ac8:	3802      	subs	r0, #2
 8000aca:	4461      	add	r1, ip
 8000acc:	1b49      	subs	r1, r1, r5
 8000ace:	b292      	uxth	r2, r2
 8000ad0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ad4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ad8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000adc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ae0:	4291      	cmp	r1, r2
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x282>
 8000ae4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000aec:	d216      	bcs.n	8000b1c <__udivmoddi4+0x2a8>
 8000aee:	4291      	cmp	r1, r2
 8000af0:	d914      	bls.n	8000b1c <__udivmoddi4+0x2a8>
 8000af2:	3d02      	subs	r5, #2
 8000af4:	4462      	add	r2, ip
 8000af6:	1a52      	subs	r2, r2, r1
 8000af8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000afc:	e738      	b.n	8000970 <__udivmoddi4+0xfc>
 8000afe:	4631      	mov	r1, r6
 8000b00:	4630      	mov	r0, r6
 8000b02:	e708      	b.n	8000916 <__udivmoddi4+0xa2>
 8000b04:	4639      	mov	r1, r7
 8000b06:	e6e6      	b.n	80008d6 <__udivmoddi4+0x62>
 8000b08:	4610      	mov	r0, r2
 8000b0a:	e6fb      	b.n	8000904 <__udivmoddi4+0x90>
 8000b0c:	4548      	cmp	r0, r9
 8000b0e:	d2a9      	bcs.n	8000a64 <__udivmoddi4+0x1f0>
 8000b10:	ebb9 0802 	subs.w	r8, r9, r2
 8000b14:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	e7a3      	b.n	8000a64 <__udivmoddi4+0x1f0>
 8000b1c:	4645      	mov	r5, r8
 8000b1e:	e7ea      	b.n	8000af6 <__udivmoddi4+0x282>
 8000b20:	462b      	mov	r3, r5
 8000b22:	e794      	b.n	8000a4e <__udivmoddi4+0x1da>
 8000b24:	4640      	mov	r0, r8
 8000b26:	e7d1      	b.n	8000acc <__udivmoddi4+0x258>
 8000b28:	46d0      	mov	r8, sl
 8000b2a:	e77b      	b.n	8000a24 <__udivmoddi4+0x1b0>
 8000b2c:	3d02      	subs	r5, #2
 8000b2e:	4462      	add	r2, ip
 8000b30:	e732      	b.n	8000998 <__udivmoddi4+0x124>
 8000b32:	4608      	mov	r0, r1
 8000b34:	e70a      	b.n	800094c <__udivmoddi4+0xd8>
 8000b36:	4464      	add	r4, ip
 8000b38:	3802      	subs	r0, #2
 8000b3a:	e742      	b.n	80009c2 <__udivmoddi4+0x14e>

08000b3c <__aeabi_idiv0>:
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_InitTick+0x3c>)
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_InitTick+0x40>)
 8000b46:	7812      	ldrb	r2, [r2, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
{
 8000b4a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b50:	fbb0 f0f2 	udiv	r0, r0, r2
 8000b54:	fbb3 f0f0 	udiv	r0, r3, r0
 8000b58:	f000 fb0c 	bl	8001174 <HAL_SYSTICK_Config>
 8000b5c:	b908      	cbnz	r0, 8000b62 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	2d0f      	cmp	r5, #15
 8000b60:	d901      	bls.n	8000b66 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000b62:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b64:	bd38      	pop	{r3, r4, r5, pc}
 8000b66:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	4602      	mov	r2, r0
 8000b6a:	4629      	mov	r1, r5
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b70:	f000 fab4 	bl	80010dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_InitTick+0x44>)
 8000b76:	4620      	mov	r0, r4
 8000b78:	601d      	str	r5, [r3, #0]
}
 8000b7a:	bd38      	pop	{r3, r4, r5, pc}
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	20000030 	.word	0x20000030
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_Init>:
{
 8000b88:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_Init+0x30>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b92:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b9a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ba2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 fa87 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	200f      	movs	r0, #15
 8000bac:	f7ff ffc8 	bl	8000b40 <HAL_InitTick>
  HAL_MspInit();
 8000bb0:	f001 fe42 	bl	8002838 <HAL_MspInit>
}
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	bd08      	pop	{r3, pc}
 8000bb8:	40023c00 	.word	0x40023c00

08000bbc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bbc:	4a03      	ldr	r2, [pc, #12]	; (8000bcc <HAL_IncTick+0x10>)
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <HAL_IncTick+0x14>)
 8000bc0:	6811      	ldr	r1, [r2, #0]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	440b      	add	r3, r1
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000054 	.word	0x20000054
 8000bd0:	20000000 	.word	0x20000000

08000bd4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bd4:	4b01      	ldr	r3, [pc, #4]	; (8000bdc <HAL_GetTick+0x8>)
 8000bd6:	6818      	ldr	r0, [r3, #0]
}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000054 	.word	0x20000054

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b538      	push	{r3, r4, r5, lr}
 8000be2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff fff6 	bl	8000bd4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000bea:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000bec:	d002      	beq.n	8000bf4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <HAL_Delay+0x20>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	1b43      	subs	r3, r0, r5
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	d3fa      	bcc.n	8000bf4 <HAL_Delay+0x14>
  {
  }
}
 8000bfe:	bd38      	pop	{r3, r4, r5, pc}
 8000c00:	20000000 	.word	0x20000000

08000c04 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 8000c04:	2800      	cmp	r0, #0
 8000c06:	f000 809e 	beq.w	8000d46 <HAL_ADC_Init+0x142>
{
 8000c0a:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c0c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000c0e:	4604      	mov	r4, r0
 8000c10:	b13d      	cbz	r5, 8000c22 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c14:	06db      	lsls	r3, r3, #27
 8000c16:	d50c      	bpl.n	8000c32 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8000c1e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8000c20:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8000c22:	f001 fadf 	bl	80021e4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000c26:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c28:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8000c2a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c2e:	06db      	lsls	r3, r3, #27
 8000c30:	d4f2      	bmi.n	8000c18 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8000c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c34:	4a47      	ldr	r2, [pc, #284]	; (8000d54 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8000c36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c3a:	f023 0302 	bic.w	r3, r3, #2
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c44:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c46:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c48:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8000c4c:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c4e:	6851      	ldr	r1, [r2, #4]
 8000c50:	6860      	ldr	r0, [r4, #4]
 8000c52:	4301      	orrs	r1, r0
 8000c54:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c56:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c58:	6920      	ldr	r0, [r4, #16]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c5a:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c6a:	685a      	ldr	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c6c:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c6e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c72:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c7a:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c7c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	4302      	orrs	r2, r0
 8000c88:	609a      	str	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c8a:	4a33      	ldr	r2, [pc, #204]	; (8000d58 <HAL_ADC_Init+0x154>)
 8000c8c:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c8e:	689a      	ldr	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c90:	d051      	beq.n	8000d36 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c96:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	4311      	orrs	r1, r2
 8000c9e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ca6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	4302      	orrs	r2, r0
 8000cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	f022 0202 	bic.w	r2, r2, #2
 8000cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	7e21      	ldrb	r1, [r4, #24]
 8000cba:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000cbe:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8000cc0:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d040      	beq.n	8000d4a <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000cc8:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000cca:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cd0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000cd8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	3901      	subs	r1, #1
 8000cde:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000ce2:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ce6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ce8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf0:	3901      	subs	r1, #1
 8000cf2:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000cf8:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000cfa:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000cfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8000d08:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8000d0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d16:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000d18:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d1a:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000d1e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000d20:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d24:	f023 0303 	bic.w	r3, r3, #3
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	e7b3      	b.n	8000cae <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8000d46:	2001      	movs	r0, #1
}
 8000d48:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	e7c7      	b.n	8000ce4 <HAL_ADC_Init+0xe0>
 8000d54:	40012300 	.word	0x40012300
 8000d58:	0f000001 	.word	0x0f000001

08000d5c <HAL_ADC_Start_DMA>:
{
 8000d5c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8000d5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000d62:	b082      	sub	sp, #8
 8000d64:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8000d66:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8000d68:	f04f 0000 	mov.w	r0, #0
 8000d6c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8000d6e:	f000 8088 	beq.w	8000e82 <HAL_ADC_Start_DMA+0x126>
 8000d72:	2301      	movs	r3, #1
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d74:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8000d76:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d7a:	68b3      	ldr	r3, [r6, #8]
 8000d7c:	07dc      	lsls	r4, r3, #31
 8000d7e:	d414      	bmi.n	8000daa <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8000d80:	68b3      	ldr	r3, [r6, #8]
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d88:	4b3f      	ldr	r3, [pc, #252]	; (8000e88 <HAL_ADC_Start_DMA+0x12c>)
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <HAL_ADC_Start_DMA+0x130>)
 8000d8e:	fba3 3000 	umull	r3, r0, r3, r0
 8000d92:	0c80      	lsrs	r0, r0, #18
 8000d94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000d98:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8000d9a:	9b01      	ldr	r3, [sp, #4]
 8000d9c:	b12b      	cbz	r3, 8000daa <HAL_ADC_Start_DMA+0x4e>
      counter--;
 8000d9e:	9c01      	ldr	r4, [sp, #4]
 8000da0:	3c01      	subs	r4, #1
 8000da2:	9401      	str	r4, [sp, #4]
    while (counter != 0U)
 8000da4:	9801      	ldr	r0, [sp, #4]
 8000da6:	2800      	cmp	r0, #0
 8000da8:	d1f9      	bne.n	8000d9e <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000daa:	68b3      	ldr	r3, [r6, #8]
 8000dac:	05d8      	lsls	r0, r3, #23
 8000dae:	d503      	bpl.n	8000db8 <HAL_ADC_Start_DMA+0x5c>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000db0:	68b3      	ldr	r3, [r6, #8]
 8000db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000db6:	60b3      	str	r3, [r6, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000db8:	68b0      	ldr	r0, [r6, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000dba:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000dbc:	f010 0001 	ands.w	r0, r0, #1
 8000dc0:	d042      	beq.n	8000e48 <HAL_ADC_Start_DMA+0xec>
    ADC_STATE_CLR_SET(hadc->State,
 8000dc2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dc6:	f023 0301 	bic.w	r3, r3, #1
 8000dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dce:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dd0:	6873      	ldr	r3, [r6, #4]
 8000dd2:	055b      	lsls	r3, r3, #21
 8000dd4:	d505      	bpl.n	8000de2 <HAL_ADC_Start_DMA+0x86>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dd6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000dd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ddc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de0:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000de2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000de4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000de6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000dea:	bf1c      	itt	ne
 8000dec:	6c6b      	ldrne	r3, [r5, #68]	; 0x44
 8000dee:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000df2:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000df4:	2400      	movs	r4, #0
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000df6:	4613      	mov	r3, r2
 8000df8:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000dfa:	4925      	ldr	r1, [pc, #148]	; (8000e90 <HAL_ADC_Start_DMA+0x134>)
    __HAL_UNLOCK(hadc);
 8000dfc:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e00:	63c1      	str	r1, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e02:	4924      	ldr	r1, [pc, #144]	; (8000e94 <HAL_ADC_Start_DMA+0x138>)
 8000e04:	6401      	str	r1, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e06:	4924      	ldr	r1, [pc, #144]	; (8000e98 <HAL_ADC_Start_DMA+0x13c>)
 8000e08:	64c1      	str	r1, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e0a:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8000e0e:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e10:	6871      	ldr	r1, [r6, #4]
 8000e12:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8000e16:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000e18:	68b1      	ldr	r1, [r6, #8]
 8000e1a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000e1e:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e20:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8000e24:	f000 fa58 	bl	80012d8 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <HAL_ADC_Start_DMA+0x140>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f013 031f 	ands.w	r3, r3, #31
 8000e30:	d113      	bne.n	8000e5a <HAL_ADC_Start_DMA+0xfe>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000e32:	682a      	ldr	r2, [r5, #0]
 8000e34:	6890      	ldr	r0, [r2, #8]
 8000e36:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000e3a:	d115      	bne.n	8000e68 <HAL_ADC_Start_DMA+0x10c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e3c:	6893      	ldr	r3, [r2, #8]
 8000e3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e42:	6093      	str	r3, [r2, #8]
}
 8000e44:	b002      	add	sp, #8
 8000e46:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e48:	f043 0310 	orr.w	r3, r3, #16
 8000e4c:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e4e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	646b      	str	r3, [r5, #68]	; 0x44
}
 8000e56:	b002      	add	sp, #8
 8000e58:	bd70      	pop	{r4, r5, r6, pc}
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e5a:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <HAL_ADC_Start_DMA+0x144>)
 8000e5c:	682b      	ldr	r3, [r5, #0]
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d005      	beq.n	8000e6e <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 8000e62:	4620      	mov	r0, r4
}
 8000e64:	b002      	add	sp, #8
 8000e66:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000e68:	4618      	mov	r0, r3
}
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd70      	pop	{r4, r5, r6, pc}
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	f012 5240 	ands.w	r2, r2, #805306368	; 0x30000000
 8000e74:	d1f5      	bne.n	8000e62 <HAL_ADC_Start_DMA+0x106>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e76:	6899      	ldr	r1, [r3, #8]
 8000e78:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  return HAL_OK;
 8000e7c:	4610      	mov	r0, r2
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e7e:	6099      	str	r1, [r3, #8]
 8000e80:	e7e9      	b.n	8000e56 <HAL_ADC_Start_DMA+0xfa>
  __HAL_LOCK(hadc);
 8000e82:	2002      	movs	r0, #2
}
 8000e84:	b002      	add	sp, #8
 8000e86:	bd70      	pop	{r4, r5, r6, pc}
 8000e88:	20000030 	.word	0x20000030
 8000e8c:	431bde83 	.word	0x431bde83
 8000e90:	08000ed5 	.word	0x08000ed5
 8000e94:	08000ead 	.word	0x08000ead
 8000e98:	08000ebd 	.word	0x08000ebd
 8000e9c:	40012300 	.word	0x40012300
 8000ea0:	40012000 	.word	0x40012000

08000ea4 <HAL_ADC_ConvCpltCallback>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_ADC_ConvHalfCpltCallback>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000eac:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000eae:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000eb0:	f7ff fffa 	bl	8000ea8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000eb4:	bd08      	pop	{r3, pc}
 8000eb6:	bf00      	nop

08000eb8 <HAL_ADC_ErrorCallback>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ebc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8000ebe:	b508      	push	{r3, lr}
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000ec0:	2340      	movs	r3, #64	; 0x40
 8000ec2:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000ec4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	6443      	str	r3, [r0, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000ecc:	f7ff fff4 	bl	8000eb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ed0:	bd08      	pop	{r3, pc}
 8000ed2:	bf00      	nop

08000ed4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ed4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed8:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8000edc:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000ee0:	d123      	bne.n	8000f2a <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ee6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ee8:	641a      	str	r2, [r3, #64]	; 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000eea:	688a      	ldr	r2, [r1, #8]
 8000eec:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000ef0:	d117      	bne.n	8000f22 <ADC_DMAConvCplt+0x4e>
 8000ef2:	7e1a      	ldrb	r2, [r3, #24]
 8000ef4:	b9aa      	cbnz	r2, 8000f22 <ADC_DMAConvCplt+0x4e>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ef6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ef8:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000efc:	d002      	beq.n	8000f04 <ADC_DMAConvCplt+0x30>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000efe:	688a      	ldr	r2, [r1, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f00:	0550      	lsls	r0, r2, #21
 8000f02:	d40e      	bmi.n	8000f22 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f04:	684a      	ldr	r2, [r1, #4]
 8000f06:	f022 0220 	bic.w	r2, r2, #32
 8000f0a:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f12:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f16:	04d1      	lsls	r1, r2, #19
 8000f18:	d403      	bmi.n	8000f22 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1c:	f042 0201 	orr.w	r2, r2, #1
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ffbe 	bl	8000ea4 <HAL_ADC_ConvCpltCallback>
}
 8000f28:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000f2a:	06d2      	lsls	r2, r2, #27
 8000f2c:	d404      	bmi.n	8000f38 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ffbd 	bl	8000eb8 <HAL_ADC_ErrorCallback>
}
 8000f3e:	bd10      	pop	{r4, pc}

08000f40 <HAL_ADC_ConfigChannel>:
{
 8000f40:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8000f42:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000f46:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8000f48:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8000f4a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8000f4c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000f4e:	f000 809a 	beq.w	8001086 <HAL_ADC_ConfigChannel+0x146>
 8000f52:	2301      	movs	r3, #1
 8000f54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f58:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f5a:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f5c:	2c09      	cmp	r4, #9
 8000f5e:	d82c      	bhi.n	8000fba <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f60:	691a      	ldr	r2, [r3, #16]
 8000f62:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8000f66:	f04f 0c07 	mov.w	ip, #7
 8000f6a:	fa0c fc05 	lsl.w	ip, ip, r5
 8000f6e:	ea22 020c 	bic.w	r2, r2, ip
 8000f72:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f74:	688a      	ldr	r2, [r1, #8]
 8000f76:	40aa      	lsls	r2, r5
 8000f78:	691d      	ldr	r5, [r3, #16]
 8000f7a:	432a      	orrs	r2, r5
 8000f7c:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8000f7e:	684a      	ldr	r2, [r1, #4]
 8000f80:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f82:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8000f84:	d82f      	bhi.n	8000fe6 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000f8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f8c:	3a05      	subs	r2, #5
 8000f8e:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f92:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f96:	fa0e f202 	lsl.w	r2, lr, r2
 8000f9a:	ea21 0202 	bic.w	r2, r1, r2
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fa2:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa6:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000fa8:	4a3e      	ldr	r2, [pc, #248]	; (80010a4 <HAL_ADC_ConfigChannel+0x164>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d030      	beq.n	8001010 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_UNLOCK(hadc);
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000fb4:	4618      	mov	r0, r3
}
 8000fb6:	b003      	add	sp, #12
 8000fb8:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fba:	fa1f fc84 	uxth.w	ip, r4
 8000fbe:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	f1ae 0e1e 	sub.w	lr, lr, #30
 8000fc8:	2507      	movs	r5, #7
 8000fca:	fa05 f50e 	lsl.w	r5, r5, lr
 8000fce:	ea22 0205 	bic.w	r2, r2, r5
 8000fd2:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fd4:	688a      	ldr	r2, [r1, #8]
 8000fd6:	68dd      	ldr	r5, [r3, #12]
 8000fd8:	fa02 f20e 	lsl.w	r2, r2, lr
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8000fe0:	684a      	ldr	r2, [r1, #4]
 8000fe2:	2a06      	cmp	r2, #6
 8000fe4:	d9cf      	bls.n	8000f86 <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Rank < 13U)
 8000fe6:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fe8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8000fec:	d832      	bhi.n	8001054 <HAL_ADC_ConfigChannel+0x114>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ff0:	3a23      	subs	r2, #35	; 0x23
 8000ff2:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ff8:	fa05 f202 	lsl.w	r2, r5, r2
 8000ffc:	ea21 0202 	bic.w	r2, r1, r2
 8001000:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001004:	ea4c 0202 	orr.w	r2, ip, r2
 8001008:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800100a:	4a26      	ldr	r2, [pc, #152]	; (80010a4 <HAL_ADC_ConfigChannel+0x164>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d1ce      	bne.n	8000fae <HAL_ADC_ConfigChannel+0x6e>
 8001010:	2c12      	cmp	r4, #18
 8001012:	d02e      	beq.n	8001072 <HAL_ADC_ConfigChannel+0x132>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <HAL_ADC_ConfigChannel+0x168>)
 8001016:	429c      	cmp	r4, r3
 8001018:	d138      	bne.n	800108c <HAL_ADC_ConfigChannel+0x14c>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <HAL_ADC_ConfigChannel+0x16c>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800101c:	4c24      	ldr	r4, [pc, #144]	; (80010b0 <HAL_ADC_ConfigChannel+0x170>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800101e:	685a      	ldr	r2, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001020:	4924      	ldr	r1, [pc, #144]	; (80010b4 <HAL_ADC_ConfigChannel+0x174>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001022:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001026:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800102e:	605a      	str	r2, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	fba1 1303 	umull	r1, r3, r1, r3
 8001036:	0c9b      	lsrs	r3, r3, #18
 8001038:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8001040:	9b01      	ldr	r3, [sp, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0b3      	beq.n	8000fae <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 8001046:	9b01      	ldr	r3, [sp, #4]
 8001048:	3b01      	subs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 800104c:	9b01      	ldr	r3, [sp, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f9      	bne.n	8001046 <HAL_ADC_ConfigChannel+0x106>
 8001052:	e7ac      	b.n	8000fae <HAL_ADC_ConfigChannel+0x6e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001056:	3a41      	subs	r2, #65	; 0x41
 8001058:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800105a:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800105e:	fa05 f202 	lsl.w	r2, r5, r2
 8001062:	ea21 0202 	bic.w	r2, r1, r2
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800106a:	ea4c 0202 	orr.w	r2, ip, r2
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001070:	e79a      	b.n	8000fa8 <HAL_ADC_ConfigChannel+0x68>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_ADC_ConfigChannel+0x16c>)
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800107a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001082:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001084:	e793      	b.n	8000fae <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 8001086:	2002      	movs	r0, #2
}
 8001088:	b003      	add	sp, #12
 800108a:	bd30      	pop	{r4, r5, pc}
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800108c:	2c11      	cmp	r4, #17
 800108e:	d18e      	bne.n	8000fae <HAL_ADC_ConfigChannel+0x6e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_ADC_ConfigChannel+0x16c>)
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001098:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010a0:	605a      	str	r2, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010a2:	e784      	b.n	8000fae <HAL_ADC_ConfigChannel+0x6e>
 80010a4:	40012000 	.word	0x40012000
 80010a8:	10000012 	.word	0x10000012
 80010ac:	40012300 	.word	0x40012300
 80010b0:	20000030 	.word	0x20000030
 80010b4:	431bde83 	.word	0x431bde83

080010b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80010ba:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ca:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80010d2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_NVIC_SetPriority+0x74>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e6:	f1c3 0e07 	rsb	lr, r3, #7
 80010ea:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f2:	bf28      	it	cs
 80010f4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f8:	f1bc 0f06 	cmp.w	ip, #6
 80010fc:	d91b      	bls.n	8001136 <HAL_NVIC_SetPriority+0x5a>
 80010fe:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001104:	fa0c fc03 	lsl.w	ip, ip, r3
 8001108:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001110:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001114:	ea21 010c 	bic.w	r1, r1, ip
 8001118:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800111a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001120:	db0c      	blt.n	800113c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001126:	0109      	lsls	r1, r1, #4
 8001128:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800112c:	b2c9      	uxtb	r1, r1
 800112e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001132:	f85d fb04 	ldr.w	pc, [sp], #4
 8001136:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001138:	4613      	mov	r3, r2
 800113a:	e7e7      	b.n	800110c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_NVIC_SetPriority+0x78>)
 800113e:	f000 000f 	and.w	r0, r0, #15
 8001142:	0109      	lsls	r1, r1, #4
 8001144:	4403      	add	r3, r0
 8001146:	b2c9      	uxtb	r1, r1
 8001148:	7619      	strb	r1, [r3, #24]
 800114a:	f85d fb04 	ldr.w	pc, [sp], #4
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00
 8001154:	e000ecfc 	.word	0xe000ecfc

08001158 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001158:	2800      	cmp	r0, #0
 800115a:	db07      	blt.n	800116c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_NVIC_EnableIRQ+0x18>)
 800115e:	0941      	lsrs	r1, r0, #5
 8001160:	2301      	movs	r3, #1
 8001162:	f000 001f 	and.w	r0, r0, #31
 8001166:	4083      	lsls	r3, r0
 8001168:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100

08001174 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	3801      	subs	r0, #1
 8001176:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800117a:	d210      	bcs.n	800119e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	4c08      	ldr	r4, [pc, #32]	; (80011a4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001184:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800118a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001190:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001192:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001196:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	6119      	str	r1, [r3, #16]
 800119c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2001      	movs	r0, #1
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011a8:	b538      	push	{r3, r4, r5, lr}
 80011aa:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff fd12 	bl	8000bd4 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011b0:	2c00      	cmp	r4, #0
 80011b2:	d052      	beq.n	800125a <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011b4:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80011b6:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80011b8:	2102      	movs	r1, #2
 80011ba:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80011be:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	f022 0201 	bic.w	r2, r2, #1
 80011c8:	4605      	mov	r5, r0
 80011ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011cc:	e005      	b.n	80011da <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ce:	f7ff fd01 	bl	8000bd4 <HAL_GetTick>
 80011d2:	1b43      	subs	r3, r0, r5
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	d839      	bhi.n	800124c <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	07d1      	lsls	r1, r2, #31
 80011de:	d4f6      	bmi.n	80011ce <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011e0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80011e4:	68e1      	ldr	r1, [r4, #12]
 80011e6:	4302      	orrs	r2, r0
 80011e8:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ea:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ee:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f0:	432a      	orrs	r2, r5
 80011f2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f4:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80011f6:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f8:	4302      	orrs	r2, r0
 80011fa:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011fc:	4933      	ldr	r1, [pc, #204]	; (80012cc <HAL_DMA_Init+0x124>)
 80011fe:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001200:	6a25      	ldr	r5, [r4, #32]
 8001202:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001204:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001206:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001208:	2904      	cmp	r1, #4
 800120a:	d028      	beq.n	800125e <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800120c:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800120e:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001210:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001214:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001216:	b2d8      	uxtb	r0, r3
 8001218:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 800121a:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800121c:	3810      	subs	r0, #16
 800121e:	fba2 5200 	umull	r5, r2, r2, r0
 8001222:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001224:	492b      	ldr	r1, [pc, #172]	; (80012d4 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001226:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800122a:	5c89      	ldrb	r1, [r1, r2]
 800122c:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800122e:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8001232:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001234:	bf88      	it	hi
 8001236:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001238:	223f      	movs	r2, #63	; 0x3f
 800123a:	408a      	lsls	r2, r1
 800123c:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800123e:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001240:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8001242:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001244:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001246:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800124a:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800124c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800124e:	2220      	movs	r2, #32
 8001250:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001252:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8001256:	4618      	mov	r0, r3
}
 8001258:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800125a:	2001      	movs	r0, #1
}
 800125c:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800125e:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8001262:	4329      	orrs	r1, r5
 8001264:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8001266:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001268:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800126a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800126c:	f021 0107 	bic.w	r1, r1, #7
 8001270:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8001272:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001276:	2d00      	cmp	r5, #0
 8001278:	d0cd      	beq.n	8001216 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800127a:	b178      	cbz	r0, 800129c <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800127c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001280:	d016      	beq.n	80012b0 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001282:	2a02      	cmp	r2, #2
 8001284:	d903      	bls.n	800128e <HAL_DMA_Init+0xe6>
 8001286:	2a03      	cmp	r2, #3
 8001288:	d1c5      	bne.n	8001216 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800128a:	01ea      	lsls	r2, r5, #7
 800128c:	d5c3      	bpl.n	8001216 <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 800128e:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001290:	2240      	movs	r2, #64	; 0x40
 8001292:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001294:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001298:	4618      	mov	r0, r3
}
 800129a:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 800129c:	2a01      	cmp	r2, #1
 800129e:	d003      	beq.n	80012a8 <HAL_DMA_Init+0x100>
 80012a0:	f032 0202 	bics.w	r2, r2, #2
 80012a4:	d1b7      	bne.n	8001216 <HAL_DMA_Init+0x6e>
 80012a6:	e7f0      	b.n	800128a <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012a8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80012ac:	d1b3      	bne.n	8001216 <HAL_DMA_Init+0x6e>
 80012ae:	e7ee      	b.n	800128e <HAL_DMA_Init+0xe6>
    switch (tmp)
 80012b0:	2a03      	cmp	r2, #3
 80012b2:	d8b0      	bhi.n	8001216 <HAL_DMA_Init+0x6e>
 80012b4:	a001      	add	r0, pc, #4	; (adr r0, 80012bc <HAL_DMA_Init+0x114>)
 80012b6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80012ba:	bf00      	nop
 80012bc:	0800128f 	.word	0x0800128f
 80012c0:	0800128b 	.word	0x0800128b
 80012c4:	0800128f 	.word	0x0800128f
 80012c8:	080012a9 	.word	0x080012a9
 80012cc:	f010803f 	.word	0xf010803f
 80012d0:	aaaaaaab 	.word	0xaaaaaaab
 80012d4:	08002a48 	.word	0x08002a48

080012d8 <HAL_DMA_Start_IT>:
{
 80012d8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 80012da:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012de:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80012e0:	2c01      	cmp	r4, #1
 80012e2:	d035      	beq.n	8001350 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 80012e4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 80012e8:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ec:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 80012ee:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80012f2:	d005      	beq.n	8001300 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80012f4:	2300      	movs	r3, #0
 80012f6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 80012fa:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 80012fc:	2002      	movs	r0, #2
}
 80012fe:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001300:	2602      	movs	r6, #2
 8001302:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001306:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001308:	2600      	movs	r6, #0
 800130a:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800130c:	6826      	ldr	r6, [r4, #0]
 800130e:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8001312:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001314:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001316:	6883      	ldr	r3, [r0, #8]
 8001318:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800131a:	bf0e      	itee	eq
 800131c:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800131e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001320:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001322:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001324:	bf08      	it	eq
 8001326:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001328:	233f      	movs	r3, #63	; 0x3f
 800132a:	4093      	lsls	r3, r2
 800132c:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800132e:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001330:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001332:	f043 0316 	orr.w	r3, r3, #22
 8001336:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001338:	b11a      	cbz	r2, 8001342 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 800133a:	6823      	ldr	r3, [r4, #0]
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001348:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800134a:	6023      	str	r3, [r4, #0]
}
 800134c:	bc70      	pop	{r4, r5, r6}
 800134e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001350:	2002      	movs	r0, #2
}
 8001352:	bc70      	pop	{r4, r5, r6}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <HAL_DMA_IRQHandler>:
{
 8001358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135a:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 800135c:	4a67      	ldr	r2, [pc, #412]	; (80014fc <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800135e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001360:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001366:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001368:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800136a:	2208      	movs	r2, #8
 800136c:	409a      	lsls	r2, r3
 800136e:	422a      	tst	r2, r5
{
 8001370:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001372:	d003      	beq.n	800137c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001374:	6801      	ldr	r1, [r0, #0]
 8001376:	6808      	ldr	r0, [r1, #0]
 8001378:	0740      	lsls	r0, r0, #29
 800137a:	d478      	bmi.n	800146e <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800137c:	2201      	movs	r2, #1
 800137e:	409a      	lsls	r2, r3
 8001380:	422a      	tst	r2, r5
 8001382:	d003      	beq.n	800138c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001384:	6821      	ldr	r1, [r4, #0]
 8001386:	6949      	ldr	r1, [r1, #20]
 8001388:	0608      	lsls	r0, r1, #24
 800138a:	d46a      	bmi.n	8001462 <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800138c:	2204      	movs	r2, #4
 800138e:	409a      	lsls	r2, r3
 8001390:	422a      	tst	r2, r5
 8001392:	d003      	beq.n	800139c <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001394:	6821      	ldr	r1, [r4, #0]
 8001396:	6809      	ldr	r1, [r1, #0]
 8001398:	0789      	lsls	r1, r1, #30
 800139a:	d45c      	bmi.n	8001456 <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800139c:	2210      	movs	r2, #16
 800139e:	409a      	lsls	r2, r3
 80013a0:	422a      	tst	r2, r5
 80013a2:	d003      	beq.n	80013ac <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013a4:	6821      	ldr	r1, [r4, #0]
 80013a6:	6808      	ldr	r0, [r1, #0]
 80013a8:	0700      	lsls	r0, r0, #28
 80013aa:	d441      	bmi.n	8001430 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013ac:	2220      	movs	r2, #32
 80013ae:	409a      	lsls	r2, r3
 80013b0:	422a      	tst	r2, r5
 80013b2:	d014      	beq.n	80013de <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013b4:	6821      	ldr	r1, [r4, #0]
 80013b6:	6808      	ldr	r0, [r1, #0]
 80013b8:	06c0      	lsls	r0, r0, #27
 80013ba:	d510      	bpl.n	80013de <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013bc:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013be:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80013c2:	2a05      	cmp	r2, #5
 80013c4:	d063      	beq.n	800148e <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013c6:	680b      	ldr	r3, [r1, #0]
 80013c8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013cc:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013ce:	d07e      	beq.n	80014ce <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013d0:	0319      	lsls	r1, r3, #12
 80013d2:	f140 8089 	bpl.w	80014e8 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 80013d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013d8:	b10b      	cbz	r3, 80013de <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 80013da:	4620      	mov	r0, r4
 80013dc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013e0:	b323      	cbz	r3, 800142c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013e4:	07da      	lsls	r2, r3, #31
 80013e6:	d51a      	bpl.n	800141e <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 80013e8:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013ea:	4945      	ldr	r1, [pc, #276]	; (8001500 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80013ec:	2305      	movs	r3, #5
 80013ee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80013f2:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013f4:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 80013f8:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80013fc:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e002      	b.n	8001408 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	07db      	lsls	r3, r3, #31
 8001406:	d504      	bpl.n	8001412 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001408:	9b01      	ldr	r3, [sp, #4]
 800140a:	3301      	adds	r3, #1
 800140c:	42b3      	cmp	r3, r6
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	d9f7      	bls.n	8001402 <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 8001412:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8001414:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001416:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800141a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800141e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001420:	b123      	cbz	r3, 800142c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8001422:	4620      	mov	r0, r4
}
 8001424:	b003      	add	sp, #12
 8001426:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800142a:	4718      	bx	r3
}
 800142c:	b003      	add	sp, #12
 800142e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001430:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001432:	680a      	ldr	r2, [r1, #0]
 8001434:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001438:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800143a:	d122      	bne.n	8001482 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800143c:	05d2      	lsls	r2, r2, #23
 800143e:	d403      	bmi.n	8001448 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001440:	680a      	ldr	r2, [r1, #0]
 8001442:	f022 0208 	bic.w	r2, r2, #8
 8001446:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001448:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800144a:	2a00      	cmp	r2, #0
 800144c:	d0ae      	beq.n	80013ac <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800144e:	4620      	mov	r0, r4
 8001450:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001452:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001454:	e7aa      	b.n	80013ac <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001456:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001458:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800145a:	f042 0204 	orr.w	r2, r2, #4
 800145e:	6562      	str	r2, [r4, #84]	; 0x54
 8001460:	e79c      	b.n	800139c <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001462:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001464:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001466:	f042 0202 	orr.w	r2, r2, #2
 800146a:	6562      	str	r2, [r4, #84]	; 0x54
 800146c:	e78e      	b.n	800138c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800146e:	6808      	ldr	r0, [r1, #0]
 8001470:	f020 0004 	bic.w	r0, r0, #4
 8001474:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001476:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001478:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	6562      	str	r2, [r4, #84]	; 0x54
 8001480:	e77c      	b.n	800137c <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001482:	0311      	lsls	r1, r2, #12
 8001484:	d5e0      	bpl.n	8001448 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001486:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001488:	2a00      	cmp	r2, #0
 800148a:	d1e0      	bne.n	800144e <HAL_DMA_IRQHandler+0xf6>
 800148c:	e78e      	b.n	80013ac <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800148e:	680a      	ldr	r2, [r1, #0]
 8001490:	f022 0216 	bic.w	r2, r2, #22
 8001494:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001496:	694a      	ldr	r2, [r1, #20]
 8001498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800149c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800149e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014a0:	b33a      	cbz	r2, 80014f2 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014a2:	680a      	ldr	r2, [r1, #0]
 80014a4:	f022 0208 	bic.w	r2, r2, #8
 80014a8:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014aa:	223f      	movs	r2, #63	; 0x3f
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80014b0:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b2:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80014b4:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80014b6:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80014b8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80014bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80014c0:	2900      	cmp	r1, #0
 80014c2:	d0b3      	beq.n	800142c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 80014c4:	4620      	mov	r0, r4
}
 80014c6:	b003      	add	sp, #12
 80014c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 80014cc:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014ce:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80014d2:	d180      	bne.n	80013d6 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014d4:	680a      	ldr	r2, [r1, #0]
 80014d6:	f022 0210 	bic.w	r2, r2, #16
 80014da:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80014dc:	2201      	movs	r2, #1
 80014de:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80014e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80014e6:	e776      	b.n	80013d6 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 80014e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f47f af75 	bne.w	80013da <HAL_DMA_IRQHandler+0x82>
 80014f0:	e775      	b.n	80013de <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80014f4:	2a00      	cmp	r2, #0
 80014f6:	d1d4      	bne.n	80014a2 <HAL_DMA_IRQHandler+0x14a>
 80014f8:	e7d7      	b.n	80014aa <HAL_DMA_IRQHandler+0x152>
 80014fa:	bf00      	nop
 80014fc:	20000030 	.word	0x20000030
 8001500:	1b4e81b5 	.word	0x1b4e81b5

08001504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001508:	2200      	movs	r2, #0
 800150a:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150c:	4e71      	ldr	r6, [pc, #452]	; (80016d4 <HAL_GPIO_Init+0x1d0>)
{
 800150e:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001510:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8001512:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	4689      	mov	r9, r1
 8001518:	e004      	b.n	8001524 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151a:	3301      	adds	r3, #1
 800151c:	2b10      	cmp	r3, #16
 800151e:	f102 0202 	add.w	r2, r2, #2
 8001522:	d079      	beq.n	8001618 <HAL_GPIO_Init+0x114>
    ioposition = 0x01U << position;
 8001524:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001528:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 800152c:	43a1      	bics	r1, r4
 800152e:	d1f4      	bne.n	800151a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001530:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001534:	f00c 0103 	and.w	r1, ip, #3
 8001538:	1e4d      	subs	r5, r1, #1
 800153a:	2d01      	cmp	r5, #1
 800153c:	d96f      	bls.n	800161e <HAL_GPIO_Init+0x11a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800153e:	2903      	cmp	r1, #3
 8001540:	f040 80b0 	bne.w	80016a4 <HAL_GPIO_Init+0x1a0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001544:	4091      	lsls	r1, r2
 8001546:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8001548:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800154a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800154c:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800154e:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001552:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001554:	d0e1      	beq.n	800151a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	4d60      	ldr	r5, [pc, #384]	; (80016d8 <HAL_GPIO_Init+0x1d4>)
 8001558:	2100      	movs	r1, #0
 800155a:	9103      	str	r1, [sp, #12]
 800155c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800155e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001562:	6469      	str	r1, [r5, #68]	; 0x44
 8001564:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001566:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800156a:	9103      	str	r1, [sp, #12]
 800156c:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800156e:	f023 0103 	bic.w	r1, r3, #3
 8001572:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001576:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800157a:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800157e:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001580:	00bf      	lsls	r7, r7, #2
 8001582:	f04f 0e0f 	mov.w	lr, #15
 8001586:	fa0e fe07 	lsl.w	lr, lr, r7
 800158a:	ea25 080e 	bic.w	r8, r5, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158e:	4d53      	ldr	r5, [pc, #332]	; (80016dc <HAL_GPIO_Init+0x1d8>)
 8001590:	42a8      	cmp	r0, r5
 8001592:	d017      	beq.n	80015c4 <HAL_GPIO_Init+0xc0>
 8001594:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001598:	42a8      	cmp	r0, r5
 800159a:	f000 8087 	beq.w	80016ac <HAL_GPIO_Init+0x1a8>
 800159e:	4d50      	ldr	r5, [pc, #320]	; (80016e0 <HAL_GPIO_Init+0x1dc>)
 80015a0:	42a8      	cmp	r0, r5
 80015a2:	f000 8088 	beq.w	80016b6 <HAL_GPIO_Init+0x1b2>
 80015a6:	4d4f      	ldr	r5, [pc, #316]	; (80016e4 <HAL_GPIO_Init+0x1e0>)
 80015a8:	42a8      	cmp	r0, r5
 80015aa:	f000 808b 	beq.w	80016c4 <HAL_GPIO_Init+0x1c0>
 80015ae:	4d4e      	ldr	r5, [pc, #312]	; (80016e8 <HAL_GPIO_Init+0x1e4>)
 80015b0:	42a8      	cmp	r0, r5
 80015b2:	bf0c      	ite	eq
 80015b4:	f04f 0e04 	moveq.w	lr, #4
 80015b8:	f04f 0e07 	movne.w	lr, #7
 80015bc:	fa0e f707 	lsl.w	r7, lr, r7
 80015c0:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c4:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 80015c8:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80015ca:	ea6f 050b 	mvn.w	r5, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ce:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80015d2:	bf0c      	ite	eq
 80015d4:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80015d6:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 80015da:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 80015dc:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015de:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80015e2:	bf0c      	ite	eq
 80015e4:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80015e6:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->FTSR = temp;
 80015ea:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 80015ec:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ee:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80015f2:	bf0c      	ite	eq
 80015f4:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 80015f6:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->EMR = temp;
 80015fa:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015fc:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015fe:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001602:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001606:	bf0c      	ite	eq
 8001608:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 800160a:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160e:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8001610:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001612:	f102 0202 	add.w	r2, r2, #2
 8001616:	d185      	bne.n	8001524 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001618:	b005      	add	sp, #20
 800161a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800161e:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8001622:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001626:	fa05 f702 	lsl.w	r7, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800162a:	2503      	movs	r5, #3
 800162c:	fa05 f802 	lsl.w	r8, r5, r2
 8001630:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001634:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001638:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800163a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800163c:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001640:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8001644:	409f      	lsls	r7, r3
 8001646:	ea47 070e 	orr.w	r7, r7, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800164a:	ea6f 0508 	mvn.w	r5, r8
        GPIOx->OTYPER = temp;
 800164e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001650:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001652:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001656:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800165a:	4097      	lsls	r7, r2
 800165c:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001660:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8001662:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001664:	fa01 f102 	lsl.w	r1, r1, r2
 8001668:	f47f af6e 	bne.w	8001548 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 800166c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001670:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001674:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001678:	f8de 7020 	ldr.w	r7, [lr, #32]
 800167c:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800167e:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001682:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001686:	fa07 f708 	lsl.w	r7, r7, r8
 800168a:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800168c:	270f      	movs	r7, #15
 800168e:	fa07 f808 	lsl.w	r8, r7, r8
 8001692:	9f00      	ldr	r7, [sp, #0]
 8001694:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001698:	9f01      	ldr	r7, [sp, #4]
 800169a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 800169e:	f8ce 7020 	str.w	r7, [lr, #32]
 80016a2:	e751      	b.n	8001548 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a4:	2503      	movs	r5, #3
 80016a6:	4095      	lsls	r5, r2
 80016a8:	43ed      	mvns	r5, r5
 80016aa:	e7d1      	b.n	8001650 <HAL_GPIO_Init+0x14c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ac:	fa0a f707 	lsl.w	r7, sl, r7
 80016b0:	ea48 0807 	orr.w	r8, r8, r7
 80016b4:	e786      	b.n	80015c4 <HAL_GPIO_Init+0xc0>
 80016b6:	f04f 0e02 	mov.w	lr, #2
 80016ba:	fa0e f707 	lsl.w	r7, lr, r7
 80016be:	ea48 0807 	orr.w	r8, r8, r7
 80016c2:	e77f      	b.n	80015c4 <HAL_GPIO_Init+0xc0>
 80016c4:	f04f 0e03 	mov.w	lr, #3
 80016c8:	fa0e f707 	lsl.w	r7, lr, r7
 80016cc:	ea48 0807 	orr.w	r8, r8, r7
 80016d0:	e778      	b.n	80015c4 <HAL_GPIO_Init+0xc0>
 80016d2:	bf00      	nop
 80016d4:	40013c00 	.word	0x40013c00
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020800 	.word	0x40020800
 80016e4:	40020c00 	.word	0x40020c00
 80016e8:	40021000 	.word	0x40021000

080016ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ec:	b902      	cbnz	r2, 80016f0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ee:	0409      	lsls	r1, r1, #16
 80016f0:	6181      	str	r1, [r0, #24]
  }
}
 80016f2:	4770      	bx	lr

080016f4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f4:	2800      	cmp	r0, #0
 80016f6:	f000 81a2 	beq.w	8001a3e <HAL_RCC_OscConfig+0x34a>
{
 80016fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	6803      	ldr	r3, [r0, #0]
 8001700:	07dd      	lsls	r5, r3, #31
{
 8001702:	b082      	sub	sp, #8
 8001704:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	d52f      	bpl.n	8001768 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001708:	499e      	ldr	r1, [pc, #632]	; (8001984 <HAL_RCC_OscConfig+0x290>)
 800170a:	688a      	ldr	r2, [r1, #8]
 800170c:	f002 020c 	and.w	r2, r2, #12
 8001710:	2a04      	cmp	r2, #4
 8001712:	f000 80ed 	beq.w	80018f0 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001716:	688a      	ldr	r2, [r1, #8]
 8001718:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800171c:	2a08      	cmp	r2, #8
 800171e:	f000 80e3 	beq.w	80018e8 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001722:	6863      	ldr	r3, [r4, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	f000 80ec 	beq.w	8001904 <HAL_RCC_OscConfig+0x210>
 800172c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001730:	f000 8175 	beq.w	8001a1e <HAL_RCC_OscConfig+0x32a>
 8001734:	4d93      	ldr	r5, [pc, #588]	; (8001984 <HAL_RCC_OscConfig+0x290>)
 8001736:	682a      	ldr	r2, [r5, #0]
 8001738:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800173c:	602a      	str	r2, [r5, #0]
 800173e:	682a      	ldr	r2, [r5, #0]
 8001740:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001744:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 80e1 	bne.w	800190e <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fa42 	bl	8000bd4 <HAL_GetTick>
 8001750:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	e005      	b.n	8001760 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fa3e 	bl	8000bd4 <HAL_GetTick>
 8001758:	1b80      	subs	r0, r0, r6
 800175a:	2864      	cmp	r0, #100	; 0x64
 800175c:	f200 8101 	bhi.w	8001962 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001760:	682b      	ldr	r3, [r5, #0]
 8001762:	039b      	lsls	r3, r3, #14
 8001764:	d4f6      	bmi.n	8001754 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	079f      	lsls	r7, r3, #30
 800176a:	d528      	bpl.n	80017be <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800176c:	4a85      	ldr	r2, [pc, #532]	; (8001984 <HAL_RCC_OscConfig+0x290>)
 800176e:	6891      	ldr	r1, [r2, #8]
 8001770:	f011 0f0c 	tst.w	r1, #12
 8001774:	f000 8090 	beq.w	8001898 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001778:	6891      	ldr	r1, [r2, #8]
 800177a:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800177e:	2908      	cmp	r1, #8
 8001780:	f000 8086 	beq.w	8001890 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001784:	68e3      	ldr	r3, [r4, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 810e 	beq.w	80019a8 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178c:	4b7e      	ldr	r3, [pc, #504]	; (8001988 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4e7d      	ldr	r6, [pc, #500]	; (8001984 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001794:	f7ff fa1e 	bl	8000bd4 <HAL_GetTick>
 8001798:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	e005      	b.n	80017a8 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff fa1a 	bl	8000bd4 <HAL_GetTick>
 80017a0:	1b40      	subs	r0, r0, r5
 80017a2:	2802      	cmp	r0, #2
 80017a4:	f200 80dd 	bhi.w	8001962 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a8:	6833      	ldr	r3, [r6, #0]
 80017aa:	0798      	lsls	r0, r3, #30
 80017ac:	d5f6      	bpl.n	800179c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ae:	6833      	ldr	r3, [r6, #0]
 80017b0:	6922      	ldr	r2, [r4, #16]
 80017b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017ba:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	071a      	lsls	r2, r3, #28
 80017c0:	d451      	bmi.n	8001866 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c2:	0758      	lsls	r0, r3, #29
 80017c4:	d52f      	bpl.n	8001826 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c6:	4a6f      	ldr	r2, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x290>)
 80017c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017ca:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80017ce:	d07f      	beq.n	80018d0 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 80017d0:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d2:	4e6e      	ldr	r6, [pc, #440]	; (800198c <HAL_RCC_OscConfig+0x298>)
 80017d4:	6833      	ldr	r3, [r6, #0]
 80017d6:	05d9      	lsls	r1, r3, #23
 80017d8:	f140 80b3 	bpl.w	8001942 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017dc:	68a3      	ldr	r3, [r4, #8]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	f000 80c3 	beq.w	800196a <HAL_RCC_OscConfig+0x276>
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	f000 812c 	beq.w	8001a42 <HAL_RCC_OscConfig+0x34e>
 80017ea:	4e66      	ldr	r6, [pc, #408]	; (8001984 <HAL_RCC_OscConfig+0x290>)
 80017ec:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	6732      	str	r2, [r6, #112]	; 0x70
 80017f4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f040 80b9 	bne.w	8001974 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7ff f9e7 	bl	8000bd4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800180a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	e005      	b.n	800181a <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff f9e1 	bl	8000bd4 <HAL_GetTick>
 8001812:	1bc0      	subs	r0, r0, r7
 8001814:	4540      	cmp	r0, r8
 8001816:	f200 80a4 	bhi.w	8001962 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800181c:	0798      	lsls	r0, r3, #30
 800181e:	d4f6      	bmi.n	800180e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001820:	2d00      	cmp	r5, #0
 8001822:	f040 8106 	bne.w	8001a32 <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001826:	69a0      	ldr	r0, [r4, #24]
 8001828:	b1c8      	cbz	r0, 800185e <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800182a:	4d56      	ldr	r5, [pc, #344]	; (8001984 <HAL_RCC_OscConfig+0x290>)
 800182c:	68ab      	ldr	r3, [r5, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b08      	cmp	r3, #8
 8001834:	f000 80c9 	beq.w	80019ca <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001838:	4b53      	ldr	r3, [pc, #332]	; (8001988 <HAL_RCC_OscConfig+0x294>)
 800183a:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800183c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800183e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001840:	f000 8109 	beq.w	8001a56 <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff f9c6 	bl	8000bd4 <HAL_GetTick>
 8001848:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	e005      	b.n	8001858 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff f9c2 	bl	8000bd4 <HAL_GetTick>
 8001850:	1b00      	subs	r0, r0, r4
 8001852:	2802      	cmp	r0, #2
 8001854:	f200 8085 	bhi.w	8001962 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001858:	682b      	ldr	r3, [r5, #0]
 800185a:	019b      	lsls	r3, r3, #6
 800185c:	d4f6      	bmi.n	800184c <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800185e:	2000      	movs	r0, #0
}
 8001860:	b002      	add	sp, #8
 8001862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001866:	6963      	ldr	r3, [r4, #20]
 8001868:	b30b      	cbz	r3, 80018ae <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 800186a:	4b47      	ldr	r3, [pc, #284]	; (8001988 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186c:	4e45      	ldr	r6, [pc, #276]	; (8001984 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 800186e:	2201      	movs	r2, #1
 8001870:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001874:	f7ff f9ae 	bl	8000bd4 <HAL_GetTick>
 8001878:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187a:	e004      	b.n	8001886 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187c:	f7ff f9aa 	bl	8000bd4 <HAL_GetTick>
 8001880:	1b40      	subs	r0, r0, r5
 8001882:	2802      	cmp	r0, #2
 8001884:	d86d      	bhi.n	8001962 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001886:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001888:	079b      	lsls	r3, r3, #30
 800188a:	d5f7      	bpl.n	800187c <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	e798      	b.n	80017c2 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001890:	6852      	ldr	r2, [r2, #4]
 8001892:	0256      	lsls	r6, r2, #9
 8001894:	f53f af76 	bmi.w	8001784 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001898:	4a3a      	ldr	r2, [pc, #232]	; (8001984 <HAL_RCC_OscConfig+0x290>)
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	0795      	lsls	r5, r2, #30
 800189e:	d544      	bpl.n	800192a <HAL_RCC_OscConfig+0x236>
 80018a0:	68e2      	ldr	r2, [r4, #12]
 80018a2:	2a01      	cmp	r2, #1
 80018a4:	d041      	beq.n	800192a <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
}
 80018a8:	b002      	add	sp, #8
 80018aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80018ae:	4a36      	ldr	r2, [pc, #216]	; (8001988 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	4e34      	ldr	r6, [pc, #208]	; (8001984 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 80018b2:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80018b6:	f7ff f98d 	bl	8000bd4 <HAL_GetTick>
 80018ba:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018bc:	e004      	b.n	80018c8 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018be:	f7ff f989 	bl	8000bd4 <HAL_GetTick>
 80018c2:	1b40      	subs	r0, r0, r5
 80018c4:	2802      	cmp	r0, #2
 80018c6:	d84c      	bhi.n	8001962 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80018ca:	079f      	lsls	r7, r3, #30
 80018cc:	d4f7      	bmi.n	80018be <HAL_RCC_OscConfig+0x1ca>
 80018ce:	e7dd      	b.n	800188c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018e4:	2501      	movs	r5, #1
 80018e6:	e774      	b.n	80017d2 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e8:	684a      	ldr	r2, [r1, #4]
 80018ea:	0250      	lsls	r0, r2, #9
 80018ec:	f57f af19 	bpl.w	8001722 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	4a24      	ldr	r2, [pc, #144]	; (8001984 <HAL_RCC_OscConfig+0x290>)
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	0391      	lsls	r1, r2, #14
 80018f6:	f57f af37 	bpl.w	8001768 <HAL_RCC_OscConfig+0x74>
 80018fa:	6862      	ldr	r2, [r4, #4]
 80018fc:	2a00      	cmp	r2, #0
 80018fe:	f47f af33 	bne.w	8001768 <HAL_RCC_OscConfig+0x74>
 8001902:	e7d0      	b.n	80018a6 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001904:	4a1f      	ldr	r2, [pc, #124]	; (8001984 <HAL_RCC_OscConfig+0x290>)
 8001906:	6813      	ldr	r3, [r2, #0]
 8001908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800190e:	f7ff f961 	bl	8000bd4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4e1c      	ldr	r6, [pc, #112]	; (8001984 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8001914:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	e004      	b.n	8001922 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff f95c 	bl	8000bd4 <HAL_GetTick>
 800191c:	1b40      	subs	r0, r0, r5
 800191e:	2864      	cmp	r0, #100	; 0x64
 8001920:	d81f      	bhi.n	8001962 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	6833      	ldr	r3, [r6, #0]
 8001924:	039a      	lsls	r2, r3, #14
 8001926:	d5f7      	bpl.n	8001918 <HAL_RCC_OscConfig+0x224>
 8001928:	e71d      	b.n	8001766 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192a:	4916      	ldr	r1, [pc, #88]	; (8001984 <HAL_RCC_OscConfig+0x290>)
 800192c:	6920      	ldr	r0, [r4, #16]
 800192e:	680a      	ldr	r2, [r1, #0]
 8001930:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001934:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001938:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193a:	071a      	lsls	r2, r3, #28
 800193c:	f57f af41 	bpl.w	80017c2 <HAL_RCC_OscConfig+0xce>
 8001940:	e791      	b.n	8001866 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001942:	6833      	ldr	r3, [r6, #0]
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800194a:	f7ff f943 	bl	8000bd4 <HAL_GetTick>
 800194e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001950:	6833      	ldr	r3, [r6, #0]
 8001952:	05da      	lsls	r2, r3, #23
 8001954:	f53f af42 	bmi.w	80017dc <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001958:	f7ff f93c 	bl	8000bd4 <HAL_GetTick>
 800195c:	1bc0      	subs	r0, r0, r7
 800195e:	2802      	cmp	r0, #2
 8001960:	d9f6      	bls.n	8001950 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8001962:	2003      	movs	r0, #3
}
 8001964:	b002      	add	sp, #8
 8001966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196a:	4a06      	ldr	r2, [pc, #24]	; (8001984 <HAL_RCC_OscConfig+0x290>)
 800196c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001974:	f7ff f92e 	bl	8000bd4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	4f02      	ldr	r7, [pc, #8]	; (8001984 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800197a:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001980:	e00b      	b.n	800199a <HAL_RCC_OscConfig+0x2a6>
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	42470000 	.word	0x42470000
 800198c:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001990:	f7ff f920 	bl	8000bd4 <HAL_GetTick>
 8001994:	1b80      	subs	r0, r0, r6
 8001996:	4540      	cmp	r0, r8
 8001998:	d8e3      	bhi.n	8001962 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800199c:	079b      	lsls	r3, r3, #30
 800199e:	d5f7      	bpl.n	8001990 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 80019a0:	2d00      	cmp	r5, #0
 80019a2:	f43f af40 	beq.w	8001826 <HAL_RCC_OscConfig+0x132>
 80019a6:	e044      	b.n	8001a32 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 80019a8:	4a42      	ldr	r2, [pc, #264]	; (8001ab4 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	4e43      	ldr	r6, [pc, #268]	; (8001ab8 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 80019ac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80019ae:	f7ff f911 	bl	8000bd4 <HAL_GetTick>
 80019b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b4:	e004      	b.n	80019c0 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff f90d 	bl	8000bd4 <HAL_GetTick>
 80019ba:	1b40      	subs	r0, r0, r5
 80019bc:	2802      	cmp	r0, #2
 80019be:	d8d0      	bhi.n	8001962 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c0:	6833      	ldr	r3, [r6, #0]
 80019c2:	0799      	lsls	r1, r3, #30
 80019c4:	d4f7      	bmi.n	80019b6 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	e6f9      	b.n	80017be <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ca:	2801      	cmp	r0, #1
 80019cc:	f43f af48 	beq.w	8001860 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 80019d0:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d2:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d8:	4291      	cmp	r1, r2
 80019da:	f47f af64 	bne.w	80018a6 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019e0:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e4:	4291      	cmp	r1, r2
 80019e6:	f47f af5e 	bne.w	80018a6 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80019ec:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80019f0:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80019f6:	f47f af56 	bne.w	80018a6 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019fc:	0852      	lsrs	r2, r2, #1
 80019fe:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001a02:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a04:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001a08:	f47f af4d 	bne.w	80018a6 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a0e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a12:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8001a16:	bf14      	ite	ne
 8001a18:	2001      	movne	r0, #1
 8001a1a:	2000      	moveq	r0, #0
 8001a1c:	e720      	b.n	8001860 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <HAL_RCC_OscConfig+0x3c4>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a2e:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a30:	e76d      	b.n	800190e <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a32:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <HAL_RCC_OscConfig+0x3c4>)
 8001a34:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3c:	e6f3      	b.n	8001826 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8001a3e:	2001      	movs	r0, #1
}
 8001a40:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_RCC_OscConfig+0x3c4>)
 8001a44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a46:	f042 0204 	orr.w	r2, r2, #4
 8001a4a:	671a      	str	r2, [r3, #112]	; 0x70
 8001a4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a54:	e78e      	b.n	8001974 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8001a56:	f7ff f8bd 	bl	8000bd4 <HAL_GetTick>
 8001a5a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5c:	e005      	b.n	8001a6a <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5e:	f7ff f8b9 	bl	8000bd4 <HAL_GetTick>
 8001a62:	1b80      	subs	r0, r0, r6
 8001a64:	2802      	cmp	r0, #2
 8001a66:	f63f af7c 	bhi.w	8001962 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	682b      	ldr	r3, [r5, #0]
 8001a6c:	0199      	lsls	r1, r3, #6
 8001a6e:	d4f6      	bmi.n	8001a5e <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a70:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001a74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a76:	430b      	orrs	r3, r1
 8001a78:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a7c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8001a80:	0852      	lsrs	r2, r2, #1
 8001a82:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001a86:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001a88:	490a      	ldr	r1, [pc, #40]	; (8001ab4 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001a8e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a90:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a92:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001a94:	f7ff f89e 	bl	8000bd4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a98:	4d07      	ldr	r5, [pc, #28]	; (8001ab8 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8001a9a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9c:	e005      	b.n	8001aaa <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff f899 	bl	8000bd4 <HAL_GetTick>
 8001aa2:	1b00      	subs	r0, r0, r4
 8001aa4:	2802      	cmp	r0, #2
 8001aa6:	f63f af5c 	bhi.w	8001962 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	019a      	lsls	r2, r3, #6
 8001aae:	d5f6      	bpl.n	8001a9e <HAL_RCC_OscConfig+0x3aa>
 8001ab0:	e6d5      	b.n	800185e <HAL_RCC_OscConfig+0x16a>
 8001ab2:	bf00      	nop
 8001ab4:	42470000 	.word	0x42470000
 8001ab8:	40023800 	.word	0x40023800

08001abc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001abc:	4916      	ldr	r1, [pc, #88]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8001abe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac0:	688b      	ldr	r3, [r1, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d01b      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x46>
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d117      	bne.n	8001afe <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ace:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001adc:	d113      	bne.n	8001b06 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ade:	480f      	ldr	r0, [pc, #60]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x60>)
 8001ae0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001ae4:	fba1 0100 	umull	r0, r1, r1, r0
 8001ae8:	f7fe feac 	bl	8000844 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001af4:	3301      	adds	r3, #1
 8001af6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001af8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001afc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001afe:	4807      	ldr	r0, [pc, #28]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x60>)
}
 8001b00:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b02:	4807      	ldr	r0, [pc, #28]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001b04:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b06:	4806      	ldr	r0, [pc, #24]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x64>)
 8001b08:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	fba1 0100 	umull	r0, r1, r1, r0
 8001b12:	f7fe fe97 	bl	8000844 <__aeabi_uldivmod>
 8001b16:	e7e9      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x30>
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	00f42400 	.word	0x00f42400
 8001b20:	007a1200 	.word	0x007a1200

08001b24 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001b24:	2800      	cmp	r0, #0
 8001b26:	f000 8087 	beq.w	8001c38 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2a:	4a48      	ldr	r2, [pc, #288]	; (8001c4c <HAL_RCC_ClockConfig+0x128>)
 8001b2c:	6813      	ldr	r3, [r2, #0]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	428b      	cmp	r3, r1
{
 8001b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b38:	460d      	mov	r5, r1
 8001b3a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b3c:	d209      	bcs.n	8001b52 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	b2cb      	uxtb	r3, r1
 8001b40:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	6813      	ldr	r3, [r2, #0]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	428b      	cmp	r3, r1
 8001b4a:	d002      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001b4c:	2001      	movs	r0, #1
}
 8001b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	0798      	lsls	r0, r3, #30
 8001b56:	d514      	bpl.n	8001b82 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	0759      	lsls	r1, r3, #29
 8001b5a:	d504      	bpl.n	8001b66 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b5c:	493c      	ldr	r1, [pc, #240]	; (8001c50 <HAL_RCC_ClockConfig+0x12c>)
 8001b5e:	688a      	ldr	r2, [r1, #8]
 8001b60:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001b64:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b66:	071a      	lsls	r2, r3, #28
 8001b68:	d504      	bpl.n	8001b74 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b6a:	4939      	ldr	r1, [pc, #228]	; (8001c50 <HAL_RCC_ClockConfig+0x12c>)
 8001b6c:	688a      	ldr	r2, [r1, #8]
 8001b6e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001b72:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b74:	4936      	ldr	r1, [pc, #216]	; (8001c50 <HAL_RCC_ClockConfig+0x12c>)
 8001b76:	68a0      	ldr	r0, [r4, #8]
 8001b78:	688a      	ldr	r2, [r1, #8]
 8001b7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001b7e:	4302      	orrs	r2, r0
 8001b80:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b82:	07df      	lsls	r7, r3, #31
 8001b84:	d521      	bpl.n	8001bca <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	6862      	ldr	r2, [r4, #4]
 8001b88:	2a01      	cmp	r2, #1
 8001b8a:	d057      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8c:	1e93      	subs	r3, r2, #2
 8001b8e:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b90:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <HAL_RCC_ClockConfig+0x12c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b94:	d94d      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	0799      	lsls	r1, r3, #30
 8001b98:	d5d8      	bpl.n	8001b4c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4e2d      	ldr	r6, [pc, #180]	; (8001c50 <HAL_RCC_ClockConfig+0x12c>)
 8001b9c:	68b3      	ldr	r3, [r6, #8]
 8001b9e:	f023 0303 	bic.w	r3, r3, #3
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001ba6:	f7ff f815 	bl	8000bd4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001baa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001bae:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb0:	e004      	b.n	8001bbc <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb2:	f7ff f80f 	bl	8000bd4 <HAL_GetTick>
 8001bb6:	1bc0      	subs	r0, r0, r7
 8001bb8:	4540      	cmp	r0, r8
 8001bba:	d844      	bhi.n	8001c46 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbc:	68b3      	ldr	r3, [r6, #8]
 8001bbe:	6862      	ldr	r2, [r4, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001bc8:	d1f3      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bca:	4a20      	ldr	r2, [pc, #128]	; (8001c4c <HAL_RCC_ClockConfig+0x128>)
 8001bcc:	6813      	ldr	r3, [r2, #0]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	42ab      	cmp	r3, r5
 8001bd4:	d906      	bls.n	8001be4 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	b2eb      	uxtb	r3, r5
 8001bd8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	6813      	ldr	r3, [r2, #0]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	42ab      	cmp	r3, r5
 8001be2:	d1b3      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	075a      	lsls	r2, r3, #29
 8001be8:	d506      	bpl.n	8001bf8 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bea:	4919      	ldr	r1, [pc, #100]	; (8001c50 <HAL_RCC_ClockConfig+0x12c>)
 8001bec:	68e0      	ldr	r0, [r4, #12]
 8001bee:	688a      	ldr	r2, [r1, #8]
 8001bf0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001bf4:	4302      	orrs	r2, r0
 8001bf6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf8:	071b      	lsls	r3, r3, #28
 8001bfa:	d507      	bpl.n	8001c0c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_RCC_ClockConfig+0x12c>)
 8001bfe:	6921      	ldr	r1, [r4, #16]
 8001c00:	6893      	ldr	r3, [r2, #8]
 8001c02:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c06:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c0a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c0c:	f7ff ff56 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8001c10:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <HAL_RCC_ClockConfig+0x12c>)
 8001c12:	4c10      	ldr	r4, [pc, #64]	; (8001c54 <HAL_RCC_ClockConfig+0x130>)
 8001c14:	6892      	ldr	r2, [r2, #8]
 8001c16:	4910      	ldr	r1, [pc, #64]	; (8001c58 <HAL_RCC_ClockConfig+0x134>)
 8001c18:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8001c20:	480e      	ldr	r0, [pc, #56]	; (8001c5c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c22:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8001c24:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c26:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8001c28:	f7fe ff8a 	bl	8000b40 <HAL_InitTick>
  return HAL_OK;
 8001c2c:	2000      	movs	r0, #0
}
 8001c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	0198      	lsls	r0, r3, #6
 8001c34:	d4b1      	bmi.n	8001b9a <HAL_RCC_ClockConfig+0x76>
 8001c36:	e789      	b.n	8001b4c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001c38:	2001      	movs	r0, #1
}
 8001c3a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <HAL_RCC_ClockConfig+0x12c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	039e      	lsls	r6, r3, #14
 8001c42:	d4aa      	bmi.n	8001b9a <HAL_RCC_ClockConfig+0x76>
 8001c44:	e782      	b.n	8001b4c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8001c46:	2003      	movs	r0, #3
 8001c48:	e781      	b.n	8001b4e <HAL_RCC_ClockConfig+0x2a>
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00
 8001c50:	40023800 	.word	0x40023800
 8001c54:	08002a50 	.word	0x08002a50
 8001c58:	20000030 	.word	0x20000030
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d07e      	beq.n	8001d62 <HAL_TIM_Base_Init+0x102>
{
 8001c64:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d05d      	beq.n	8001d30 <HAL_TIM_Base_Init+0xd0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c74:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c76:	493c      	ldr	r1, [pc, #240]	; (8001d68 <HAL_TIM_Base_Init+0x108>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c7e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8001c80:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c82:	d05a      	beq.n	8001d3a <HAL_TIM_Base_Init+0xda>
 8001c84:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001c88:	d021      	beq.n	8001cce <HAL_TIM_Base_Init+0x6e>
 8001c8a:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8001c8e:	428a      	cmp	r2, r1
 8001c90:	d01d      	beq.n	8001cce <HAL_TIM_Base_Init+0x6e>
 8001c92:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001c96:	428a      	cmp	r2, r1
 8001c98:	d019      	beq.n	8001cce <HAL_TIM_Base_Init+0x6e>
 8001c9a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001c9e:	428a      	cmp	r2, r1
 8001ca0:	d015      	beq.n	8001cce <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ca2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8001ca6:	428a      	cmp	r2, r1
 8001ca8:	d015      	beq.n	8001cd6 <HAL_TIM_Base_Init+0x76>
 8001caa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001cae:	428a      	cmp	r2, r1
 8001cb0:	d011      	beq.n	8001cd6 <HAL_TIM_Base_Init+0x76>
 8001cb2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001cb6:	428a      	cmp	r2, r1
 8001cb8:	d00d      	beq.n	8001cd6 <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cba:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cbc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cc2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8001cc4:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cc6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cc8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001cca:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ccc:	e010      	b.n	8001cf0 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8001cce:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001cd4:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cd6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cd8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cde:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ce4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ce6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8001ce8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8001cea:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cec:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001cee:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cf4:	6913      	ldr	r3, [r2, #16]
 8001cf6:	07db      	lsls	r3, r3, #31
 8001cf8:	d503      	bpl.n	8001d02 <HAL_TIM_Base_Init+0xa2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cfa:	6913      	ldr	r3, [r2, #16]
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001d0c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001d10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001d14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d20:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001d24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001d28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001d2c:	2000      	movs	r0, #0
}
 8001d2e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001d30:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001d34:	f000 fdf6 	bl	8002924 <HAL_TIM_Base_MspInit>
 8001d38:	e79c      	b.n	8001c74 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8001d3a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d3c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d42:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d48:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d4a:	69a1      	ldr	r1, [r4, #24]
 8001d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d50:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001d52:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d54:	68e3      	ldr	r3, [r4, #12]
 8001d56:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001d58:	6863      	ldr	r3, [r4, #4]
 8001d5a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001d5c:	6963      	ldr	r3, [r4, #20]
 8001d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d60:	e7c6      	b.n	8001cf0 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8001d62:	2001      	movs	r0, #1
}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40010000 	.word	0x40010000

08001d6c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001d6c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d124      	bne.n	8001dbe <HAL_TIM_Base_Start+0x52>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d74:	6803      	ldr	r3, [r0, #0]
 8001d76:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d7a:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8001d7c:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d80:	d012      	beq.n	8001da8 <HAL_TIM_Base_Start+0x3c>
 8001d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d86:	d00f      	beq.n	8001da8 <HAL_TIM_Base_Start+0x3c>
 8001d88:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00b      	beq.n	8001da8 <HAL_TIM_Base_Start+0x3c>
 8001d90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d007      	beq.n	8001da8 <HAL_TIM_Base_Start+0x3c>
 8001d98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d003      	beq.n	8001da8 <HAL_TIM_Base_Start+0x3c>
 8001da0:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d104      	bne.n	8001db2 <HAL_TIM_Base_Start+0x46>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dae:	2a06      	cmp	r2, #6
 8001db0:	d007      	beq.n	8001dc2 <HAL_TIM_Base_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8001db8:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	4770      	bx	lr
    return HAL_ERROR;
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	4770      	bx	lr
  return HAL_OK;
 8001dc2:	2000      	movs	r0, #0
}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40010000 	.word	0x40010000

08001dcc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001dcc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d127      	bne.n	8001e24 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dd4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd6:	4915      	ldr	r1, [pc, #84]	; (8001e2c <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dde:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001de0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001de8:	d011      	beq.n	8001e0e <HAL_TIM_Base_Start_IT+0x42>
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dee:	d00e      	beq.n	8001e0e <HAL_TIM_Base_Start_IT+0x42>
 8001df0:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <HAL_TIM_Base_Start_IT+0x64>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00b      	beq.n	8001e0e <HAL_TIM_Base_Start_IT+0x42>
 8001df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <HAL_TIM_Base_Start_IT+0x42>
 8001dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_Base_Start_IT+0x42>
 8001e06:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d104      	bne.n	8001e18 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e14:	2a06      	cmp	r2, #6
 8001e16:	d007      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8001e1e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	4770      	bx	lr
    return HAL_ERROR;
 8001e24:	2001      	movs	r0, #1
 8001e26:	4770      	bx	lr
  return HAL_OK;
 8001e28:	2000      	movs	r0, #0
}
 8001e2a:	4770      	bx	lr
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40000400 	.word	0x40000400

08001e34 <HAL_TIM_OC_DelayElapsedCallback>:
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop

08001e38 <HAL_TIM_IC_CaptureCallback>:
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop

08001e3c <HAL_TIM_PWM_PulseFinishedCallback>:
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop

08001e40 <HAL_TIM_TriggerCallback>:
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop

08001e44 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8001e44:	6803      	ldr	r3, [r0, #0]
{
 8001e46:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8001e48:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e4a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e4c:	07a9      	lsls	r1, r5, #30
{
 8001e4e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e50:	d501      	bpl.n	8001e56 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e52:	07b2      	lsls	r2, r6, #30
 8001e54:	d451      	bmi.n	8001efa <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e56:	0769      	lsls	r1, r5, #29
 8001e58:	d501      	bpl.n	8001e5e <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e5a:	0772      	lsls	r2, r6, #29
 8001e5c:	d43a      	bmi.n	8001ed4 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e5e:	072b      	lsls	r3, r5, #28
 8001e60:	d501      	bpl.n	8001e66 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e62:	0730      	lsls	r0, r6, #28
 8001e64:	d424      	bmi.n	8001eb0 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e66:	06ea      	lsls	r2, r5, #27
 8001e68:	d501      	bpl.n	8001e6e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e6a:	06f3      	lsls	r3, r6, #27
 8001e6c:	d410      	bmi.n	8001e90 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e6e:	07e8      	lsls	r0, r5, #31
 8001e70:	d501      	bpl.n	8001e76 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e72:	07f1      	lsls	r1, r6, #31
 8001e74:	d457      	bmi.n	8001f26 <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e76:	062a      	lsls	r2, r5, #24
 8001e78:	d501      	bpl.n	8001e7e <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e7a:	0633      	lsls	r3, r6, #24
 8001e7c:	d45b      	bmi.n	8001f36 <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e7e:	0668      	lsls	r0, r5, #25
 8001e80:	d501      	bpl.n	8001e86 <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e82:	0671      	lsls	r1, r6, #25
 8001e84:	d45f      	bmi.n	8001f46 <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e86:	06aa      	lsls	r2, r5, #26
 8001e88:	d501      	bpl.n	8001e8e <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e8a:	06b3      	lsls	r3, r6, #26
 8001e8c:	d442      	bmi.n	8001f14 <HAL_TIM_IRQHandler+0xd0>
}
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	f06f 0210 	mvn.w	r2, #16
 8001e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e98:	2208      	movs	r2, #8
 8001e9a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea4:	d063      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	f7ff ffc7 	bl	8001e38 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	7723      	strb	r3, [r4, #28]
 8001eae:	e7de      	b.n	8001e6e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	f06f 0208 	mvn.w	r2, #8
 8001eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eb8:	2204      	movs	r2, #4
 8001eba:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec2:	d151      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec4:	f7ff ffb6 	bl	8001e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7ff ffb7 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	7723      	strb	r3, [r4, #28]
 8001ed2:	e7c8      	b.n	8001e66 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	f06f 0204 	mvn.w	r2, #4
 8001eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001edc:	2202      	movs	r2, #2
 8001ede:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee8:	d13b      	bne.n	8001f62 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	f7ff ffa3 	bl	8001e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f7ff ffa4 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	7723      	strb	r3, [r4, #28]
 8001ef8:	e7b1      	b.n	8001e5e <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001efa:	f06f 0202 	mvn.w	r2, #2
 8001efe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f00:	2201      	movs	r2, #1
 8001f02:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	079b      	lsls	r3, r3, #30
 8001f08:	d025      	beq.n	8001f56 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f0a:	f7ff ff95 	bl	8001e38 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	7723      	strb	r3, [r4, #28]
 8001f12:	e7a0      	b.n	8001e56 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001f1a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f1c:	611a      	str	r2, [r3, #16]
}
 8001f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001f22:	f000 b82b 	b.w	8001f7c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	f06f 0201 	mvn.w	r2, #1
 8001f2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f000 fab4 	bl	800249c <HAL_TIM_PeriodElapsedCallback>
 8001f34:	e79f      	b.n	8001e76 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f000 f81e 	bl	8001f80 <HAL_TIMEx_BreakCallback>
 8001f44:	e79b      	b.n	8001e7e <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f4c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7ff ff76 	bl	8001e40 <HAL_TIM_TriggerCallback>
 8001f54:	e797      	b.n	8001e86 <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	f7ff ff6d 	bl	8001e34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7ff ff6e 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
 8001f60:	e7d5      	b.n	8001f0e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	f7ff ff69 	bl	8001e38 <HAL_TIM_IC_CaptureCallback>
 8001f66:	e7c5      	b.n	8001ef4 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f68:	f7ff ff66 	bl	8001e38 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e7af      	b.n	8001ece <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	f7ff ff61 	bl	8001e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f72:	4620      	mov	r0, r4
 8001f74:	f7ff ff62 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
 8001f78:	e797      	b.n	8001eaa <HAL_TIM_IRQHandler+0x66>
 8001f7a:	bf00      	nop

08001f7c <HAL_TIMEx_CommutCallback>:
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop

08001f80 <HAL_TIMEx_BreakCallback>:
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	0000      	movs	r0, r0
	...

08001f88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001f88:	b500      	push	{lr}

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f8a:	4893      	ldr	r0, [pc, #588]	; (80021d8 <MX_ADC1_Init+0x250>)
 8001f8c:	4993      	ldr	r1, [pc, #588]	; (80021dc <MX_ADC1_Init+0x254>)
 8001f8e:	6001      	str	r1, [r0, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f90:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
 8001f92:	2201      	movs	r2, #1
{
 8001f94:	b085      	sub	sp, #20
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f96:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f9a:	e9cd 3300 	strd	r3, r3, [sp]
 8001f9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fa2:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hadc1.Init.ScanConvMode = ENABLE;
 8001fa6:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fa8:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001faa:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fae:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 16;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fb0:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.NbrOfConversion = 16;
 8001fb4:	2310      	movs	r3, #16
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fb6:	6142      	str	r2, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fb8:	4a89      	ldr	r2, [pc, #548]	; (80021e0 <MX_ADC1_Init+0x258>)
  hadc1.Init.NbrOfConversion = 16;
 8001fba:	61c3      	str	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fc2:	f7fe fe1f 	bl	8000c04 <HAL_ADC_Init>
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	f040 80b2 	bne.w	8002130 <MX_ADC1_Init+0x1a8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fcc:	ed9f 7b74 	vldr	d7, [pc, #464]	; 80021a0 <MX_ADC1_Init+0x218>
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001fd0:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fd2:	4881      	ldr	r0, [pc, #516]	; (80021d8 <MX_ADC1_Init+0x250>)
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001fd4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fd6:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_0;
 8001fd8:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fdc:	f7fe ffb0 	bl	8000f40 <HAL_ADC_ConfigChannel>
 8001fe0:	2800      	cmp	r0, #0
 8001fe2:	f040 80d7 	bne.w	8002194 <MX_ADC1_Init+0x20c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2302      	movs	r3, #2
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fea:	487b      	ldr	r0, [pc, #492]	; (80021d8 <MX_ADC1_Init+0x250>)
 8001fec:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_1;
 8001fee:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ff2:	f7fe ffa5 	bl	8000f40 <HAL_ADC_ConfigChannel>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	f040 80c9 	bne.w	800218e <MX_ADC1_Init+0x206>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ffc:	ed9f 7b6a 	vldr	d7, [pc, #424]	; 80021a8 <MX_ADC1_Init+0x220>
  sConfig.Rank = 3;
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002000:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002002:	4875      	ldr	r0, [pc, #468]	; (80021d8 <MX_ADC1_Init+0x250>)
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002004:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002006:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_2;
 8002008:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800200c:	f7fe ff98 	bl	8000f40 <HAL_ADC_ConfigChannel>
 8002010:	2800      	cmp	r0, #0
 8002012:	f040 80b9 	bne.w	8002188 <MX_ADC1_Init+0x200>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002016:	ed9f 7b66 	vldr	d7, [pc, #408]	; 80021b0 <MX_ADC1_Init+0x228>
  sConfig.Rank = 4;
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800201a:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800201c:	486e      	ldr	r0, [pc, #440]	; (80021d8 <MX_ADC1_Init+0x250>)
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800201e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002020:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_3;
 8002022:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002026:	f7fe ff8b 	bl	8000f40 <HAL_ADC_ConfigChannel>
 800202a:	2800      	cmp	r0, #0
 800202c:	f040 80a9 	bne.w	8002182 <MX_ADC1_Init+0x1fa>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002030:	2204      	movs	r2, #4
 8002032:	2305      	movs	r3, #5
  sConfig.Rank = 5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002034:	4868      	ldr	r0, [pc, #416]	; (80021d8 <MX_ADC1_Init+0x250>)
 8002036:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_4;
 8002038:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800203c:	f7fe ff80 	bl	8000f40 <HAL_ADC_ConfigChannel>
 8002040:	2800      	cmp	r0, #0
 8002042:	f040 809b 	bne.w	800217c <MX_ADC1_Init+0x1f4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002046:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 80021b8 <MX_ADC1_Init+0x230>
  sConfig.Rank = 6;
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800204a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800204c:	4862      	ldr	r0, [pc, #392]	; (80021d8 <MX_ADC1_Init+0x250>)
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800204e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002050:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_5;
 8002052:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002056:	f7fe ff73 	bl	8000f40 <HAL_ADC_ConfigChannel>
 800205a:	2800      	cmp	r0, #0
 800205c:	f040 808b 	bne.w	8002176 <MX_ADC1_Init+0x1ee>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002060:	ed9f 7b57 	vldr	d7, [pc, #348]	; 80021c0 <MX_ADC1_Init+0x238>
  sConfig.Rank = 7;
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002064:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002066:	485c      	ldr	r0, [pc, #368]	; (80021d8 <MX_ADC1_Init+0x250>)
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002068:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206a:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_6;
 800206c:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002070:	f7fe ff66 	bl	8000f40 <HAL_ADC_ConfigChannel>
 8002074:	2800      	cmp	r0, #0
 8002076:	d17b      	bne.n	8002170 <MX_ADC1_Init+0x1e8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002078:	ed9f 7b53 	vldr	d7, [pc, #332]	; 80021c8 <MX_ADC1_Init+0x240>
  sConfig.Rank = 8;
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800207c:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800207e:	4856      	ldr	r0, [pc, #344]	; (80021d8 <MX_ADC1_Init+0x250>)
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002080:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002082:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_7;
 8002084:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002088:	f7fe ff5a 	bl	8000f40 <HAL_ADC_ConfigChannel>
 800208c:	2800      	cmp	r0, #0
 800208e:	d16c      	bne.n	800216a <MX_ADC1_Init+0x1e2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002090:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80021d0 <MX_ADC1_Init+0x248>
  sConfig.Rank = 9;
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002094:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002096:	4850      	ldr	r0, [pc, #320]	; (80021d8 <MX_ADC1_Init+0x250>)
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002098:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800209a:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_8;
 800209c:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a0:	f7fe ff4e 	bl	8000f40 <HAL_ADC_ConfigChannel>
 80020a4:	2800      	cmp	r0, #0
 80020a6:	d15d      	bne.n	8002164 <MX_ADC1_Init+0x1dc>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80020a8:	2209      	movs	r2, #9
 80020aa:	230a      	movs	r3, #10
  sConfig.Rank = 10;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ac:	484a      	ldr	r0, [pc, #296]	; (80021d8 <MX_ADC1_Init+0x250>)
 80020ae:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_9;
 80020b0:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b4:	f7fe ff44 	bl	8000f40 <HAL_ADC_ConfigChannel>
 80020b8:	2800      	cmp	r0, #0
 80020ba:	d150      	bne.n	800215e <MX_ADC1_Init+0x1d6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020bc:	220a      	movs	r2, #10
 80020be:	230b      	movs	r3, #11
  sConfig.Rank = 11;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c0:	4845      	ldr	r0, [pc, #276]	; (80021d8 <MX_ADC1_Init+0x250>)
 80020c2:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_10;
 80020c4:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c8:	f7fe ff3a 	bl	8000f40 <HAL_ADC_ConfigChannel>
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d143      	bne.n	8002158 <MX_ADC1_Init+0x1d0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80020d0:	220b      	movs	r2, #11
 80020d2:	230c      	movs	r3, #12
  sConfig.Rank = 12;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d4:	4840      	ldr	r0, [pc, #256]	; (80021d8 <MX_ADC1_Init+0x250>)
 80020d6:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_11;
 80020d8:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020dc:	f7fe ff30 	bl	8000f40 <HAL_ADC_ConfigChannel>
 80020e0:	bbb8      	cbnz	r0, 8002152 <MX_ADC1_Init+0x1ca>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80020e2:	220c      	movs	r2, #12
 80020e4:	230d      	movs	r3, #13
  sConfig.Rank = 13;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e6:	483c      	ldr	r0, [pc, #240]	; (80021d8 <MX_ADC1_Init+0x250>)
 80020e8:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_12;
 80020ea:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ee:	f7fe ff27 	bl	8000f40 <HAL_ADC_ConfigChannel>
 80020f2:	bb58      	cbnz	r0, 800214c <MX_ADC1_Init+0x1c4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80020f4:	220d      	movs	r2, #13
 80020f6:	230e      	movs	r3, #14
  sConfig.Rank = 14;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f8:	4837      	ldr	r0, [pc, #220]	; (80021d8 <MX_ADC1_Init+0x250>)
 80020fa:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_13;
 80020fc:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002100:	f7fe ff1e 	bl	8000f40 <HAL_ADC_ConfigChannel>
 8002104:	b9f8      	cbnz	r0, 8002146 <MX_ADC1_Init+0x1be>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002106:	220e      	movs	r2, #14
 8002108:	230f      	movs	r3, #15
  sConfig.Rank = 15;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800210a:	4833      	ldr	r0, [pc, #204]	; (80021d8 <MX_ADC1_Init+0x250>)
 800210c:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_14;
 800210e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002112:	f7fe ff15 	bl	8000f40 <HAL_ADC_ConfigChannel>
 8002116:	b998      	cbnz	r0, 8002140 <MX_ADC1_Init+0x1b8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002118:	220f      	movs	r2, #15
 800211a:	2310      	movs	r3, #16
  sConfig.Rank = 16;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800211c:	482e      	ldr	r0, [pc, #184]	; (80021d8 <MX_ADC1_Init+0x250>)
 800211e:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_15;
 8002120:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002124:	f7fe ff0c 	bl	8000f40 <HAL_ADC_ConfigChannel>
 8002128:	b928      	cbnz	r0, 8002136 <MX_ADC1_Init+0x1ae>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800212a:	b005      	add	sp, #20
 800212c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002130:	f000 fb80 	bl	8002834 <Error_Handler>
 8002134:	e74a      	b.n	8001fcc <MX_ADC1_Init+0x44>
    Error_Handler();
 8002136:	f000 fb7d 	bl	8002834 <Error_Handler>
}
 800213a:	b005      	add	sp, #20
 800213c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002140:	f000 fb78 	bl	8002834 <Error_Handler>
 8002144:	e7e8      	b.n	8002118 <MX_ADC1_Init+0x190>
    Error_Handler();
 8002146:	f000 fb75 	bl	8002834 <Error_Handler>
 800214a:	e7dc      	b.n	8002106 <MX_ADC1_Init+0x17e>
    Error_Handler();
 800214c:	f000 fb72 	bl	8002834 <Error_Handler>
 8002150:	e7d0      	b.n	80020f4 <MX_ADC1_Init+0x16c>
    Error_Handler();
 8002152:	f000 fb6f 	bl	8002834 <Error_Handler>
 8002156:	e7c4      	b.n	80020e2 <MX_ADC1_Init+0x15a>
    Error_Handler();
 8002158:	f000 fb6c 	bl	8002834 <Error_Handler>
 800215c:	e7b8      	b.n	80020d0 <MX_ADC1_Init+0x148>
    Error_Handler();
 800215e:	f000 fb69 	bl	8002834 <Error_Handler>
 8002162:	e7ab      	b.n	80020bc <MX_ADC1_Init+0x134>
    Error_Handler();
 8002164:	f000 fb66 	bl	8002834 <Error_Handler>
 8002168:	e79e      	b.n	80020a8 <MX_ADC1_Init+0x120>
    Error_Handler();
 800216a:	f000 fb63 	bl	8002834 <Error_Handler>
 800216e:	e78f      	b.n	8002090 <MX_ADC1_Init+0x108>
    Error_Handler();
 8002170:	f000 fb60 	bl	8002834 <Error_Handler>
 8002174:	e780      	b.n	8002078 <MX_ADC1_Init+0xf0>
    Error_Handler();
 8002176:	f000 fb5d 	bl	8002834 <Error_Handler>
 800217a:	e771      	b.n	8002060 <MX_ADC1_Init+0xd8>
    Error_Handler();
 800217c:	f000 fb5a 	bl	8002834 <Error_Handler>
 8002180:	e761      	b.n	8002046 <MX_ADC1_Init+0xbe>
    Error_Handler();
 8002182:	f000 fb57 	bl	8002834 <Error_Handler>
 8002186:	e753      	b.n	8002030 <MX_ADC1_Init+0xa8>
    Error_Handler();
 8002188:	f000 fb54 	bl	8002834 <Error_Handler>
 800218c:	e743      	b.n	8002016 <MX_ADC1_Init+0x8e>
    Error_Handler();
 800218e:	f000 fb51 	bl	8002834 <Error_Handler>
 8002192:	e733      	b.n	8001ffc <MX_ADC1_Init+0x74>
    Error_Handler();
 8002194:	f000 fb4e 	bl	8002834 <Error_Handler>
 8002198:	e725      	b.n	8001fe6 <MX_ADC1_Init+0x5e>
 800219a:	bf00      	nop
 800219c:	f3af 8000 	nop.w
 80021a0:	00000000 	.word	0x00000000
 80021a4:	00000001 	.word	0x00000001
 80021a8:	00000002 	.word	0x00000002
 80021ac:	00000003 	.word	0x00000003
 80021b0:	00000003 	.word	0x00000003
 80021b4:	00000004 	.word	0x00000004
 80021b8:	00000005 	.word	0x00000005
 80021bc:	00000006 	.word	0x00000006
 80021c0:	00000006 	.word	0x00000006
 80021c4:	00000007 	.word	0x00000007
 80021c8:	00000007 	.word	0x00000007
 80021cc:	00000008 	.word	0x00000008
 80021d0:	00000008 	.word	0x00000008
 80021d4:	00000009 	.word	0x00000009
 80021d8:	20000058 	.word	0x20000058
 80021dc:	40012000 	.word	0x40012000
 80021e0:	0f000001 	.word	0x0f000001

080021e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021e4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 80021e6:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <HAL_ADC_MspInit+0xe4>)
 80021e8:	6802      	ldr	r2, [r0, #0]
{
 80021ea:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 80021ee:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80021f4:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80021f8:	9408      	str	r4, [sp, #32]
  if(adcHandle->Instance==ADC1)
 80021fa:	d001      	beq.n	8002200 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80021fc:	b00a      	add	sp, #40	; 0x28
 80021fe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002200:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002204:	9400      	str	r4, [sp, #0]
 8002206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8002208:	4e30      	ldr	r6, [pc, #192]	; (80022cc <HAL_ADC_MspInit+0xe8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800220a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800220e:	645a      	str	r2, [r3, #68]	; 0x44
 8002210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002212:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002216:	9200      	str	r2, [sp, #0]
 8002218:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800221a:	9401      	str	r4, [sp, #4]
 800221c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800221e:	f042 0204 	orr.w	r2, r2, #4
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
 8002224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002226:	f002 0204 	and.w	r2, r2, #4
 800222a:	9201      	str	r2, [sp, #4]
 800222c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	9402      	str	r4, [sp, #8]
 8002230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
 8002238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800223a:	f002 0201 	and.w	r2, r2, #1
 800223e:	9202      	str	r2, [sp, #8]
 8002240:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	9403      	str	r4, [sp, #12]
 8002244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002246:	f042 0202 	orr.w	r2, r2, #2
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002254:	223f      	movs	r2, #63	; 0x3f
 8002256:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002258:	a904      	add	r1, sp, #16
 800225a:	4605      	mov	r5, r0
 800225c:	481c      	ldr	r0, [pc, #112]	; (80022d0 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800225e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	f7ff f94e 	bl	8001504 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002268:	22ff      	movs	r2, #255	; 0xff
 800226a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	4819      	ldr	r0, [pc, #100]	; (80022d4 <HAL_ADC_MspInit+0xf0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002272:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002276:	f7ff f945 	bl	8001504 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800227a:	2203      	movs	r2, #3
 800227c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227e:	4816      	ldr	r0, [pc, #88]	; (80022d8 <HAL_ADC_MspInit+0xf4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002284:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002288:	f7ff f93c 	bl	8001504 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800228c:	4a13      	ldr	r2, [pc, #76]	; (80022dc <HAL_ADC_MspInit+0xf8>)
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800228e:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002290:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002294:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002298:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800229a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800229e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a2:	e9c6 2305 	strd	r2, r3, [r6, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022a6:	4630      	mov	r0, r6
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022a8:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ac:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022b0:	e9c6 3407 	strd	r3, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022b4:	f7fe ff78 	bl	80011a8 <HAL_DMA_Init>
 80022b8:	b918      	cbnz	r0, 80022c2 <HAL_ADC_MspInit+0xde>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80022ba:	63ae      	str	r6, [r5, #56]	; 0x38
 80022bc:	63b5      	str	r5, [r6, #56]	; 0x38
}
 80022be:	b00a      	add	sp, #40	; 0x28
 80022c0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80022c2:	f000 fab7 	bl	8002834 <Error_Handler>
 80022c6:	e7f8      	b.n	80022ba <HAL_ADC_MspInit+0xd6>
 80022c8:	40012000 	.word	0x40012000
 80022cc:	200000a0 	.word	0x200000a0
 80022d0:	40020800 	.word	0x40020800
 80022d4:	40020000 	.word	0x40020000
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40026410 	.word	0x40026410

080022e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80022e0:	b500      	push	{lr}
 80022e2:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022e4:	2200      	movs	r2, #0
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <MX_DMA_Init+0x30>)
 80022e8:	9201      	str	r2, [sp, #4]
 80022ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ec:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80022f0:	6319      	str	r1, [r3, #48]	; 0x30
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f8:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80022fa:	2038      	movs	r0, #56	; 0x38
 80022fc:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022fe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002300:	f7fe feec 	bl	80010dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002304:	2038      	movs	r0, #56	; 0x38

}
 8002306:	b003      	add	sp, #12
 8002308:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800230c:	f7fe bf24 	b.w	8001158 <HAL_NVIC_EnableIRQ>
 8002310:	40023800 	.word	0x40023800

08002314 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002314:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002316:	2400      	movs	r4, #0
{
 8002318:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800231e:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002322:	4b32      	ldr	r3, [pc, #200]	; (80023ec <MX_GPIO_Init+0xd8>)
 8002324:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002326:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 800232a:	4d31      	ldr	r5, [pc, #196]	; (80023f0 <MX_GPIO_Init+0xdc>)
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800232c:	4f31      	ldr	r7, [pc, #196]	; (80023f4 <MX_GPIO_Init+0xe0>)
                          |UART_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800232e:	4e32      	ldr	r6, [pc, #200]	; (80023f8 <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002330:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
 8002336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002338:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800233c:	9200      	str	r2, [sp, #0]
 800233e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002340:	9401      	str	r4, [sp, #4]
 8002342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002344:	f042 0204 	orr.w	r2, r2, #4
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
 800234a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234c:	f002 0204 	and.w	r2, r2, #4
 8002350:	9201      	str	r2, [sp, #4]
 8002352:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002354:	9402      	str	r4, [sp, #8]
 8002356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
 800235e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002360:	f002 0201 	and.w	r2, r2, #1
 8002364:	9202      	str	r2, [sp, #8]
 8002366:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002368:	9403      	str	r4, [sp, #12]
 800236a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800236c:	f042 0202 	orr.w	r2, r2, #2
 8002370:	631a      	str	r2, [r3, #48]	; 0x30
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 800237a:	4622      	mov	r2, r4
 800237c:	4628      	mov	r0, r5
 800237e:	f24c 01f8 	movw	r1, #49400	; 0xc0f8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002382:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 8002384:	f7ff f9b2 	bl	80016ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002388:	4622      	mov	r2, r4
 800238a:	4638      	mov	r0, r7
 800238c:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8002390:	f7ff f9ac 	bl	80016ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002394:	4622      	mov	r2, r4
 8002396:	4630      	mov	r0, r6
 8002398:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 800239c:	f7ff f9a6 	bl	80016ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB14 PB15 PB3 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 80023a0:	2400      	movs	r4, #0
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a2:	4628      	mov	r0, r5
 80023a4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 80023a6:	2503      	movs	r5, #3
 80023a8:	f24c 02f8 	movw	r2, #49400	; 0xc0f8
 80023ac:	2301      	movs	r3, #1
 80023ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b6:	f7ff f8a5 	bl	8001504 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |UART_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ba:	4638      	mov	r0, r7
 80023bc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80023be:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 80023c2:	2301      	movs	r3, #1
 80023c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023cc:	f7ff f89a 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80023d0:	f44f 420f 	mov.w	r2, #36608	; 0x8f00
 80023d4:	2301      	movs	r3, #1
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	a904      	add	r1, sp, #16
 80023d8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80023da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80023de:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f7ff f88f 	bl	8001504 <HAL_GPIO_Init>

}
 80023e6:	b00b      	add	sp, #44	; 0x2c
 80023e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40020800 	.word	0x40020800
 80023f8:	40020000 	.word	0x40020000

080023fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023fc:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023fe:	2300      	movs	r3, #0
{
 8002400:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002402:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8002406:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800240a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800240e:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4920      	ldr	r1, [pc, #128]	; (8002494 <SystemClock_Config+0x98>)
 8002414:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002416:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002418:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800241a:	4a1f      	ldr	r2, [pc, #124]	; (8002498 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002420:	6408      	str	r0, [r1, #64]	; 0x40
 8002422:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002424:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002428:	9101      	str	r1, [sp, #4]
 800242a:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800242c:	9302      	str	r3, [sp, #8]
 800242e:	6813      	ldr	r3, [r2, #0]
 8002430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002438:	2001      	movs	r0, #1
 800243a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800243e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002442:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002446:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002448:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800244c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800244e:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002452:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002454:	2104      	movs	r1, #4
 8002456:	2002      	movs	r0, #2
 8002458:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800245c:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 100;
 800245e:	2364      	movs	r3, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002460:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002462:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002464:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002466:	f7ff f945 	bl	80016f4 <HAL_RCC_OscConfig>
 800246a:	b108      	cbz	r0, 8002470 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800246c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800246e:	e7fe      	b.n	800246e <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002470:	210f      	movs	r1, #15
 8002472:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002474:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002478:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800247c:	a803      	add	r0, sp, #12
 800247e:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002480:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002484:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002486:	f7ff fb4d 	bl	8001b24 <HAL_RCC_ClockConfig>
 800248a:	b108      	cbz	r0, 8002490 <SystemClock_Config+0x94>
 800248c:	b672      	cpsid	i
  while (1)
 800248e:	e7fe      	b.n	800248e <SystemClock_Config+0x92>
}
 8002490:	b014      	add	sp, #80	; 0x50
 8002492:	bd10      	pop	{r4, pc}
 8002494:	40023800 	.word	0x40023800
 8002498:	40007000 	.word	0x40007000

0800249c <HAL_TIM_PeriodElapsedCallback>:
if(htim->Instance == TIM11)
 800249c:	4b37      	ldr	r3, [pc, #220]	; (800257c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800249e:	6802      	ldr	r2, [r0, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d000      	beq.n	80024a6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80024a4:	4770      	bx	lr
	if(cnt_ccr < Duty)
 80024a6:	4a36      	ldr	r2, [pc, #216]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0xe4>)
	 out_pwm = soft_pwm(led_bright);
 80024a8:	4b36      	ldr	r3, [pc, #216]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0xe8>)
	if(cnt_ccr < Duty)
 80024aa:	8811      	ldrh	r1, [r2, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,out_pwm);
 80024ac:	4836      	ldr	r0, [pc, #216]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0xec>)
{
 80024ae:	b510      	push	{r4, lr}
	if(cnt_ccr < Duty)
 80024b0:	881c      	ldrh	r4, [r3, #0]
	if(++cnt_ccr > 10)
 80024b2:	1c4b      	adds	r3, r1, #1
 80024b4:	b29b      	uxth	r3, r3
		out = 1;
 80024b6:	428c      	cmp	r4, r1
 80024b8:	bf94      	ite	ls
 80024ba:	2400      	movls	r4, #0
 80024bc:	2401      	movhi	r4, #1
	if(++cnt_ccr > 10)
 80024be:	2b0a      	cmp	r3, #10
		cnt_ccr = 0;
 80024c0:	bf88      	it	hi
 80024c2:	2300      	movhi	r3, #0
 80024c4:	8013      	strh	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,out_pwm);
 80024c6:	2180      	movs	r1, #128	; 0x80
 80024c8:	4622      	mov	r2, r4
 80024ca:	f7ff f90f 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,out_pwm);
 80024ce:	4622      	mov	r2, r4
 80024d0:	482d      	ldr	r0, [pc, #180]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80024d2:	2140      	movs	r1, #64	; 0x40
 80024d4:	f7ff f90a 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,out_pwm);
 80024d8:	4622      	mov	r2, r4
 80024da:	482b      	ldr	r0, [pc, #172]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80024dc:	2120      	movs	r1, #32
 80024de:	f7ff f905 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,out_pwm);
 80024e2:	4622      	mov	r2, r4
 80024e4:	4828      	ldr	r0, [pc, #160]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80024e6:	2110      	movs	r1, #16
 80024e8:	f7ff f900 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,out_pwm);
 80024ec:	4622      	mov	r2, r4
 80024ee:	4826      	ldr	r0, [pc, #152]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80024f0:	2108      	movs	r1, #8
 80024f2:	f7ff f8fb 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,out_pwm);
 80024f6:	4622      	mov	r2, r4
 80024f8:	4824      	ldr	r0, [pc, #144]	; (800258c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80024fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024fe:	f7ff f8f5 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,out_pwm);
 8002502:	4622      	mov	r2, r4
 8002504:	4821      	ldr	r0, [pc, #132]	; (800258c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002506:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800250a:	f7ff f8ef 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,out_pwm);
 800250e:	4622      	mov	r2, r4
 8002510:	481e      	ldr	r0, [pc, #120]	; (800258c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002512:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002516:	f7ff f8e9 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,out_pwm);
 800251a:	4622      	mov	r2, r4
 800251c:	481b      	ldr	r0, [pc, #108]	; (800258c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800251e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002522:	f7ff f8e3 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,out_pwm);
 8002526:	4622      	mov	r2, r4
 8002528:	4818      	ldr	r0, [pc, #96]	; (800258c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800252a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800252e:	f7ff f8dd 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,out_pwm);
 8002532:	4622      	mov	r2, r4
 8002534:	4816      	ldr	r0, [pc, #88]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800253a:	f7ff f8d7 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,out_pwm);
 800253e:	4622      	mov	r2, r4
 8002540:	4813      	ldr	r0, [pc, #76]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002546:	f7ff f8d1 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,out_pwm);
 800254a:	4622      	mov	r2, r4
 800254c:	4810      	ldr	r0, [pc, #64]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	f7ff f8cc 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,out_pwm);
 8002554:	4622      	mov	r2, r4
 8002556:	480e      	ldr	r0, [pc, #56]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002558:	2140      	movs	r1, #64	; 0x40
 800255a:	f7ff f8c7 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,out_pwm);
 800255e:	4622      	mov	r2, r4
 8002560:	4809      	ldr	r0, [pc, #36]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002566:	f7ff f8c1 	bl	80016ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,out_pwm);
 800256a:	4622      	mov	r2, r4
 800256c:	4806      	ldr	r0, [pc, #24]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0xec>)
}
 800256e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,out_pwm);
 8002572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002576:	f7ff b8b9 	b.w	80016ec <HAL_GPIO_WritePin>
 800257a:	bf00      	nop
 800257c:	40014800 	.word	0x40014800
 8002580:	20000144 	.word	0x20000144
 8002584:	2000002c 	.word	0x2000002c
 8002588:	40020400 	.word	0x40020400
 800258c:	40020000 	.word	0x40020000
 8002590:	40020800 	.word	0x40020800

08002594 <uart_ex_init>:
{
 8002594:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(UART_S_GPIO_Port, UART_S_Pin, GPIO_PIN_SET);
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <uart_ex_init+0x18>)
 8002598:	2201      	movs	r2, #1
 800259a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800259e:	f7ff f8a5 	bl	80016ec <HAL_GPIO_WritePin>
}
 80025a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start(&htim10);
 80025a6:	4802      	ldr	r0, [pc, #8]	; (80025b0 <uart_ex_init+0x1c>)
 80025a8:	f7ff bbe0 	b.w	8001d6c <HAL_TIM_Base_Start>
 80025ac:	40020800 	.word	0x40020800
 80025b0:	20000148 	.word	0x20000148
 80025b4:	00000000 	.word	0x00000000

080025b8 <main>:
{
 80025b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025bc:	ed2d 8b02 	vpush	{d8}
  HAL_Init();
 80025c0:	f7fe fae2 	bl	8000b88 <HAL_Init>
  SystemClock_Config();
 80025c4:	f7ff ff1a 	bl	80023fc <SystemClock_Config>
  MX_GPIO_Init();
 80025c8:	f7ff fea4 	bl	8002314 <MX_GPIO_Init>
  MX_DMA_Init();
 80025cc:	f7ff fe88 	bl	80022e0 <MX_DMA_Init>
  MX_ADC1_Init();
 80025d0:	f7ff fcda 	bl	8001f88 <MX_ADC1_Init>
  MX_TIM11_Init();
 80025d4:	f000 f98e 	bl	80028f4 <MX_TIM11_Init>
  MX_TIM10_Init();
 80025d8:	f000 f972 	bl	80028c0 <MX_TIM10_Init>
  HAL_TIM_Base_Start_IT(&htim11);
 80025dc:	4882      	ldr	r0, [pc, #520]	; (80027e8 <main+0x230>)
 80025de:	f8df b21c 	ldr.w	fp, [pc, #540]	; 80027fc <main+0x244>
 80025e2:	f8df 9248 	ldr.w	r9, [pc, #584]	; 800282c <main+0x274>
	  if(AVG_Sens > 2700)
 80025e6:	eddf 8a81 	vldr	s17, [pc, #516]	; 80027ec <main+0x234>
	  else if(AVG_Sens > 1100 && AVG_Sens < 1450)
 80025ea:	ed9f 8a81 	vldr	s16, [pc, #516]	; 80027f0 <main+0x238>
	HAL_GPIO_WritePin(UART_S_GPIO_Port, UART_S_Pin, GPIO_PIN_RESET);
 80025ee:	4d81      	ldr	r5, [pc, #516]	; (80027f4 <main+0x23c>)
	TIM10->CNT = 0;
 80025f0:	4c81      	ldr	r4, [pc, #516]	; (80027f8 <main+0x240>)
  HAL_TIM_Base_Start_IT(&htim11);
 80025f2:	f7ff fbeb 	bl	8001dcc <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, ADC_Buff, 16);
 80025f6:	4981      	ldr	r1, [pc, #516]	; (80027fc <main+0x244>)
 80025f8:	4881      	ldr	r0, [pc, #516]	; (8002800 <main+0x248>)
 80025fa:	2210      	movs	r2, #16
 80025fc:	f7fe fbae 	bl	8000d5c <HAL_ADC_Start_DMA>
  uart_ex_init();
 8002600:	f7ff ffc8 	bl	8002594 <uart_ex_init>
	  ADC_Read[4] = ADC_Buff[2] & 0xFFFF;
 8002604:	f8db 3008 	ldr.w	r3, [fp, #8]
	  ADC_Read[0] = ADC_Buff[0] & 0xFFFF;
 8002608:	f8c9 3008 	str.w	r3, [r9, #8]
 800260c:	f8db 300c 	ldr.w	r3, [fp, #12]
 8002610:	f8c9 300c 	str.w	r3, [r9, #12]
 8002614:	f8db 3010 	ldr.w	r3, [fp, #16]
 8002618:	f8c9 3010 	str.w	r3, [r9, #16]
 800261c:	f8db 3014 	ldr.w	r3, [fp, #20]
 8002620:	f8c9 3014 	str.w	r3, [r9, #20]
 8002624:	f8db 3018 	ldr.w	r3, [fp, #24]
 8002628:	f8c9 3018 	str.w	r3, [r9, #24]
 800262c:	e9db 2300 	ldrd	r2, r3, [fp]
 8002630:	f8db 101c 	ldr.w	r1, [fp, #28]
 8002634:	f8c9 101c 	str.w	r1, [r9, #28]
 8002638:	e9c9 2300 	strd	r2, r3, [r9]
	  memcpy(data_uart_send+3,ADC_Read,sizeof(ADC_Read));
 800263c:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 800282c <main+0x274>
 8002640:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8002830 <main+0x278>
 8002644:	46cc      	mov	ip, r9
 8002646:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800264a:	f8c8 0004 	str.w	r0, [r8, #4]
 800264e:	f8c8 1008 	str.w	r1, [r8, #8]
 8002652:	f8c8 200c 	str.w	r2, [r8, #12]
 8002656:	f8c8 3010 	str.w	r3, [r8, #16]
 800265a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(UART_S_GPIO_Port, UART_S_Pin, GPIO_PIN_RESET);
 800265e:	2600      	movs	r6, #0
	  memcpy(data_uart_send+3,ADC_Read,sizeof(ADC_Read));
 8002660:	f8c8 0014 	str.w	r0, [r8, #20]
 8002664:	f8c8 1018 	str.w	r1, [r8, #24]
 8002668:	f8c8 201c 	str.w	r2, [r8, #28]
 800266c:	f8c8 3020 	str.w	r3, [r8, #32]
	HAL_GPIO_WritePin(UART_S_GPIO_Port, UART_S_Pin, GPIO_PIN_RESET);
 8002670:	2200      	movs	r2, #0
 8002672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002676:	4628      	mov	r0, r5
		  uart_send(data_uart_send[i]);
 8002678:	f818 7f01 	ldrb.w	r7, [r8, #1]!
	HAL_GPIO_WritePin(UART_S_GPIO_Port, UART_S_Pin, GPIO_PIN_RESET);
 800267c:	f7ff f836 	bl	80016ec <HAL_GPIO_WritePin>
	TIM10->CNT = 0;
 8002680:	6266      	str	r6, [r4, #36]	; 0x24
	while(TIM10->CNT < time);
 8002682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002684:	2b33      	cmp	r3, #51	; 0x33
 8002686:	d9fc      	bls.n	8002682 <main+0xca>
	for(int i= 0; i<8; i++)
 8002688:	f04f 0a00 	mov.w	sl, #0
		HAL_GPIO_WritePin(UART_S_GPIO_Port, UART_S_Pin, (data >> i) & 0x01);
 800268c:	fa47 f20a 	asr.w	r2, r7, sl
 8002690:	f002 0201 	and.w	r2, r2, #1
 8002694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002698:	4628      	mov	r0, r5
 800269a:	f7ff f827 	bl	80016ec <HAL_GPIO_WritePin>
	TIM10->CNT = 0;
 800269e:	6266      	str	r6, [r4, #36]	; 0x24
	while(TIM10->CNT < time);
 80026a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026a2:	2b33      	cmp	r3, #51	; 0x33
 80026a4:	d9fc      	bls.n	80026a0 <main+0xe8>
	for(int i= 0; i<8; i++)
 80026a6:	f10a 0a01 	add.w	sl, sl, #1
 80026aa:	f1ba 0f08 	cmp.w	sl, #8
 80026ae:	d1ed      	bne.n	800268c <main+0xd4>
	HAL_GPIO_WritePin(UART_S_GPIO_Port, UART_S_Pin, GPIO_PIN_SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026b6:	4628      	mov	r0, r5
 80026b8:	f7ff f818 	bl	80016ec <HAL_GPIO_WritePin>
	TIM10->CNT = 0;
 80026bc:	6266      	str	r6, [r4, #36]	; 0x24
	while(TIM10->CNT < time);
 80026be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026c0:	2b33      	cmp	r3, #51	; 0x33
 80026c2:	d9fc      	bls.n	80026be <main+0x106>
	  for(int i=0;i<35;i++)
 80026c4:	4b4f      	ldr	r3, [pc, #316]	; (8002804 <main+0x24c>)
 80026c6:	4543      	cmp	r3, r8
 80026c8:	d1d2      	bne.n	8002670 <main+0xb8>
	  HAL_Delay(10);
 80026ca:	200a      	movs	r0, #10
 80026cc:	f7fe fa88 	bl	8000be0 <HAL_Delay>
	  AVG_Sens = ADC_Read[0] + ADC_Read[1] + ADC_Read[2] + ADC_Read[3] + ADC_Read[6] + ADC_Read[7] + ADC_Read[8] + ADC_Read[9] + ADC_Read[10] + ADC_Read[11] + ADC_Read[12] + ADC_Read[13] + ADC_Read[14] + ADC_Read[15];
 80026d0:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 80026d4:	f8b9 3000 	ldrh.w	r3, [r9]
 80026d8:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 80026dc:	440b      	add	r3, r1
 80026de:	f8b9 1006 	ldrh.w	r1, [r9, #6]
 80026e2:	4413      	add	r3, r2
 80026e4:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 80026e8:	440b      	add	r3, r1
 80026ea:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80026ee:	4413      	add	r3, r2
 80026f0:	f8b9 2010 	ldrh.w	r2, [r9, #16]
 80026f4:	440b      	add	r3, r1
 80026f6:	f8b9 1012 	ldrh.w	r1, [r9, #18]
 80026fa:	4413      	add	r3, r2
 80026fc:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 8002700:	440b      	add	r3, r1
 8002702:	f8b9 1016 	ldrh.w	r1, [r9, #22]
 8002706:	4413      	add	r3, r2
 8002708:	f8b9 2018 	ldrh.w	r2, [r9, #24]
 800270c:	440b      	add	r3, r1
 800270e:	f8b9 101a 	ldrh.w	r1, [r9, #26]
 8002712:	4413      	add	r3, r2
 8002714:	f8b9 201c 	ldrh.w	r2, [r9, #28]
 8002718:	440b      	add	r3, r1
 800271a:	4413      	add	r3, r2
 800271c:	f8b9 201e 	ldrh.w	r2, [r9, #30]
 8002720:	1898      	adds	r0, r3, r2
	  AVG_Sens *= 0.2;
 8002722:	ee07 0a90 	vmov	s15, r0
 8002726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800272a:	ee17 0a90 	vmov	r0, s15
 800272e:	f7fd ffe1 	bl	80006f4 <__aeabi_f2d>
 8002732:	a32b      	add	r3, pc, #172	; (adr r3, 80027e0 <main+0x228>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	f7fd fd4e 	bl	80001d8 <__aeabi_dmul>
 800273c:	f7fe f832 	bl	80007a4 <__aeabi_d2f>
 8002740:	ee07 0a90 	vmov	s15, r0
	  if(AVG_Sens > 2700)
 8002744:	eef4 7ae8 	vcmpe.f32	s15, s17
 8002748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274c:	dc12      	bgt.n	8002774 <main+0x1bc>
	  else if(AVG_Sens > 1100 && AVG_Sens < 1450)
 800274e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8002752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002756:	dd0f      	ble.n	8002778 <main+0x1c0>
 8002758:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002808 <main+0x250>
 800275c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	d508      	bpl.n	8002778 <main+0x1c0>
 8002766:	2301      	movs	r3, #1
	  AVG_Sens *= 0.2;
 8002768:	4a28      	ldr	r2, [pc, #160]	; (800280c <main+0x254>)
 800276a:	edc2 7a00 	vstr	s15, [r2]
		  deteksi_sampah = daun_kering;
 800276e:	4a28      	ldr	r2, [pc, #160]	; (8002810 <main+0x258>)
 8002770:	7013      	strb	r3, [r2, #0]
 8002772:	e747      	b.n	8002604 <main+0x4c>
 8002774:	2300      	movs	r3, #0
 8002776:	e7f7      	b.n	8002768 <main+0x1b0>
	  else if(AVG_Sens > 1700 && AVG_Sens < 1900)
 8002778:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002814 <main+0x25c>
 800277c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002784:	dd08      	ble.n	8002798 <main+0x1e0>
 8002786:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002818 <main+0x260>
 800278a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	d501      	bpl.n	8002798 <main+0x1e0>
 8002794:	2305      	movs	r3, #5
 8002796:	e7e7      	b.n	8002768 <main+0x1b0>
	  else if(AVG_Sens > 2000 && AVG_Sens < 2400)
 8002798:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800281c <main+0x264>
 800279c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a4:	dd08      	ble.n	80027b8 <main+0x200>
 80027a6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002820 <main+0x268>
 80027aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b2:	d501      	bpl.n	80027b8 <main+0x200>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e7d7      	b.n	8002768 <main+0x1b0>
	  else if(AVG_Sens > 500 && AVG_Sens < 800)
 80027b8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002824 <main+0x26c>
 80027bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c4:	dd09      	ble.n	80027da <main+0x222>
 80027c6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002828 <main+0x270>
 80027ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d2:	bf4c      	ite	mi
 80027d4:	2304      	movmi	r3, #4
 80027d6:	2309      	movpl	r3, #9
 80027d8:	e7c6      	b.n	8002768 <main+0x1b0>
 80027da:	2309      	movs	r3, #9
 80027dc:	e7c4      	b.n	8002768 <main+0x1b0>
 80027de:	bf00      	nop
 80027e0:	9999999a 	.word	0x9999999a
 80027e4:	3fc99999 	.word	0x3fc99999
 80027e8:	20000190 	.word	0x20000190
 80027ec:	4528c000 	.word	0x4528c000
 80027f0:	44898000 	.word	0x44898000
 80027f4:	40020800 	.word	0x40020800
 80027f8:	40014400 	.word	0x40014400
 80027fc:	20000100 	.word	0x20000100
 8002800:	20000058 	.word	0x20000058
 8002804:	2000002a 	.word	0x2000002a
 8002808:	44b54000 	.word	0x44b54000
 800280c:	20000140 	.word	0x20000140
 8002810:	20000146 	.word	0x20000146
 8002814:	44d48000 	.word	0x44d48000
 8002818:	44ed8000 	.word	0x44ed8000
 800281c:	44fa0000 	.word	0x44fa0000
 8002820:	45160000 	.word	0x45160000
 8002824:	43fa0000 	.word	0x43fa0000
 8002828:	44480000 	.word	0x44480000
 800282c:	20000120 	.word	0x20000120
 8002830:	20000007 	.word	0x20000007

08002834 <Error_Handler>:
 8002834:	b672      	cpsid	i
  while (1)
 8002836:	e7fe      	b.n	8002836 <Error_Handler+0x2>

08002838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002838:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	4b0c      	ldr	r3, [pc, #48]	; (800286c <HAL_MspInit+0x34>)
 800283c:	2100      	movs	r1, #0
 800283e:	9100      	str	r1, [sp, #0]
 8002840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
 8002848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800284a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800284e:	9200      	str	r2, [sp, #0]
 8002850:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	9101      	str	r1, [sp, #4]
 8002854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002856:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002866:	b002      	add	sp, #8
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800

08002870 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002870:	e7fe      	b.n	8002870 <NMI_Handler>
 8002872:	bf00      	nop

08002874 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <HardFault_Handler>
 8002876:	bf00      	nop

08002878 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <MemManage_Handler>
 800287a:	bf00      	nop

0800287c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287c:	e7fe      	b.n	800287c <BusFault_Handler>
 800287e:	bf00      	nop

08002880 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <UsageFault_Handler>
 8002882:	bf00      	nop

08002884 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop

08002888 <DebugMon_Handler>:
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop

0800288c <PendSV_Handler>:
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop

08002890 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002890:	f7fe b994 	b.w	8000bbc <HAL_IncTick>

08002894 <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002894:	4801      	ldr	r0, [pc, #4]	; (800289c <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 8002896:	f7ff bad5 	b.w	8001e44 <HAL_TIM_IRQHandler>
 800289a:	bf00      	nop
 800289c:	20000190 	.word	0x20000190

080028a0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028a0:	4801      	ldr	r0, [pc, #4]	; (80028a8 <DMA2_Stream0_IRQHandler+0x8>)
 80028a2:	f7fe bd59 	b.w	8001358 <HAL_DMA_IRQHandler>
 80028a6:	bf00      	nop
 80028a8:	200000a0 	.word	0x200000a0

080028ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ac:	4a03      	ldr	r2, [pc, #12]	; (80028bc <SystemInit+0x10>)
 80028ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80028b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80028c0:	b510      	push	{r4, lr}
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80028c2:	480a      	ldr	r0, [pc, #40]	; (80028ec <MX_TIM10_Init+0x2c>)
 80028c4:	4c0a      	ldr	r4, [pc, #40]	; (80028f0 <MX_TIM10_Init+0x30>)
  htim10.Init.Prescaler = 100-1;
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c6:	2300      	movs	r3, #0
  htim10.Init.Prescaler = 100-1;
 80028c8:	2163      	movs	r1, #99	; 0x63
  htim10.Init.Period = 65535;
 80028ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim10.Init.Prescaler = 100-1;
 80028ce:	e9c0 4100 	strd	r4, r1, [r0]
  htim10.Init.Period = 65535;
 80028d2:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d6:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80028da:	f7ff f9c1 	bl	8001c60 <HAL_TIM_Base_Init>
 80028de:	b900      	cbnz	r0, 80028e2 <MX_TIM10_Init+0x22>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80028e0:	bd10      	pop	{r4, pc}
 80028e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80028e6:	f7ff bfa5 	b.w	8002834 <Error_Handler>
 80028ea:	bf00      	nop
 80028ec:	20000148 	.word	0x20000148
 80028f0:	40014400 	.word	0x40014400

080028f4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80028f4:	b510      	push	{r4, lr}
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80028f6:	4809      	ldr	r0, [pc, #36]	; (800291c <MX_TIM11_Init+0x28>)
 80028f8:	4c09      	ldr	r4, [pc, #36]	; (8002920 <MX_TIM11_Init+0x2c>)
  htim11.Init.Prescaler = 10-1;
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fa:	2300      	movs	r3, #0
  htim11.Init.Prescaler = 10-1;
 80028fc:	2109      	movs	r1, #9
  htim11.Init.Period = 200-1;
 80028fe:	22c7      	movs	r2, #199	; 0xc7
  htim11.Init.Prescaler = 10-1;
 8002900:	e9c0 4100 	strd	r4, r1, [r0]
  htim11.Init.Period = 200-1;
 8002904:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002908:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800290a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800290c:	f7ff f9a8 	bl	8001c60 <HAL_TIM_Base_Init>
 8002910:	b900      	cbnz	r0, 8002914 <MX_TIM11_Init+0x20>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002912:	bd10      	pop	{r4, pc}
 8002914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002918:	f7ff bf8c 	b.w	8002834 <Error_Handler>
 800291c:	20000190 	.word	0x20000190
 8002920:	40014800 	.word	0x40014800

08002924 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002924:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM10)
 8002926:	4a18      	ldr	r2, [pc, #96]	; (8002988 <HAL_TIM_Base_MspInit+0x64>)
 8002928:	6803      	ldr	r3, [r0, #0]
 800292a:	4293      	cmp	r3, r2
{
 800292c:	b083      	sub	sp, #12
  if(tim_baseHandle->Instance==TIM10)
 800292e:	d005      	beq.n	800293c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM11)
 8002930:	4a16      	ldr	r2, [pc, #88]	; (800298c <HAL_TIM_Base_MspInit+0x68>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d011      	beq.n	800295a <HAL_TIM_Base_MspInit+0x36>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002936:	b003      	add	sp, #12
 8002938:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 800293c:	4b14      	ldr	r3, [pc, #80]	; (8002990 <HAL_TIM_Base_MspInit+0x6c>)
 800293e:	2200      	movs	r2, #0
 8002940:	9200      	str	r2, [sp, #0]
 8002942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002944:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	9b00      	ldr	r3, [sp, #0]
}
 8002954:	b003      	add	sp, #12
 8002956:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM11_CLK_ENABLE();
 800295a:	2200      	movs	r2, #0
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <HAL_TIM_Base_MspInit+0x6c>)
 800295e:	9201      	str	r2, [sp, #4]
 8002960:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002962:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8002966:	6459      	str	r1, [r3, #68]	; 0x44
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002970:	201a      	movs	r0, #26
 8002972:	4611      	mov	r1, r2
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002974:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002976:	f7fe fbb1 	bl	80010dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800297a:	201a      	movs	r0, #26
}
 800297c:	b003      	add	sp, #12
 800297e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002982:	f7fe bbe9 	b.w	8001158 <HAL_NVIC_EnableIRQ>
 8002986:	bf00      	nop
 8002988:	40014400 	.word	0x40014400
 800298c:	40014800 	.word	0x40014800
 8002990:	40023800 	.word	0x40023800

08002994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002998:	f7ff ff88 	bl	80028ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800299c:	480c      	ldr	r0, [pc, #48]	; (80029d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800299e:	490d      	ldr	r1, [pc, #52]	; (80029d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029a0:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029a4:	e002      	b.n	80029ac <LoopCopyDataInit>

080029a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029aa:	3304      	adds	r3, #4

080029ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b0:	d3f9      	bcc.n	80029a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029b4:	4c0a      	ldr	r4, [pc, #40]	; (80029e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b8:	e001      	b.n	80029be <LoopFillZerobss>

080029ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029bc:	3204      	adds	r2, #4

080029be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c0:	d3fb      	bcc.n	80029ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029c2:	f000 f811 	bl	80029e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029c6:	f7ff fdf7 	bl	80025b8 <main>
  bx  lr    
 80029ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d4:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80029d8:	08002a70 	.word	0x08002a70
  ldr r2, =_sbss
 80029dc:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80029e0:	200001d8 	.word	0x200001d8

080029e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029e4:	e7fe      	b.n	80029e4 <ADC_IRQHandler>
	...

080029e8 <__libc_init_array>:
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	4d0d      	ldr	r5, [pc, #52]	; (8002a20 <__libc_init_array+0x38>)
 80029ec:	4c0d      	ldr	r4, [pc, #52]	; (8002a24 <__libc_init_array+0x3c>)
 80029ee:	1b64      	subs	r4, r4, r5
 80029f0:	10a4      	asrs	r4, r4, #2
 80029f2:	2600      	movs	r6, #0
 80029f4:	42a6      	cmp	r6, r4
 80029f6:	d109      	bne.n	8002a0c <__libc_init_array+0x24>
 80029f8:	4d0b      	ldr	r5, [pc, #44]	; (8002a28 <__libc_init_array+0x40>)
 80029fa:	4c0c      	ldr	r4, [pc, #48]	; (8002a2c <__libc_init_array+0x44>)
 80029fc:	f000 f818 	bl	8002a30 <_init>
 8002a00:	1b64      	subs	r4, r4, r5
 8002a02:	10a4      	asrs	r4, r4, #2
 8002a04:	2600      	movs	r6, #0
 8002a06:	42a6      	cmp	r6, r4
 8002a08:	d105      	bne.n	8002a16 <__libc_init_array+0x2e>
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a10:	4798      	blx	r3
 8002a12:	3601      	adds	r6, #1
 8002a14:	e7ee      	b.n	80029f4 <__libc_init_array+0xc>
 8002a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1a:	4798      	blx	r3
 8002a1c:	3601      	adds	r6, #1
 8002a1e:	e7f2      	b.n	8002a06 <__libc_init_array+0x1e>
 8002a20:	08002a68 	.word	0x08002a68
 8002a24:	08002a68 	.word	0x08002a68
 8002a28:	08002a68 	.word	0x08002a68
 8002a2c:	08002a6c 	.word	0x08002a6c

08002a30 <_init>:
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a32:	bf00      	nop
 8002a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a36:	bc08      	pop	{r3}
 8002a38:	469e      	mov	lr, r3
 8002a3a:	4770      	bx	lr

08002a3c <_fini>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	bf00      	nop
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr
